
DashScreenFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004668  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  00004668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000026c  20000078  000046e0  00020078  2**2
                  ALLOC
  3 .stack        00002004  200002e4  0000494c  00020078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003317a  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004694  00000000  00000000  00053273  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00011201  00000000  00000000  00057907  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ff0  00000000  00000000  00068b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ff0  00000000  00000000  00069af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00024a36  00000000  00000000  0006aae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001a40f  00000000  00000000  0008f51e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009e737  00000000  00000000  000a992d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000310c  00000000  00000000  00148064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 22 00 20 35 01 00 00 31 01 00 00 31 01 00 00     .". 5...1...1...
	...
      2c:	31 01 00 00 00 00 00 00 00 00 00 00 31 01 00 00     1...........1...
      3c:	31 01 00 00 31 01 00 00 31 01 00 00 4d 1b 00 00     1...1...1...M...
      4c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      5c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      6c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      7c:	f5 17 00 00 31 01 00 00 31 01 00 00 31 01 00 00     ....1...1...1...
      8c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      9c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      ac:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000078 	.word	0x20000078
      dc:	00000000 	.word	0x00000000
      e0:	00004668 	.word	0x00004668

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	2000007c 	.word	0x2000007c
     110:	00004668 	.word	0x00004668
     114:	00004668 	.word	0x00004668
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b02      	ldr	r3, [pc, #8]	; (128 <atmel_start_init+0xc>)
     120:	4798      	blx	r3
	stdio_redirect_init();
     122:	4b02      	ldr	r3, [pc, #8]	; (12c <atmel_start_init+0x10>)
     124:	4798      	blx	r3
}
     126:	bd10      	pop	{r4, pc}
     128:	00000d7d 	.word	0x00000d7d
     12c:	00002949 	.word	0x00002949

00000130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     130:	e7fe      	b.n	130 <Dummy_Handler>
	...

00000134 <Reset_Handler>:
{
     134:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     136:	4a10      	ldr	r2, [pc, #64]	; (178 <Reset_Handler+0x44>)
     138:	4b10      	ldr	r3, [pc, #64]	; (17c <Reset_Handler+0x48>)
     13a:	429a      	cmp	r2, r3
     13c:	d009      	beq.n	152 <Reset_Handler+0x1e>
     13e:	4b0f      	ldr	r3, [pc, #60]	; (17c <Reset_Handler+0x48>)
     140:	4a0d      	ldr	r2, [pc, #52]	; (178 <Reset_Handler+0x44>)
     142:	e003      	b.n	14c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     144:	6811      	ldr	r1, [r2, #0]
     146:	6019      	str	r1, [r3, #0]
     148:	3304      	adds	r3, #4
     14a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14c:	490c      	ldr	r1, [pc, #48]	; (180 <Reset_Handler+0x4c>)
     14e:	428b      	cmp	r3, r1
     150:	d3f8      	bcc.n	144 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     152:	4b0c      	ldr	r3, [pc, #48]	; (184 <Reset_Handler+0x50>)
     154:	e002      	b.n	15c <Reset_Handler+0x28>
                *pDest++ = 0;
     156:	2200      	movs	r2, #0
     158:	601a      	str	r2, [r3, #0]
     15a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     15c:	4a0a      	ldr	r2, [pc, #40]	; (188 <Reset_Handler+0x54>)
     15e:	4293      	cmp	r3, r2
     160:	d3f9      	bcc.n	156 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     162:	4a0a      	ldr	r2, [pc, #40]	; (18c <Reset_Handler+0x58>)
     164:	21ff      	movs	r1, #255	; 0xff
     166:	4b0a      	ldr	r3, [pc, #40]	; (190 <Reset_Handler+0x5c>)
     168:	438b      	bics	r3, r1
     16a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     16c:	4b09      	ldr	r3, [pc, #36]	; (194 <Reset_Handler+0x60>)
     16e:	4798      	blx	r3
        main();
     170:	4b09      	ldr	r3, [pc, #36]	; (198 <Reset_Handler+0x64>)
     172:	4798      	blx	r3
     174:	e7fe      	b.n	174 <Reset_Handler+0x40>
     176:	46c0      	nop			; (mov r8, r8)
     178:	00004668 	.word	0x00004668
     17c:	20000000 	.word	0x20000000
     180:	20000078 	.word	0x20000078
     184:	20000078 	.word	0x20000078
     188:	200002e4 	.word	0x200002e4
     18c:	e000ed00 	.word	0xe000ed00
     190:	00000000 	.word	0x00000000
     194:	00003c01 	.word	0x00003c01
     198:	000027b1 	.word	0x000027b1

0000019c <FT8_cmdWrite>:

volatile uint16_t cmdOffset = 0x0000;	/* used to navigate command ring buffer */


void FT8_cmdWrite(uint8_t data)
{
     19c:	b510      	push	{r4, lr}
     19e:	0004      	movs	r4, r0
	FT8_cs_set();
     1a0:	4b05      	ldr	r3, [pc, #20]	; (1b8 <FT8_cmdWrite+0x1c>)
     1a2:	4798      	blx	r3
	spi_transmit(data);
     1a4:	0020      	movs	r0, r4
     1a6:	4c05      	ldr	r4, [pc, #20]	; (1bc <FT8_cmdWrite+0x20>)
     1a8:	47a0      	blx	r4
	spi_transmit(0x00);
     1aa:	2000      	movs	r0, #0
     1ac:	47a0      	blx	r4
	spi_transmit(0x00);
     1ae:	2000      	movs	r0, #0
     1b0:	47a0      	blx	r4
	FT8_cs_clear();
     1b2:	4b03      	ldr	r3, [pc, #12]	; (1c0 <FT8_cmdWrite+0x24>)
     1b4:	4798      	blx	r3
}
     1b6:	bd10      	pop	{r4, pc}
     1b8:	00000abd 	.word	0x00000abd
     1bc:	00000ad9 	.word	0x00000ad9
     1c0:	00000ac9 	.word	0x00000ac9

000001c4 <FT8_memRead8>:


uint8_t FT8_memRead8(uint32_t ftAddress)
{
     1c4:	b570      	push	{r4, r5, r6, lr}
     1c6:	0004      	movs	r4, r0
	uint8_t ftData8 = 0;
	FT8_cs_set();
     1c8:	4b0a      	ldr	r3, [pc, #40]	; (1f4 <FT8_memRead8+0x30>)
     1ca:	4798      	blx	r3
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_READ);	/* send Memory Write plus high address byte */
     1cc:	0c20      	lsrs	r0, r4, #16
     1ce:	b2c0      	uxtb	r0, r0
     1d0:	4d09      	ldr	r5, [pc, #36]	; (1f8 <FT8_memRead8+0x34>)
     1d2:	47a8      	blx	r5
	spi_transmit((uint8_t)(ftAddress >> 8));	/* send middle address byte */
     1d4:	0a20      	lsrs	r0, r4, #8
     1d6:	b2c0      	uxtb	r0, r0
     1d8:	47a8      	blx	r5
	spi_transmit((uint8_t)(ftAddress));	/* send low address byte */
     1da:	b2e0      	uxtb	r0, r4
     1dc:	47a8      	blx	r5
	spi_transmit(0x00);	/* send dummy byte */
     1de:	2000      	movs	r0, #0
     1e0:	47a8      	blx	r5
	ftData8 = spi_receive(ftData8);	/* read data byte */
     1e2:	2000      	movs	r0, #0
     1e4:	4b05      	ldr	r3, [pc, #20]	; (1fc <FT8_memRead8+0x38>)
     1e6:	4798      	blx	r3
     1e8:	0004      	movs	r4, r0
	FT8_cs_clear();
     1ea:	4b05      	ldr	r3, [pc, #20]	; (200 <FT8_memRead8+0x3c>)
     1ec:	4798      	blx	r3
	return ftData8;	/* return byte read */
}
     1ee:	0020      	movs	r0, r4
     1f0:	bd70      	pop	{r4, r5, r6, pc}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	00000abd 	.word	0x00000abd
     1f8:	00000ad9 	.word	0x00000ad9
     1fc:	00000af9 	.word	0x00000af9
     200:	00000ac9 	.word	0x00000ac9

00000204 <FT8_memRead16>:


uint16_t FT8_memRead16(uint32_t ftAddress)
{
     204:	b570      	push	{r4, r5, r6, lr}
     206:	0004      	movs	r4, r0
	uint16_t ftData16 = 0;
	FT8_cs_set();
     208:	4b0c      	ldr	r3, [pc, #48]	; (23c <FT8_memRead16+0x38>)
     20a:	4798      	blx	r3
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_READ);	/* send Memory Write plus high address byte */
     20c:	0c20      	lsrs	r0, r4, #16
     20e:	b2c0      	uxtb	r0, r0
     210:	4d0b      	ldr	r5, [pc, #44]	; (240 <FT8_memRead16+0x3c>)
     212:	47a8      	blx	r5
	spi_transmit((uint8_t)(ftAddress >> 8));	/* send middle address byte */
     214:	0a20      	lsrs	r0, r4, #8
     216:	b2c0      	uxtb	r0, r0
     218:	47a8      	blx	r5
	spi_transmit((uint8_t)(ftAddress));	/* send low address byte */
     21a:	b2e0      	uxtb	r0, r4
     21c:	47a8      	blx	r5
	spi_transmit(0x00);	/* send dummy byte */
     21e:	2000      	movs	r0, #0
     220:	47a8      	blx	r5
	ftData16 = (spi_receive(0x00));	/* read low byte */
     222:	2000      	movs	r0, #0
     224:	4d07      	ldr	r5, [pc, #28]	; (244 <FT8_memRead16+0x40>)
     226:	47a8      	blx	r5
     228:	0004      	movs	r4, r0
	ftData16 = (spi_receive(0x00) << 8) | ftData16;	/* read high byte */
     22a:	2000      	movs	r0, #0
     22c:	47a8      	blx	r5
     22e:	0200      	lsls	r0, r0, #8
     230:	4304      	orrs	r4, r0
     232:	b2a4      	uxth	r4, r4
	FT8_cs_clear();
     234:	4b04      	ldr	r3, [pc, #16]	; (248 <FT8_memRead16+0x44>)
     236:	4798      	blx	r3
	return ftData16;	/* return integer read */
}
     238:	0020      	movs	r0, r4
     23a:	bd70      	pop	{r4, r5, r6, pc}
     23c:	00000abd 	.word	0x00000abd
     240:	00000ad9 	.word	0x00000ad9
     244:	00000af9 	.word	0x00000af9
     248:	00000ac9 	.word	0x00000ac9

0000024c <FT8_memWrite8>:
	return ftData32;	/* return long read */
}


void FT8_memWrite8(uint32_t ftAddress, uint8_t ftData8)
{
     24c:	b570      	push	{r4, r5, r6, lr}
     24e:	0004      	movs	r4, r0
     250:	000d      	movs	r5, r1
	FT8_cs_set();
     252:	4b0a      	ldr	r3, [pc, #40]	; (27c <FT8_memWrite8+0x30>)
     254:	4798      	blx	r3
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE);
     256:	0c23      	lsrs	r3, r4, #16
     258:	b2db      	uxtb	r3, r3
     25a:	2080      	movs	r0, #128	; 0x80
     25c:	4240      	negs	r0, r0
     25e:	4318      	orrs	r0, r3
     260:	b2c0      	uxtb	r0, r0
     262:	4e07      	ldr	r6, [pc, #28]	; (280 <FT8_memWrite8+0x34>)
     264:	47b0      	blx	r6
	spi_transmit((uint8_t)(ftAddress >> 8));
     266:	0a20      	lsrs	r0, r4, #8
     268:	b2c0      	uxtb	r0, r0
     26a:	47b0      	blx	r6
	spi_transmit((uint8_t)(ftAddress));
     26c:	b2e0      	uxtb	r0, r4
     26e:	47b0      	blx	r6
	spi_transmit(ftData8);
     270:	0028      	movs	r0, r5
     272:	47b0      	blx	r6
	FT8_cs_clear();
     274:	4b03      	ldr	r3, [pc, #12]	; (284 <FT8_memWrite8+0x38>)
     276:	4798      	blx	r3
}
     278:	bd70      	pop	{r4, r5, r6, pc}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	00000abd 	.word	0x00000abd
     280:	00000ad9 	.word	0x00000ad9
     284:	00000ac9 	.word	0x00000ac9

00000288 <FT8_memWrite16>:


void FT8_memWrite16(uint32_t ftAddress, uint16_t ftData16)
{
     288:	b570      	push	{r4, r5, r6, lr}
     28a:	0005      	movs	r5, r0
     28c:	000e      	movs	r6, r1
	FT8_cs_set();
     28e:	4b0b      	ldr	r3, [pc, #44]	; (2bc <FT8_memWrite16+0x34>)
     290:	4798      	blx	r3
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
     292:	0c2b      	lsrs	r3, r5, #16
     294:	b2db      	uxtb	r3, r3
     296:	2080      	movs	r0, #128	; 0x80
     298:	4240      	negs	r0, r0
     29a:	4318      	orrs	r0, r3
     29c:	b2c0      	uxtb	r0, r0
     29e:	4c08      	ldr	r4, [pc, #32]	; (2c0 <FT8_memWrite16+0x38>)
     2a0:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftAddress >> 8));	/* send middle address byte */
     2a2:	0a28      	lsrs	r0, r5, #8
     2a4:	b2c0      	uxtb	r0, r0
     2a6:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftAddress));		/* send low address byte */
     2a8:	b2e8      	uxtb	r0, r5
     2aa:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftData16));		/* send data low byte */
     2ac:	b2f0      	uxtb	r0, r6
     2ae:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftData16 >> 8));	/* send data high byte */
     2b0:	0a30      	lsrs	r0, r6, #8
     2b2:	47a0      	blx	r4
	FT8_cs_clear();
     2b4:	4b03      	ldr	r3, [pc, #12]	; (2c4 <FT8_memWrite16+0x3c>)
     2b6:	4798      	blx	r3
}
     2b8:	bd70      	pop	{r4, r5, r6, pc}
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	00000abd 	.word	0x00000abd
     2c0:	00000ad9 	.word	0x00000ad9
     2c4:	00000ac9 	.word	0x00000ac9

000002c8 <FT8_memWrite32>:


void FT8_memWrite32(uint32_t ftAddress, uint32_t ftData32)
{
     2c8:	b570      	push	{r4, r5, r6, lr}
     2ca:	0006      	movs	r6, r0
     2cc:	000d      	movs	r5, r1
	FT8_cs_set();
     2ce:	4b0e      	ldr	r3, [pc, #56]	; (308 <FT8_memWrite32+0x40>)
     2d0:	4798      	blx	r3
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
     2d2:	0c33      	lsrs	r3, r6, #16
     2d4:	b2db      	uxtb	r3, r3
     2d6:	2080      	movs	r0, #128	; 0x80
     2d8:	4240      	negs	r0, r0
     2da:	4318      	orrs	r0, r3
     2dc:	b2c0      	uxtb	r0, r0
     2de:	4c0b      	ldr	r4, [pc, #44]	; (30c <FT8_memWrite32+0x44>)
     2e0:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftAddress >> 8));	/* send middle address byte */
     2e2:	0a30      	lsrs	r0, r6, #8
     2e4:	b2c0      	uxtb	r0, r0
     2e6:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftAddress));		/* send low address byte */
     2e8:	b2f0      	uxtb	r0, r6
     2ea:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftData32));		/* send data low byte */
     2ec:	b2e8      	uxtb	r0, r5
     2ee:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftData32 >> 8));
     2f0:	0a28      	lsrs	r0, r5, #8
     2f2:	b2c0      	uxtb	r0, r0
     2f4:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftData32 >> 16));
     2f6:	0c28      	lsrs	r0, r5, #16
     2f8:	b2c0      	uxtb	r0, r0
     2fa:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftData32 >> 24));	/* send data high byte */
     2fc:	0e28      	lsrs	r0, r5, #24
     2fe:	47a0      	blx	r4
	FT8_cs_clear();
     300:	4b03      	ldr	r3, [pc, #12]	; (310 <FT8_memWrite32+0x48>)
     302:	4798      	blx	r3
}
     304:	bd70      	pop	{r4, r5, r6, pc}
     306:	46c0      	nop			; (mov r8, r8)
     308:	00000abd 	.word	0x00000abd
     30c:	00000ad9 	.word	0x00000ad9
     310:	00000ac9 	.word	0x00000ac9

00000314 <FT8_busy>:


/* Check if the graphics processor completed executing the current command list. */
/* This is the case when REG_CMD_READ matches cmdOffset, indicating that all commands have been executed. */
uint8_t FT8_busy(void)
{
     314:	b510      	push	{r4, lr}
	uint16_t cmdBufferRead;

	cmdBufferRead = FT8_memRead16(REG_CMD_READ);	/* read the graphics processor read pointer */
     316:	4806      	ldr	r0, [pc, #24]	; (330 <FT8_busy+0x1c>)
     318:	4b06      	ldr	r3, [pc, #24]	; (334 <FT8_busy+0x20>)
     31a:	4798      	blx	r3

	if(cmdOffset != cmdBufferRead)
     31c:	4b06      	ldr	r3, [pc, #24]	; (338 <FT8_busy+0x24>)
     31e:	881b      	ldrh	r3, [r3, #0]
     320:	b29b      	uxth	r3, r3
     322:	4298      	cmp	r0, r3
     324:	d001      	beq.n	32a <FT8_busy+0x16>
	{
		return 1;
     326:	2001      	movs	r0, #1
	}
	else
	{
		return 0;
	}
}
     328:	bd10      	pop	{r4, pc}
		return 0;
     32a:	2000      	movs	r0, #0
     32c:	e7fc      	b.n	328 <FT8_busy+0x14>
     32e:	46c0      	nop			; (mov r8, r8)
     330:	003020f8 	.word	0x003020f8
     334:	00000205 	.word	0x00000205
     338:	20000094 	.word	0x20000094

0000033c <FT8_cmd_execute>:
}


/* order the command co-prozessor to start processing its FIFO que */
void FT8_cmd_execute(void)
{
     33c:	b570      	push	{r4, r5, r6, lr}
	uint32_t ftAddress;

	ftAddress = REG_CMD_WRITE;

	FT8_cs_set();
     33e:	4b0b      	ldr	r3, [pc, #44]	; (36c <FT8_cmd_execute+0x30>)
     340:	4798      	blx	r3
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
     342:	20b0      	movs	r0, #176	; 0xb0
     344:	4c0a      	ldr	r4, [pc, #40]	; (370 <FT8_cmd_execute+0x34>)
     346:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftAddress >> 8));	/* send middle address byte */
     348:	2020      	movs	r0, #32
     34a:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftAddress));			/* send low address byte */
     34c:	20fc      	movs	r0, #252	; 0xfc
     34e:	47a0      	blx	r4
	spi_transmit((uint8_t)(cmdOffset));			/* send data low byte */
     350:	4d08      	ldr	r5, [pc, #32]	; (374 <FT8_cmd_execute+0x38>)
     352:	8828      	ldrh	r0, [r5, #0]
     354:	b2c0      	uxtb	r0, r0
     356:	47a0      	blx	r4
	spi_transmit((uint8_t)(cmdOffset >> 8));	/* send data high byte */
     358:	8828      	ldrh	r0, [r5, #0]
     35a:	0a00      	lsrs	r0, r0, #8
     35c:	47a0      	blx	r4
	FT8_cs_clear();
     35e:	4b06      	ldr	r3, [pc, #24]	; (378 <FT8_cmd_execute+0x3c>)
     360:	4798      	blx	r3
	while (FT8_busy());
     362:	4b06      	ldr	r3, [pc, #24]	; (37c <FT8_cmd_execute+0x40>)
     364:	4798      	blx	r3
     366:	2800      	cmp	r0, #0
     368:	d1fb      	bne.n	362 <FT8_cmd_execute+0x26>
}
     36a:	bd70      	pop	{r4, r5, r6, pc}
     36c:	00000abd 	.word	0x00000abd
     370:	00000ad9 	.word	0x00000ad9
     374:	20000094 	.word	0x20000094
     378:	00000ac9 	.word	0x00000ac9
     37c:	00000315 	.word	0x00000315

00000380 <FT8_get_cmdoffset>:


void FT8_get_cmdoffset(void)
{
     380:	b510      	push	{r4, lr}
	cmdOffset = FT8_memRead16(REG_CMD_WRITE);
     382:	4803      	ldr	r0, [pc, #12]	; (390 <FT8_get_cmdoffset+0x10>)
     384:	4b03      	ldr	r3, [pc, #12]	; (394 <FT8_get_cmdoffset+0x14>)
     386:	4798      	blx	r3
     388:	4b03      	ldr	r3, [pc, #12]	; (398 <FT8_get_cmdoffset+0x18>)
     38a:	8018      	strh	r0, [r3, #0]
}
     38c:	bd10      	pop	{r4, pc}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	003020fc 	.word	0x003020fc
     394:	00000205 	.word	0x00000205
     398:	20000094 	.word	0x20000094

0000039c <FT8_inc_cmdoffset>:


void FT8_inc_cmdoffset(uint16_t increment)
{
	cmdOffset += increment;
     39c:	4a04      	ldr	r2, [pc, #16]	; (3b0 <FT8_inc_cmdoffset+0x14>)
     39e:	8813      	ldrh	r3, [r2, #0]
     3a0:	1818      	adds	r0, r3, r0
     3a2:	b280      	uxth	r0, r0
     3a4:	8010      	strh	r0, [r2, #0]
	cmdOffset &= 0x0fff;
     3a6:	8813      	ldrh	r3, [r2, #0]
     3a8:	051b      	lsls	r3, r3, #20
     3aa:	0d1b      	lsrs	r3, r3, #20
     3ac:	8013      	strh	r3, [r2, #0]
}
     3ae:	4770      	bx	lr
     3b0:	20000094 	.word	0x20000094

000003b4 <FT8_start_cmd>:


/* Beginn a co-prozessor command */
void FT8_start_cmd(uint32_t command)
{
     3b4:	b570      	push	{r4, r5, r6, lr}
     3b6:	0006      	movs	r6, r0
	uint32_t ftAddress;

	ftAddress = FT8_RAM_CMD + cmdOffset;
     3b8:	4b11      	ldr	r3, [pc, #68]	; (400 <FT8_start_cmd+0x4c>)
     3ba:	881d      	ldrh	r5, [r3, #0]
     3bc:	23c2      	movs	r3, #194	; 0xc2
     3be:	039b      	lsls	r3, r3, #14
     3c0:	469c      	mov	ip, r3
     3c2:	4465      	add	r5, ip
	FT8_cs_set();
     3c4:	4b0f      	ldr	r3, [pc, #60]	; (404 <FT8_start_cmd+0x50>)
     3c6:	4798      	blx	r3
	spi_transmit((uint8_t)(ftAddress >> 16) | MEM_WRITE); /* send Memory Write plus high address byte */
     3c8:	0c2b      	lsrs	r3, r5, #16
     3ca:	b2db      	uxtb	r3, r3
     3cc:	2080      	movs	r0, #128	; 0x80
     3ce:	4240      	negs	r0, r0
     3d0:	4318      	orrs	r0, r3
     3d2:	b2c0      	uxtb	r0, r0
     3d4:	4c0c      	ldr	r4, [pc, #48]	; (408 <FT8_start_cmd+0x54>)
     3d6:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftAddress >> 8));	/* send middle address byte */
     3d8:	0a28      	lsrs	r0, r5, #8
     3da:	b2c0      	uxtb	r0, r0
     3dc:	47a0      	blx	r4
	spi_transmit((uint8_t)(ftAddress));		/* send low address byte */
     3de:	b2e8      	uxtb	r0, r5
     3e0:	47a0      	blx	r4
	spi_transmit((uint8_t)(command));		/* send data low byte */
     3e2:	b2f0      	uxtb	r0, r6
     3e4:	47a0      	blx	r4
	spi_transmit((uint8_t)(command >> 8));
     3e6:	0a30      	lsrs	r0, r6, #8
     3e8:	b2c0      	uxtb	r0, r0
     3ea:	47a0      	blx	r4
	spi_transmit((uint8_t)(command >> 16));
     3ec:	0c30      	lsrs	r0, r6, #16
     3ee:	b2c0      	uxtb	r0, r0
     3f0:	47a0      	blx	r4
	spi_transmit((uint8_t)(command >> 24));		/* Send data high byte */
     3f2:	0e30      	lsrs	r0, r6, #24
     3f4:	47a0      	blx	r4
	FT8_inc_cmdoffset(4);			/* update the command-ram pointer */
     3f6:	2004      	movs	r0, #4
     3f8:	4b04      	ldr	r3, [pc, #16]	; (40c <FT8_start_cmd+0x58>)
     3fa:	4798      	blx	r3
}
     3fc:	bd70      	pop	{r4, r5, r6, pc}
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	20000094 	.word	0x20000094
     404:	00000abd 	.word	0x00000abd
     408:	00000ad9 	.word	0x00000ad9
     40c:	0000039d 	.word	0x0000039d

00000410 <FT8_cmd_dl>:
 FT8_cmd_dl(LINE_WIDTH(1*16));
 FT8_cmd_dl(VERTEX2F(0,0));
 FT8_cmd_dl(DL_BEGIN | FT8_RECTS);
*/
void FT8_cmd_dl(uint32_t command)
{
     410:	b510      	push	{r4, lr}
	FT8_start_cmd(command);
     412:	4b02      	ldr	r3, [pc, #8]	; (41c <FT8_cmd_dl+0xc>)
     414:	4798      	blx	r3
	FT8_cs_clear();
     416:	4b02      	ldr	r3, [pc, #8]	; (420 <FT8_cmd_dl+0x10>)
     418:	4798      	blx	r3
}
     41a:	bd10      	pop	{r4, pc}
     41c:	000003b5 	.word	0x000003b5
     420:	00000ac9 	.word	0x00000ac9

00000424 <FT8_write_string>:


/* Write a string to co-processor memory in context of a command: no chip-select, just plain spi-transfers */
void FT8_write_string(const char *text)
{
     424:	b570      	push	{r4, r5, r6, lr}
     426:	0005      	movs	r5, r0
	uint8_t textindex = 0;
     428:	2400      	movs	r4, #0
	uint8_t padding = 0;

	while(text[textindex] != 0)
     42a:	e003      	b.n	434 <FT8_write_string+0x10>
	{
		spi_transmit(text[textindex]);
     42c:	4b0c      	ldr	r3, [pc, #48]	; (460 <FT8_write_string+0x3c>)
     42e:	4798      	blx	r3
		textindex++;
     430:	3401      	adds	r4, #1
     432:	b2e4      	uxtb	r4, r4
	while(text[textindex] != 0)
     434:	5d28      	ldrb	r0, [r5, r4]
     436:	2800      	cmp	r0, #0
     438:	d1f8      	bne.n	42c <FT8_write_string+0x8>
	}

	padding = textindex % 4;  /* 0, 1, 2 oder 3 */
     43a:	2303      	movs	r3, #3
     43c:	4023      	ands	r3, r4
	padding = 4-padding; /* 4, 3, 2, 1 */
     43e:	2504      	movs	r5, #4
     440:	1aed      	subs	r5, r5, r3
     442:	b2ed      	uxtb	r5, r5

	while(padding > 0)
     444:	e006      	b.n	454 <FT8_write_string+0x30>
	{
		spi_transmit(0);
     446:	2000      	movs	r0, #0
     448:	4b05      	ldr	r3, [pc, #20]	; (460 <FT8_write_string+0x3c>)
     44a:	4798      	blx	r3
		padding--;
     44c:	3d01      	subs	r5, #1
     44e:	b2ed      	uxtb	r5, r5
		textindex++;
     450:	3401      	adds	r4, #1
     452:	b2e4      	uxtb	r4, r4
	while(padding > 0)
     454:	2d00      	cmp	r5, #0
     456:	d1f6      	bne.n	446 <FT8_write_string+0x22>
	}

	FT8_inc_cmdoffset(textindex);
     458:	b2a0      	uxth	r0, r4
     45a:	4b02      	ldr	r3, [pc, #8]	; (464 <FT8_write_string+0x40>)
     45c:	4798      	blx	r3
}
     45e:	bd70      	pop	{r4, r5, r6, pc}
     460:	00000ad9 	.word	0x00000ad9
     464:	0000039d 	.word	0x0000039d

00000468 <FT8_cmd_text>:

/* commands to draw graphics objects: */

void FT8_cmd_text(int16_t x0, int16_t y0, int16_t font, uint16_t options, const char* text)
{
     468:	b5f0      	push	{r4, r5, r6, r7, lr}
     46a:	b083      	sub	sp, #12
     46c:	0006      	movs	r6, r0
     46e:	000d      	movs	r5, r1
     470:	0014      	movs	r4, r2
     472:	9301      	str	r3, [sp, #4]
	FT8_start_cmd(CMD_TEXT);
     474:	20f4      	movs	r0, #244	; 0xf4
     476:	4240      	negs	r0, r0
     478:	4b10      	ldr	r3, [pc, #64]	; (4bc <FT8_cmd_text+0x54>)
     47a:	4798      	blx	r3

	spi_transmit((uint8_t)(x0));
     47c:	b2f0      	uxtb	r0, r6
     47e:	4f10      	ldr	r7, [pc, #64]	; (4c0 <FT8_cmd_text+0x58>)
     480:	47b8      	blx	r7
	spi_transmit((uint8_t)(x0 >> 8));
     482:	1236      	asrs	r6, r6, #8
     484:	b2f0      	uxtb	r0, r6
     486:	47b8      	blx	r7

	spi_transmit((uint8_t)(y0));
     488:	b2e8      	uxtb	r0, r5
     48a:	47b8      	blx	r7
	spi_transmit((uint8_t)(y0 >> 8));
     48c:	122d      	asrs	r5, r5, #8
     48e:	b2e8      	uxtb	r0, r5
     490:	47b8      	blx	r7

	spi_transmit((uint8_t)(font));
     492:	b2e0      	uxtb	r0, r4
     494:	47b8      	blx	r7
	spi_transmit((uint8_t)(font >> 8));
     496:	1224      	asrs	r4, r4, #8
     498:	b2e0      	uxtb	r0, r4
     49a:	47b8      	blx	r7

	spi_transmit((uint8_t)(options));
     49c:	9c01      	ldr	r4, [sp, #4]
     49e:	b2e0      	uxtb	r0, r4
     4a0:	47b8      	blx	r7
	spi_transmit((uint8_t)(options >> 8));
     4a2:	0a20      	lsrs	r0, r4, #8
     4a4:	47b8      	blx	r7

	FT8_inc_cmdoffset(8);
     4a6:	2008      	movs	r0, #8
     4a8:	4b06      	ldr	r3, [pc, #24]	; (4c4 <FT8_cmd_text+0x5c>)
     4aa:	4798      	blx	r3
	FT8_write_string(text);
     4ac:	9808      	ldr	r0, [sp, #32]
     4ae:	4b06      	ldr	r3, [pc, #24]	; (4c8 <FT8_cmd_text+0x60>)
     4b0:	4798      	blx	r3

	FT8_cs_clear();
     4b2:	4b06      	ldr	r3, [pc, #24]	; (4cc <FT8_cmd_text+0x64>)
     4b4:	4798      	blx	r3
}
     4b6:	b003      	add	sp, #12
     4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4ba:	46c0      	nop			; (mov r8, r8)
     4bc:	000003b5 	.word	0x000003b5
     4c0:	00000ad9 	.word	0x00000ad9
     4c4:	0000039d 	.word	0x0000039d
     4c8:	00000425 	.word	0x00000425
     4cc:	00000ac9 	.word	0x00000ac9

000004d0 <FT8_cmd_bgcolor>:
	FT8_inc_cmdoffset(16);
}


void FT8_cmd_bgcolor(uint32_t color)
{
     4d0:	b570      	push	{r4, r5, r6, lr}
     4d2:	0004      	movs	r4, r0
	FT8_start_cmd(CMD_BGCOLOR);
     4d4:	20f7      	movs	r0, #247	; 0xf7
     4d6:	4240      	negs	r0, r0
     4d8:	4b09      	ldr	r3, [pc, #36]	; (500 <FT8_cmd_bgcolor+0x30>)
     4da:	4798      	blx	r3

	spi_transmit((uint8_t)(color));
     4dc:	b2e0      	uxtb	r0, r4
     4de:	4d09      	ldr	r5, [pc, #36]	; (504 <FT8_cmd_bgcolor+0x34>)
     4e0:	47a8      	blx	r5
	spi_transmit((uint8_t)(color >> 8));
     4e2:	0a20      	lsrs	r0, r4, #8
     4e4:	b2c0      	uxtb	r0, r0
     4e6:	47a8      	blx	r5
	spi_transmit((uint8_t)(color >> 16));
     4e8:	0c24      	lsrs	r4, r4, #16
     4ea:	b2e0      	uxtb	r0, r4
     4ec:	47a8      	blx	r5
	spi_transmit(0x00);
     4ee:	2000      	movs	r0, #0
     4f0:	47a8      	blx	r5

	FT8_cs_clear();
     4f2:	4b05      	ldr	r3, [pc, #20]	; (508 <FT8_cmd_bgcolor+0x38>)
     4f4:	4798      	blx	r3
	FT8_inc_cmdoffset(4);
     4f6:	2004      	movs	r0, #4
     4f8:	4b04      	ldr	r3, [pc, #16]	; (50c <FT8_cmd_bgcolor+0x3c>)
     4fa:	4798      	blx	r3
}
     4fc:	bd70      	pop	{r4, r5, r6, pc}
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	000003b5 	.word	0x000003b5
     504:	00000ad9 	.word	0x00000ad9
     508:	00000ac9 	.word	0x00000ac9
     50c:	0000039d 	.word	0x0000039d

00000510 <FT8_cmd_gauge>:
	FT8_inc_cmdoffset(4);
}


void FT8_cmd_gauge(int16_t x0, int16_t y0, int16_t r0, uint16_t options, uint16_t major, uint16_t minor, uint16_t val, uint16_t range)
{
     510:	b5f0      	push	{r4, r5, r6, r7, lr}
     512:	46de      	mov	lr, fp
     514:	4657      	mov	r7, sl
     516:	464e      	mov	r6, r9
     518:	4645      	mov	r5, r8
     51a:	b5e0      	push	{r5, r6, r7, lr}
     51c:	b083      	sub	sp, #12
     51e:	0006      	movs	r6, r0
     520:	000d      	movs	r5, r1
     522:	0014      	movs	r4, r2
     524:	9301      	str	r3, [sp, #4]
     526:	ab0c      	add	r3, sp, #48	; 0x30
     528:	881a      	ldrh	r2, [r3, #0]
     52a:	4693      	mov	fp, r2
     52c:	ab0d      	add	r3, sp, #52	; 0x34
     52e:	881a      	ldrh	r2, [r3, #0]
     530:	4692      	mov	sl, r2
     532:	ab0e      	add	r3, sp, #56	; 0x38
     534:	881a      	ldrh	r2, [r3, #0]
     536:	4691      	mov	r9, r2
     538:	ab0f      	add	r3, sp, #60	; 0x3c
     53a:	881a      	ldrh	r2, [r3, #0]
     53c:	4690      	mov	r8, r2
	FT8_start_cmd(CMD_GAUGE);
     53e:	20ed      	movs	r0, #237	; 0xed
     540:	4240      	negs	r0, r0
     542:	4b21      	ldr	r3, [pc, #132]	; (5c8 <FT8_cmd_gauge+0xb8>)
     544:	4798      	blx	r3

	spi_transmit((uint8_t)(x0));
     546:	b2f0      	uxtb	r0, r6
     548:	4f20      	ldr	r7, [pc, #128]	; (5cc <FT8_cmd_gauge+0xbc>)
     54a:	47b8      	blx	r7
	spi_transmit((uint8_t)(x0 >> 8));
     54c:	1236      	asrs	r6, r6, #8
     54e:	b2f0      	uxtb	r0, r6
     550:	47b8      	blx	r7

	spi_transmit((uint8_t)(y0));
     552:	b2e8      	uxtb	r0, r5
     554:	47b8      	blx	r7
	spi_transmit((uint8_t)(y0 >> 8));
     556:	122d      	asrs	r5, r5, #8
     558:	b2e8      	uxtb	r0, r5
     55a:	47b8      	blx	r7

	spi_transmit((uint8_t)(r0));
     55c:	b2e0      	uxtb	r0, r4
     55e:	47b8      	blx	r7
	spi_transmit((uint8_t)(r0 >> 8));
     560:	1224      	asrs	r4, r4, #8
     562:	b2e0      	uxtb	r0, r4
     564:	47b8      	blx	r7

	spi_transmit((uint8_t)(options));
     566:	9c01      	ldr	r4, [sp, #4]
     568:	b2e0      	uxtb	r0, r4
     56a:	47b8      	blx	r7
	spi_transmit((uint8_t)(options >> 8));
     56c:	0a20      	lsrs	r0, r4, #8
     56e:	47b8      	blx	r7

	spi_transmit((uint8_t)(major));
     570:	465b      	mov	r3, fp
     572:	466a      	mov	r2, sp
     574:	7113      	strb	r3, [r2, #4]
     576:	7910      	ldrb	r0, [r2, #4]
     578:	47b8      	blx	r7
	spi_transmit((uint8_t)(major >> 8));
     57a:	465b      	mov	r3, fp
     57c:	0a18      	lsrs	r0, r3, #8
     57e:	47b8      	blx	r7

	spi_transmit((uint8_t)(minor));
     580:	4653      	mov	r3, sl
     582:	466a      	mov	r2, sp
     584:	7113      	strb	r3, [r2, #4]
     586:	7910      	ldrb	r0, [r2, #4]
     588:	47b8      	blx	r7
	spi_transmit((uint8_t)(minor >> 8));
     58a:	4653      	mov	r3, sl
     58c:	0a18      	lsrs	r0, r3, #8
     58e:	47b8      	blx	r7

	spi_transmit((uint8_t)(val));
     590:	464b      	mov	r3, r9
     592:	466a      	mov	r2, sp
     594:	7113      	strb	r3, [r2, #4]
     596:	7910      	ldrb	r0, [r2, #4]
     598:	47b8      	blx	r7
	spi_transmit((uint8_t)(val >> 8));
     59a:	464b      	mov	r3, r9
     59c:	0a18      	lsrs	r0, r3, #8
     59e:	47b8      	blx	r7

	spi_transmit((uint8_t)(range));
     5a0:	4643      	mov	r3, r8
     5a2:	466a      	mov	r2, sp
     5a4:	7113      	strb	r3, [r2, #4]
     5a6:	7910      	ldrb	r0, [r2, #4]
     5a8:	47b8      	blx	r7
	spi_transmit((uint8_t)(range >> 8));
     5aa:	4643      	mov	r3, r8
     5ac:	0a18      	lsrs	r0, r3, #8
     5ae:	47b8      	blx	r7

	FT8_cs_clear();
     5b0:	4b07      	ldr	r3, [pc, #28]	; (5d0 <FT8_cmd_gauge+0xc0>)
     5b2:	4798      	blx	r3
	FT8_inc_cmdoffset(16);
     5b4:	2010      	movs	r0, #16
     5b6:	4b07      	ldr	r3, [pc, #28]	; (5d4 <FT8_cmd_gauge+0xc4>)
     5b8:	4798      	blx	r3
}
     5ba:	b003      	add	sp, #12
     5bc:	bc3c      	pop	{r2, r3, r4, r5}
     5be:	4690      	mov	r8, r2
     5c0:	4699      	mov	r9, r3
     5c2:	46a2      	mov	sl, r4
     5c4:	46ab      	mov	fp, r5
     5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5c8:	000003b5 	.word	0x000003b5
     5cc:	00000ad9 	.word	0x00000ad9
     5d0:	00000ac9 	.word	0x00000ac9
     5d4:	0000039d 	.word	0x0000039d

000005d8 <FT8_cmd_progress>:
	FT8_cs_clear();
}


void FT8_cmd_progress(int16_t x0, int16_t y0, int16_t w0, int16_t h0, uint16_t options, uint16_t val, uint16_t range)
{
     5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5da:	46de      	mov	lr, fp
     5dc:	4657      	mov	r7, sl
     5de:	464e      	mov	r6, r9
     5e0:	b5c0      	push	{r6, r7, lr}
     5e2:	b082      	sub	sp, #8
     5e4:	0007      	movs	r7, r0
     5e6:	000e      	movs	r6, r1
     5e8:	0015      	movs	r5, r2
     5ea:	9301      	str	r3, [sp, #4]
     5ec:	ab0a      	add	r3, sp, #40	; 0x28
     5ee:	881a      	ldrh	r2, [r3, #0]
     5f0:	4693      	mov	fp, r2
     5f2:	ab0b      	add	r3, sp, #44	; 0x2c
     5f4:	881a      	ldrh	r2, [r3, #0]
     5f6:	4692      	mov	sl, r2
     5f8:	ab0c      	add	r3, sp, #48	; 0x30
     5fa:	881a      	ldrh	r2, [r3, #0]
     5fc:	4691      	mov	r9, r2
	FT8_start_cmd(CMD_PROGRESS);
     5fe:	20f1      	movs	r0, #241	; 0xf1
     600:	4240      	negs	r0, r0
     602:	4b1f      	ldr	r3, [pc, #124]	; (680 <FT8_cmd_progress+0xa8>)
     604:	4798      	blx	r3

	spi_transmit((uint8_t)(x0));
     606:	b2f8      	uxtb	r0, r7
     608:	4c1e      	ldr	r4, [pc, #120]	; (684 <FT8_cmd_progress+0xac>)
     60a:	47a0      	blx	r4
	spi_transmit((uint8_t)(x0 >> 8));
     60c:	123f      	asrs	r7, r7, #8
     60e:	b2f8      	uxtb	r0, r7
     610:	47a0      	blx	r4

	spi_transmit((uint8_t)(y0));
     612:	b2f0      	uxtb	r0, r6
     614:	47a0      	blx	r4
	spi_transmit((uint8_t)(y0 >> 8));
     616:	1236      	asrs	r6, r6, #8
     618:	b2f0      	uxtb	r0, r6
     61a:	47a0      	blx	r4

	spi_transmit((uint8_t)(w0));
     61c:	b2e8      	uxtb	r0, r5
     61e:	47a0      	blx	r4
	spi_transmit((uint8_t)(w0 >> 8));
     620:	122d      	asrs	r5, r5, #8
     622:	b2e8      	uxtb	r0, r5
     624:	47a0      	blx	r4

	spi_transmit((uint8_t)(h0));
     626:	9d01      	ldr	r5, [sp, #4]
     628:	b2e8      	uxtb	r0, r5
     62a:	47a0      	blx	r4
	spi_transmit((uint8_t)(h0 >> 8));
     62c:	122b      	asrs	r3, r5, #8
     62e:	b2d8      	uxtb	r0, r3
     630:	47a0      	blx	r4

	spi_transmit((uint8_t)(options));
     632:	465b      	mov	r3, fp
     634:	466a      	mov	r2, sp
     636:	7113      	strb	r3, [r2, #4]
     638:	7910      	ldrb	r0, [r2, #4]
     63a:	47a0      	blx	r4
	spi_transmit((uint8_t)(options >> 8));
     63c:	465b      	mov	r3, fp
     63e:	0a18      	lsrs	r0, r3, #8
     640:	47a0      	blx	r4

	spi_transmit((uint8_t)(val));
     642:	4653      	mov	r3, sl
     644:	466a      	mov	r2, sp
     646:	7113      	strb	r3, [r2, #4]
     648:	7910      	ldrb	r0, [r2, #4]
     64a:	47a0      	blx	r4
	spi_transmit((uint8_t)(val >> 8));
     64c:	4653      	mov	r3, sl
     64e:	0a18      	lsrs	r0, r3, #8
     650:	47a0      	blx	r4

	spi_transmit((uint8_t)(range));
     652:	464b      	mov	r3, r9
     654:	466a      	mov	r2, sp
     656:	7113      	strb	r3, [r2, #4]
     658:	7910      	ldrb	r0, [r2, #4]
     65a:	47a0      	blx	r4
	spi_transmit((uint8_t)(range >> 8));
     65c:	464b      	mov	r3, r9
     65e:	0a18      	lsrs	r0, r3, #8
     660:	47a0      	blx	r4

	spi_transmit(0x00);	/* dummy byte for 4-byte alignment */
     662:	2000      	movs	r0, #0
     664:	47a0      	blx	r4
	spi_transmit(0x00); /* dummy byte for 4-byte alignment */
     666:	2000      	movs	r0, #0
     668:	47a0      	blx	r4

	FT8_cs_clear();
     66a:	4b07      	ldr	r3, [pc, #28]	; (688 <FT8_cmd_progress+0xb0>)
     66c:	4798      	blx	r3
	FT8_inc_cmdoffset(16);	/* update the command-ram pointer */
     66e:	2010      	movs	r0, #16
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <FT8_cmd_progress+0xb4>)
     672:	4798      	blx	r3
}
     674:	b002      	add	sp, #8
     676:	bc1c      	pop	{r2, r3, r4}
     678:	4691      	mov	r9, r2
     67a:	469a      	mov	sl, r3
     67c:	46a3      	mov	fp, r4
     67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     680:	000003b5 	.word	0x000003b5
     684:	00000ad9 	.word	0x00000ad9
     688:	00000ac9 	.word	0x00000ac9
     68c:	0000039d 	.word	0x0000039d

00000690 <FT8_cmd_number>:
}
#endif


void FT8_cmd_number(int16_t x0, int16_t y0, int16_t font, uint16_t options, int32_t number)
{
     690:	b5f0      	push	{r4, r5, r6, r7, lr}
     692:	b083      	sub	sp, #12
     694:	0006      	movs	r6, r0
     696:	000d      	movs	r5, r1
     698:	0014      	movs	r4, r2
     69a:	9301      	str	r3, [sp, #4]
	FT8_start_cmd(CMD_NUMBER);
     69c:	20d2      	movs	r0, #210	; 0xd2
     69e:	4240      	negs	r0, r0
     6a0:	4b15      	ldr	r3, [pc, #84]	; (6f8 <FT8_cmd_number+0x68>)
     6a2:	4798      	blx	r3

	spi_transmit((uint8_t)(x0));
     6a4:	b2f0      	uxtb	r0, r6
     6a6:	4f15      	ldr	r7, [pc, #84]	; (6fc <FT8_cmd_number+0x6c>)
     6a8:	47b8      	blx	r7
	spi_transmit((uint8_t)(x0 >> 8));
     6aa:	1236      	asrs	r6, r6, #8
     6ac:	b2f0      	uxtb	r0, r6
     6ae:	47b8      	blx	r7

	spi_transmit((uint8_t)(y0));
     6b0:	b2e8      	uxtb	r0, r5
     6b2:	47b8      	blx	r7
	spi_transmit((uint8_t)(y0 >> 8));
     6b4:	122d      	asrs	r5, r5, #8
     6b6:	b2e8      	uxtb	r0, r5
     6b8:	47b8      	blx	r7

	spi_transmit((uint8_t)(font));
     6ba:	b2e0      	uxtb	r0, r4
     6bc:	47b8      	blx	r7
	spi_transmit((uint8_t)(font >> 8));
     6be:	1224      	asrs	r4, r4, #8
     6c0:	b2e0      	uxtb	r0, r4
     6c2:	47b8      	blx	r7
	

	spi_transmit((uint8_t)(options));
     6c4:	9c01      	ldr	r4, [sp, #4]
     6c6:	b2e0      	uxtb	r0, r4
     6c8:	47b8      	blx	r7
	spi_transmit((uint8_t)(options >> 8));
     6ca:	0a20      	lsrs	r0, r4, #8
     6cc:	47b8      	blx	r7

	spi_transmit((uint8_t)(number));
     6ce:	ab02      	add	r3, sp, #8
     6d0:	7e18      	ldrb	r0, [r3, #24]
     6d2:	47b8      	blx	r7
	spi_transmit((uint8_t)(number >> 8));
     6d4:	9b08      	ldr	r3, [sp, #32]
     6d6:	1218      	asrs	r0, r3, #8
     6d8:	b2c0      	uxtb	r0, r0
     6da:	47b8      	blx	r7
	spi_transmit((uint8_t)(number >> 16));
     6dc:	9b08      	ldr	r3, [sp, #32]
     6de:	1418      	asrs	r0, r3, #16
     6e0:	b2c0      	uxtb	r0, r0
     6e2:	47b8      	blx	r7
	spi_transmit((uint8_t)(number >> 24));
     6e4:	9b08      	ldr	r3, [sp, #32]
     6e6:	0e18      	lsrs	r0, r3, #24
     6e8:	47b8      	blx	r7

	FT8_cs_clear();
     6ea:	4b05      	ldr	r3, [pc, #20]	; (700 <FT8_cmd_number+0x70>)
     6ec:	4798      	blx	r3

	FT8_inc_cmdoffset(12);
     6ee:	200c      	movs	r0, #12
     6f0:	4b04      	ldr	r3, [pc, #16]	; (704 <FT8_cmd_number+0x74>)
     6f2:	4798      	blx	r3
}
     6f4:	b003      	add	sp, #12
     6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6f8:	000003b5 	.word	0x000003b5
     6fc:	00000ad9 	.word	0x00000ad9
     700:	00000ac9 	.word	0x00000ac9
     704:	0000039d 	.word	0x0000039d

00000708 <FT8_cmd_romfont>:
}


#ifdef FT8_81X_ENABLE
void FT8_cmd_romfont(uint32_t font, uint32_t romslot)
{
     708:	b570      	push	{r4, r5, r6, lr}
     70a:	0006      	movs	r6, r0
     70c:	000d      	movs	r5, r1
	FT8_start_cmd(CMD_ROMFONT);
     70e:	20c1      	movs	r0, #193	; 0xc1
     710:	4240      	negs	r0, r0
     712:	4b0d      	ldr	r3, [pc, #52]	; (748 <FT8_cmd_romfont+0x40>)
     714:	4798      	blx	r3
	
	spi_transmit((uint8_t)(font));
     716:	b2f0      	uxtb	r0, r6
     718:	4c0c      	ldr	r4, [pc, #48]	; (74c <FT8_cmd_romfont+0x44>)
     71a:	47a0      	blx	r4
	spi_transmit((uint8_t)(font >> 8));
     71c:	0a36      	lsrs	r6, r6, #8
     71e:	b2f0      	uxtb	r0, r6
     720:	47a0      	blx	r4
	spi_transmit(0x00);
     722:	2000      	movs	r0, #0
     724:	47a0      	blx	r4
	spi_transmit(0x00);
     726:	2000      	movs	r0, #0
     728:	47a0      	blx	r4
	
	spi_transmit((uint8_t)(romslot));
     72a:	b2e8      	uxtb	r0, r5
     72c:	47a0      	blx	r4
	spi_transmit((uint8_t)(romslot >> 8));
     72e:	0a2d      	lsrs	r5, r5, #8
     730:	b2e8      	uxtb	r0, r5
     732:	47a0      	blx	r4
	spi_transmit(0x00);
     734:	2000      	movs	r0, #0
     736:	47a0      	blx	r4
	spi_transmit(0x00);	
     738:	2000      	movs	r0, #0
     73a:	47a0      	blx	r4
	
	FT8_inc_cmdoffset(8);
     73c:	2008      	movs	r0, #8
     73e:	4b04      	ldr	r3, [pc, #16]	; (750 <FT8_cmd_romfont+0x48>)
     740:	4798      	blx	r3
	FT8_cs_clear();
     742:	4b04      	ldr	r3, [pc, #16]	; (754 <FT8_cmd_romfont+0x4c>)
     744:	4798      	blx	r3
}
     746:	bd70      	pop	{r4, r5, r6, pc}
     748:	000003b5 	.word	0x000003b5
     74c:	00000ad9 	.word	0x00000ad9
     750:	0000039d 	.word	0x0000039d
     754:	00000ac9 	.word	0x00000ac9

00000758 <FT8_cmd_line>:
	FT8_inc_cmdoffset(12);
}


void FT8_cmd_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t width)
{
     758:	b5f0      	push	{r4, r5, r6, r7, lr}
     75a:	46d6      	mov	lr, sl
     75c:	464f      	mov	r7, r9
     75e:	4646      	mov	r6, r8
     760:	b5c0      	push	{r6, r7, lr}
     762:	0005      	movs	r5, r0
     764:	000e      	movs	r6, r1
     766:	4691      	mov	r9, r2
     768:	4698      	mov	r8, r3
     76a:	ab08      	add	r3, sp, #32
     76c:	881c      	ldrh	r4, [r3, #0]
	uint32_t calc;

	FT8_start_cmd((DL_BEGIN | FT8_LINES));
     76e:	4827      	ldr	r0, [pc, #156]	; (80c <FT8_cmd_line+0xb4>)
     770:	4b27      	ldr	r3, [pc, #156]	; (810 <FT8_cmd_line+0xb8>)
     772:	4798      	blx	r3

	calc = LINE_WIDTH(width * 16);
     774:	0124      	lsls	r4, r4, #4
     776:	20ff      	movs	r0, #255	; 0xff
     778:	0100      	lsls	r0, r0, #4
     77a:	4004      	ands	r4, r0
     77c:	27e0      	movs	r7, #224	; 0xe0
     77e:	053f      	lsls	r7, r7, #20
     780:	4327      	orrs	r7, r4
	spi_transmit((uint8_t)(calc));
     782:	b2f8      	uxtb	r0, r7
     784:	4c23      	ldr	r4, [pc, #140]	; (814 <FT8_cmd_line+0xbc>)
     786:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 8));
     788:	0a38      	lsrs	r0, r7, #8
     78a:	b2c0      	uxtb	r0, r0
     78c:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 16));
     78e:	2000      	movs	r0, #0
     790:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 24));
     792:	0e38      	lsrs	r0, r7, #24
     794:	47a0      	blx	r4

	calc = VERTEX2F(x0 * 16, y0 * 16);
     796:	04ed      	lsls	r5, r5, #19
     798:	4b1f      	ldr	r3, [pc, #124]	; (818 <FT8_cmd_line+0xc0>)
     79a:	469a      	mov	sl, r3
     79c:	401d      	ands	r5, r3
     79e:	0136      	lsls	r6, r6, #4
     7a0:	4f1e      	ldr	r7, [pc, #120]	; (81c <FT8_cmd_line+0xc4>)
     7a2:	403e      	ands	r6, r7
     7a4:	4335      	orrs	r5, r6
     7a6:	2680      	movs	r6, #128	; 0x80
     7a8:	05f6      	lsls	r6, r6, #23
     7aa:	4335      	orrs	r5, r6
	spi_transmit((uint8_t)(calc));
     7ac:	b2e8      	uxtb	r0, r5
     7ae:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 8));
     7b0:	0a28      	lsrs	r0, r5, #8
     7b2:	b2c0      	uxtb	r0, r0
     7b4:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 16));
     7b6:	0c28      	lsrs	r0, r5, #16
     7b8:	b2c0      	uxtb	r0, r0
     7ba:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 24));
     7bc:	0e28      	lsrs	r0, r5, #24
     7be:	47a0      	blx	r4

	calc = VERTEX2F(x1 * 16, y1 * 16);
     7c0:	464b      	mov	r3, r9
     7c2:	04dd      	lsls	r5, r3, #19
     7c4:	4653      	mov	r3, sl
     7c6:	401d      	ands	r5, r3
     7c8:	4643      	mov	r3, r8
     7ca:	0118      	lsls	r0, r3, #4
     7cc:	4038      	ands	r0, r7
     7ce:	4305      	orrs	r5, r0
     7d0:	4335      	orrs	r5, r6
	spi_transmit((uint8_t)(calc));
     7d2:	b2e8      	uxtb	r0, r5
     7d4:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 8));
     7d6:	0a28      	lsrs	r0, r5, #8
     7d8:	b2c0      	uxtb	r0, r0
     7da:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 16));
     7dc:	0c28      	lsrs	r0, r5, #16
     7de:	b2c0      	uxtb	r0, r0
     7e0:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 24));
     7e2:	0e28      	lsrs	r0, r5, #24
     7e4:	47a0      	blx	r4

	spi_transmit((uint8_t)(DL_END));
     7e6:	2000      	movs	r0, #0
     7e8:	47a0      	blx	r4
	spi_transmit((uint8_t)(DL_END >> 8));
     7ea:	2000      	movs	r0, #0
     7ec:	47a0      	blx	r4
	spi_transmit((uint8_t)(DL_END >> 16));
     7ee:	2000      	movs	r0, #0
     7f0:	47a0      	blx	r4
	spi_transmit((uint8_t)(DL_END >> 24));
     7f2:	2021      	movs	r0, #33	; 0x21
     7f4:	47a0      	blx	r4

	FT8_cs_clear();
     7f6:	4b0a      	ldr	r3, [pc, #40]	; (820 <FT8_cmd_line+0xc8>)
     7f8:	4798      	blx	r3
	FT8_inc_cmdoffset(16);
     7fa:	2010      	movs	r0, #16
     7fc:	4b09      	ldr	r3, [pc, #36]	; (824 <FT8_cmd_line+0xcc>)
     7fe:	4798      	blx	r3
}
     800:	bc1c      	pop	{r2, r3, r4}
     802:	4690      	mov	r8, r2
     804:	4699      	mov	r9, r3
     806:	46a2      	mov	sl, r4
     808:	bdf0      	pop	{r4, r5, r6, r7, pc}
     80a:	46c0      	nop			; (mov r8, r8)
     80c:	1f000003 	.word	0x1f000003
     810:	000003b5 	.word	0x000003b5
     814:	00000ad9 	.word	0x00000ad9
     818:	3ff80000 	.word	0x3ff80000
     81c:	00007ff0 	.word	0x00007ff0
     820:	00000ac9 	.word	0x00000ac9
     824:	0000039d 	.word	0x0000039d

00000828 <FT8_cmd_rect>:


void FT8_cmd_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t corner)
{
     828:	b5f0      	push	{r4, r5, r6, r7, lr}
     82a:	46d6      	mov	lr, sl
     82c:	464f      	mov	r7, r9
     82e:	4646      	mov	r6, r8
     830:	b5c0      	push	{r6, r7, lr}
     832:	0005      	movs	r5, r0
     834:	000e      	movs	r6, r1
     836:	4691      	mov	r9, r2
     838:	4698      	mov	r8, r3
     83a:	ab08      	add	r3, sp, #32
     83c:	881c      	ldrh	r4, [r3, #0]
	uint32_t calc;

	FT8_start_cmd((DL_BEGIN | FT8_RECTS));
     83e:	4827      	ldr	r0, [pc, #156]	; (8dc <FT8_cmd_rect+0xb4>)
     840:	4b27      	ldr	r3, [pc, #156]	; (8e0 <FT8_cmd_rect+0xb8>)
     842:	4798      	blx	r3

	calc = LINE_WIDTH(corner * 16);
     844:	0124      	lsls	r4, r4, #4
     846:	20ff      	movs	r0, #255	; 0xff
     848:	0100      	lsls	r0, r0, #4
     84a:	4004      	ands	r4, r0
     84c:	27e0      	movs	r7, #224	; 0xe0
     84e:	053f      	lsls	r7, r7, #20
     850:	4327      	orrs	r7, r4
	spi_transmit((uint8_t)(calc));
     852:	b2f8      	uxtb	r0, r7
     854:	4c23      	ldr	r4, [pc, #140]	; (8e4 <FT8_cmd_rect+0xbc>)
     856:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 8));
     858:	0a38      	lsrs	r0, r7, #8
     85a:	b2c0      	uxtb	r0, r0
     85c:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 16));
     85e:	2000      	movs	r0, #0
     860:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 24));
     862:	0e38      	lsrs	r0, r7, #24
     864:	47a0      	blx	r4

	calc = VERTEX2F(x0 * 16, y0 * 16);
     866:	04ed      	lsls	r5, r5, #19
     868:	4b1f      	ldr	r3, [pc, #124]	; (8e8 <FT8_cmd_rect+0xc0>)
     86a:	469a      	mov	sl, r3
     86c:	401d      	ands	r5, r3
     86e:	0136      	lsls	r6, r6, #4
     870:	4f1e      	ldr	r7, [pc, #120]	; (8ec <FT8_cmd_rect+0xc4>)
     872:	403e      	ands	r6, r7
     874:	4335      	orrs	r5, r6
     876:	2680      	movs	r6, #128	; 0x80
     878:	05f6      	lsls	r6, r6, #23
     87a:	4335      	orrs	r5, r6
	spi_transmit((uint8_t)(calc));
     87c:	b2e8      	uxtb	r0, r5
     87e:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 8));
     880:	0a28      	lsrs	r0, r5, #8
     882:	b2c0      	uxtb	r0, r0
     884:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 16));
     886:	0c28      	lsrs	r0, r5, #16
     888:	b2c0      	uxtb	r0, r0
     88a:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 24));
     88c:	0e28      	lsrs	r0, r5, #24
     88e:	47a0      	blx	r4

	calc = VERTEX2F(x1 * 16, y1 * 16);
     890:	464b      	mov	r3, r9
     892:	04dd      	lsls	r5, r3, #19
     894:	4653      	mov	r3, sl
     896:	401d      	ands	r5, r3
     898:	4643      	mov	r3, r8
     89a:	0118      	lsls	r0, r3, #4
     89c:	4038      	ands	r0, r7
     89e:	4305      	orrs	r5, r0
     8a0:	4335      	orrs	r5, r6
	spi_transmit((uint8_t)(calc));
     8a2:	b2e8      	uxtb	r0, r5
     8a4:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 8));
     8a6:	0a28      	lsrs	r0, r5, #8
     8a8:	b2c0      	uxtb	r0, r0
     8aa:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 16));
     8ac:	0c28      	lsrs	r0, r5, #16
     8ae:	b2c0      	uxtb	r0, r0
     8b0:	47a0      	blx	r4
	spi_transmit((uint8_t)(calc >> 24));
     8b2:	0e28      	lsrs	r0, r5, #24
     8b4:	47a0      	blx	r4

	spi_transmit((uint8_t)(DL_END));
     8b6:	2000      	movs	r0, #0
     8b8:	47a0      	blx	r4
	spi_transmit((uint8_t)(DL_END >> 8));
     8ba:	2000      	movs	r0, #0
     8bc:	47a0      	blx	r4
	spi_transmit((uint8_t)(DL_END >> 16));
     8be:	2000      	movs	r0, #0
     8c0:	47a0      	blx	r4
	spi_transmit((uint8_t)(DL_END >> 24));
     8c2:	2021      	movs	r0, #33	; 0x21
     8c4:	47a0      	blx	r4

	FT8_cs_clear();
     8c6:	4b0a      	ldr	r3, [pc, #40]	; (8f0 <FT8_cmd_rect+0xc8>)
     8c8:	4798      	blx	r3
	FT8_inc_cmdoffset(16);
     8ca:	2010      	movs	r0, #16
     8cc:	4b09      	ldr	r3, [pc, #36]	; (8f4 <FT8_cmd_rect+0xcc>)
     8ce:	4798      	blx	r3
}
     8d0:	bc1c      	pop	{r2, r3, r4}
     8d2:	4690      	mov	r8, r2
     8d4:	4699      	mov	r9, r3
     8d6:	46a2      	mov	sl, r4
     8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	1f000009 	.word	0x1f000009
     8e0:	000003b5 	.word	0x000003b5
     8e4:	00000ad9 	.word	0x00000ad9
     8e8:	3ff80000 	.word	0x3ff80000
     8ec:	00007ff0 	.word	0x00007ff0
     8f0:	00000ac9 	.word	0x00000ac9
     8f4:	0000039d 	.word	0x0000039d

000008f8 <FT8_init>:


/* init, has to be executed with the SPI setup to 11 MHz or less as required by FT8xx */

uint8_t FT8_init(void)
{
     8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t gpio;
	uint8_t chipid;
	uint8_t timeout = 0;

	FT8_pdn_set();
     8fa:	4b4b      	ldr	r3, [pc, #300]	; (a28 <FT8_init+0x130>)
     8fc:	4798      	blx	r3
	DELAY_MS(6);	/* minimum time for power-down is 5ms */
     8fe:	2006      	movs	r0, #6
     900:	4c4a      	ldr	r4, [pc, #296]	; (a2c <FT8_init+0x134>)
     902:	47a0      	blx	r4
	FT8_pdn_clear();
     904:	4b4a      	ldr	r3, [pc, #296]	; (a30 <FT8_init+0x138>)
     906:	4798      	blx	r3
	DELAY_MS(21);	/* minimum time to allow from rising PD_N to first access is 20ms */
     908:	2015      	movs	r0, #21
     90a:	47a0      	blx	r4
	{
		FT8_cmdWrite(FT8_CLKEXT);	/* setup FT8xx for external clock */
	}
	else
	{
		FT8_cmdWrite(FT8_CLKINT);	/* setup FT8xx for internal clock */
     90c:	2048      	movs	r0, #72	; 0x48
     90e:	4c49      	ldr	r4, [pc, #292]	; (a34 <FT8_init+0x13c>)
     910:	47a0      	blx	r4
	}

	FT8_cmdWrite(FT8_ACTIVE);	/* start FT8xx */
     912:	2000      	movs	r0, #0
     914:	47a0      	blx	r4

	chipid = FT8_memRead8(REG_ID);	/* Read ID register */
     916:	4848      	ldr	r0, [pc, #288]	; (a38 <FT8_init+0x140>)
     918:	4b48      	ldr	r3, [pc, #288]	; (a3c <FT8_init+0x144>)
     91a:	4798      	blx	r3
     91c:	0005      	movs	r5, r0
	uint8_t timeout = 0;
     91e:	2400      	movs	r4, #0
	while(chipid != 0x7C)	/* if chipid is not 0x7c, continue to read it until it is, FT81x may need a moment for it's power on selftest */
     920:	2d7c      	cmp	r5, #124	; 0x7c
     922:	d00c      	beq.n	93e <FT8_init+0x46>
	{
		chipid = FT8_memRead8(REG_ID);
     924:	4844      	ldr	r0, [pc, #272]	; (a38 <FT8_init+0x140>)
     926:	4b45      	ldr	r3, [pc, #276]	; (a3c <FT8_init+0x144>)
     928:	4798      	blx	r3
     92a:	0005      	movs	r5, r0
		DELAY_MS(1);
     92c:	2001      	movs	r0, #1
     92e:	4b3f      	ldr	r3, [pc, #252]	; (a2c <FT8_init+0x134>)
     930:	4798      	blx	r3
		timeout++;
     932:	3401      	adds	r4, #1
     934:	b2e4      	uxtb	r4, r4
		if(timeout > 200)
     936:	2cc8      	cmp	r4, #200	; 0xc8
     938:	d9f2      	bls.n	920 <FT8_init+0x28>
		{
			return 0;
     93a:	2000      	movs	r0, #0
     93c:	e072      	b.n	a24 <FT8_init+0x12c>
		}
	}

	FT8_memWrite8(REG_PCLK, 0x00);		/* set PCLK to zero - don't clock the LCD until later */
     93e:	4f40      	ldr	r7, [pc, #256]	; (a40 <FT8_init+0x148>)
     940:	2100      	movs	r1, #0
     942:	0038      	movs	r0, r7
     944:	4d3f      	ldr	r5, [pc, #252]	; (a44 <FT8_init+0x14c>)
     946:	47a8      	blx	r5
	FT8_memWrite8(REG_PWM_DUTY, 10);		/* turn off backlight */
     948:	210a      	movs	r1, #10
     94a:	483f      	ldr	r0, [pc, #252]	; (a48 <FT8_init+0x150>)
     94c:	47a8      	blx	r5

	/* Initialize Display */
	FT8_memWrite16(REG_HSIZE,   FT8_HSIZE);	/* active display width */
     94e:	21f0      	movs	r1, #240	; 0xf0
     950:	0049      	lsls	r1, r1, #1
     952:	483e      	ldr	r0, [pc, #248]	; (a4c <FT8_init+0x154>)
     954:	4c3e      	ldr	r4, [pc, #248]	; (a50 <FT8_init+0x158>)
     956:	47a0      	blx	r4
	FT8_memWrite16(REG_HCYCLE,  FT8_HCYCLE);	/* total number of clocks per line, incl front/back porch */
     958:	2184      	movs	r1, #132	; 0x84
     95a:	00c9      	lsls	r1, r1, #3
     95c:	483d      	ldr	r0, [pc, #244]	; (a54 <FT8_init+0x15c>)
     95e:	47a0      	blx	r4
	FT8_memWrite16(REG_HOFFSET, FT8_HOFFSET);	/* start of active line */
     960:	212e      	movs	r1, #46	; 0x2e
     962:	483d      	ldr	r0, [pc, #244]	; (a58 <FT8_init+0x160>)
     964:	47a0      	blx	r4
	FT8_memWrite16(REG_HSYNC0,  FT8_HSYNC0);	/* start of horizontal sync pulse */
     966:	2100      	movs	r1, #0
     968:	483c      	ldr	r0, [pc, #240]	; (a5c <FT8_init+0x164>)
     96a:	47a0      	blx	r4
	FT8_memWrite16(REG_HSYNC1,  FT8_HSYNC1);	/* end of horizontal sync pulse */
     96c:	210a      	movs	r1, #10
     96e:	483c      	ldr	r0, [pc, #240]	; (a60 <FT8_init+0x168>)
     970:	47a0      	blx	r4
	FT8_memWrite16(REG_VSIZE,   FT8_VSIZE);	/* active display height */
     972:	2188      	movs	r1, #136	; 0x88
     974:	0049      	lsls	r1, r1, #1
     976:	483b      	ldr	r0, [pc, #236]	; (a64 <FT8_init+0x16c>)
     978:	47a0      	blx	r4
	FT8_memWrite16(REG_VCYCLE,  FT8_VCYCLE);	/* total number of lines per screen, incl pre/post */
     97a:	493b      	ldr	r1, [pc, #236]	; (a68 <FT8_init+0x170>)
     97c:	483b      	ldr	r0, [pc, #236]	; (a6c <FT8_init+0x174>)
     97e:	47a0      	blx	r4
	FT8_memWrite16(REG_VOFFSET, FT8_VOFFSET);	/* start of active screen */
     980:	2117      	movs	r1, #23
     982:	483b      	ldr	r0, [pc, #236]	; (a70 <FT8_init+0x178>)
     984:	47a0      	blx	r4
	FT8_memWrite16(REG_VSYNC0,  FT8_VSYNC0);	/* start of vertical sync pulse */
     986:	2100      	movs	r1, #0
     988:	483a      	ldr	r0, [pc, #232]	; (a74 <FT8_init+0x17c>)
     98a:	47a0      	blx	r4
	FT8_memWrite16(REG_VSYNC1,  FT8_VSYNC1);	/* end of vertical sync pulse */
     98c:	210a      	movs	r1, #10
     98e:	483a      	ldr	r0, [pc, #232]	; (a78 <FT8_init+0x180>)
     990:	47a0      	blx	r4
	FT8_memWrite8(REG_SWIZZLE,  FT8_SWIZZLE);	/* FT8xx output to LCD - pin order */
     992:	2100      	movs	r1, #0
     994:	4839      	ldr	r0, [pc, #228]	; (a7c <FT8_init+0x184>)
     996:	47a8      	blx	r5
	FT8_memWrite8(REG_PCLK_POL, FT8_PCLKPOL);	/* LCD data is clocked in on this PCLK edge */
     998:	2101      	movs	r1, #1
     99a:	4839      	ldr	r0, [pc, #228]	; (a80 <FT8_init+0x188>)
     99c:	47a8      	blx	r5
	/* Don't set PCLK yet - wait for just after the first display list */

	/* Configure Touch */
	FT8_memWrite8(REG_TOUCH_MODE, FT8_TMODE_CONTINUOUS);	/* enable touch */
     99e:	2103      	movs	r1, #3
     9a0:	4838      	ldr	r0, [pc, #224]	; (a84 <FT8_init+0x18c>)
     9a2:	47a8      	blx	r5
	FT8_memWrite16(REG_TOUCH_RZTHRESH, FT8_TOUCH_RZTHRESH);	/* eliminate any false touches */
     9a4:	21e1      	movs	r1, #225	; 0xe1
     9a6:	00c9      	lsls	r1, r1, #3
     9a8:	4837      	ldr	r0, [pc, #220]	; (a88 <FT8_init+0x190>)
     9aa:	47a0      	blx	r4

	/* Configure Audio - not used, so disable it */
	FT8_memWrite8(REG_VOL_PB, 0x00);	/* turn recorded audio volume down */
     9ac:	2100      	movs	r1, #0
     9ae:	4837      	ldr	r0, [pc, #220]	; (a8c <FT8_init+0x194>)
     9b0:	47a8      	blx	r5
/*	FT8_memWrite8(REG_VOL_SOUND, 0xff); */	/* turn synthesizer volume on */
	FT8_memWrite8(REG_VOL_SOUND, 0x00);	/* turn synthesizer volume off */
     9b2:	2100      	movs	r1, #0
     9b4:	4836      	ldr	r0, [pc, #216]	; (a90 <FT8_init+0x198>)
     9b6:	47a8      	blx	r5
	FT8_memWrite16(REG_SOUND, 0x6000);	/*	set synthesizer to mute */
     9b8:	21c0      	movs	r1, #192	; 0xc0
     9ba:	01c9      	lsls	r1, r1, #7
     9bc:	4835      	ldr	r0, [pc, #212]	; (a94 <FT8_init+0x19c>)
     9be:	47a0      	blx	r4

	FT8_memWrite32(FT8_RAM_DL, DL_CLEAR_RGB);
     9c0:	2180      	movs	r1, #128	; 0x80
     9c2:	0489      	lsls	r1, r1, #18
     9c4:	20c0      	movs	r0, #192	; 0xc0
     9c6:	0380      	lsls	r0, r0, #14
     9c8:	4c33      	ldr	r4, [pc, #204]	; (a98 <FT8_init+0x1a0>)
     9ca:	47a0      	blx	r4
	FT8_memWrite32(FT8_RAM_DL + 4, (DL_CLEAR | CLR_COL | CLR_STN | CLR_TAG));
     9cc:	4933      	ldr	r1, [pc, #204]	; (a9c <FT8_init+0x1a4>)
     9ce:	4834      	ldr	r0, [pc, #208]	; (aa0 <FT8_init+0x1a8>)
     9d0:	47a0      	blx	r4
	FT8_memWrite32(FT8_RAM_DL + 8, DL_DISPLAY);	/* end of display list */
     9d2:	2100      	movs	r1, #0
     9d4:	4833      	ldr	r0, [pc, #204]	; (aa4 <FT8_init+0x1ac>)
     9d6:	47a0      	blx	r4
	FT8_memWrite32(REG_DLSWAP, FT8_DLSWAP_FRAME);
     9d8:	2102      	movs	r1, #2
     9da:	4833      	ldr	r0, [pc, #204]	; (aa8 <FT8_init+0x1b0>)
     9dc:	47a0      	blx	r4

	/* nothing is being displayed yet... the pixel clock is still 0x00 */

	gpio = FT8_memRead8(REG_GPIO_DIR);
     9de:	4c33      	ldr	r4, [pc, #204]	; (aac <FT8_init+0x1b4>)
     9e0:	0020      	movs	r0, r4
     9e2:	4e16      	ldr	r6, [pc, #88]	; (a3c <FT8_init+0x144>)
     9e4:	47b0      	blx	r6
	gpio |= 0x82; /* set DISP to Output although it always is output, set GPIO1 to Output - Audio Enable on VM800B */
     9e6:	217e      	movs	r1, #126	; 0x7e
     9e8:	4249      	negs	r1, r1
     9ea:	4301      	orrs	r1, r0
     9ec:	b2c9      	uxtb	r1, r1
	FT8_memWrite8(REG_GPIO_DIR, gpio);
     9ee:	0020      	movs	r0, r4
     9f0:	47a8      	blx	r5

	gpio = FT8_memRead8(REG_GPIO);	/* read the FT8xx GPIO register for a read/modify/write operation */
     9f2:	4c2f      	ldr	r4, [pc, #188]	; (ab0 <FT8_init+0x1b8>)
     9f4:	0020      	movs	r0, r4
     9f6:	47b0      	blx	r6
/*	gpio |= 0x82; */					/* set bit 7 of FT8xx GPIO register (DISP), set GPIO1 to High to enable Audio - others are inputs */
	gpio |= 0x80;						/* set bit 7 of FT8xx GPIO register (DISP), others are inputs */
     9f8:	2180      	movs	r1, #128	; 0x80
     9fa:	4249      	negs	r1, r1
     9fc:	4301      	orrs	r1, r0
     9fe:	b2c9      	uxtb	r1, r1
	FT8_memWrite8(REG_GPIO, gpio);	/* enable the DISP signal to the LCD panel */
     a00:	0020      	movs	r0, r4
     a02:	47a8      	blx	r5
	FT8_memWrite8(REG_PCLK, FT8_PCLK);	/* now start clocking data to the LCD panel */
     a04:	2102      	movs	r1, #2
     a06:	0038      	movs	r0, r7
     a08:	47a8      	blx	r5

	FT8_memWrite8(REG_PWM_DUTY, 70);	/* turn on backlight */
     a0a:	2146      	movs	r1, #70	; 0x46
     a0c:	480e      	ldr	r0, [pc, #56]	; (a48 <FT8_init+0x150>)
     a0e:	47a8      	blx	r5

	DELAY_MS(2);	/* just to be safe */
     a10:	2002      	movs	r0, #2
     a12:	4b06      	ldr	r3, [pc, #24]	; (a2c <FT8_init+0x134>)
     a14:	4798      	blx	r3
	
	while(FT8_busy() == 1);
     a16:	4b27      	ldr	r3, [pc, #156]	; (ab4 <FT8_init+0x1bc>)
     a18:	4798      	blx	r3
     a1a:	2801      	cmp	r0, #1
     a1c:	d0fb      	beq.n	a16 <FT8_init+0x11e>
	FT8_get_cmdoffset();
     a1e:	4b26      	ldr	r3, [pc, #152]	; (ab8 <FT8_init+0x1c0>)
     a20:	4798      	blx	r3
	return 1;
     a22:	2001      	movs	r0, #1
}
     a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a26:	46c0      	nop			; (mov r8, r8)
     a28:	00000ad5 	.word	0x00000ad5
     a2c:	00000f5d 	.word	0x00000f5d
     a30:	00000ad7 	.word	0x00000ad7
     a34:	0000019d 	.word	0x0000019d
     a38:	00302000 	.word	0x00302000
     a3c:	000001c5 	.word	0x000001c5
     a40:	00302070 	.word	0x00302070
     a44:	0000024d 	.word	0x0000024d
     a48:	003020d4 	.word	0x003020d4
     a4c:	00302034 	.word	0x00302034
     a50:	00000289 	.word	0x00000289
     a54:	0030202c 	.word	0x0030202c
     a58:	00302030 	.word	0x00302030
     a5c:	00302038 	.word	0x00302038
     a60:	0030203c 	.word	0x0030203c
     a64:	00302048 	.word	0x00302048
     a68:	0000020d 	.word	0x0000020d
     a6c:	00302040 	.word	0x00302040
     a70:	00302044 	.word	0x00302044
     a74:	0030204c 	.word	0x0030204c
     a78:	00302050 	.word	0x00302050
     a7c:	00302064 	.word	0x00302064
     a80:	0030206c 	.word	0x0030206c
     a84:	00302104 	.word	0x00302104
     a88:	00302118 	.word	0x00302118
     a8c:	00302080 	.word	0x00302080
     a90:	00302084 	.word	0x00302084
     a94:	00302088 	.word	0x00302088
     a98:	000002c9 	.word	0x000002c9
     a9c:	26000007 	.word	0x26000007
     aa0:	00300004 	.word	0x00300004
     aa4:	00300008 	.word	0x00300008
     aa8:	00302054 	.word	0x00302054
     aac:	00302090 	.word	0x00302090
     ab0:	00302094 	.word	0x00302094
     ab4:	00000315 	.word	0x00000315
     ab8:	00000381 	.word	0x00000381

00000abc <FT8_cs_set>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     abc:	2280      	movs	r2, #128	; 0x80
     abe:	0292      	lsls	r2, r2, #10
     ac0:	23c0      	movs	r3, #192	; 0xc0
     ac2:	05db      	lsls	r3, r3, #23
     ac4:	615a      	str	r2, [r3, #20]

void FT8_cs_set(void)
{
	//SPI.setDataMode(SPI_MODE0);
	gpio_set_pin_level(CS,false); //digitalWrite(FT8_CS, LOW)
}
     ac6:	4770      	bx	lr

00000ac8 <FT8_cs_clear>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ac8:	2280      	movs	r2, #128	; 0x80
     aca:	0292      	lsls	r2, r2, #10
     acc:	23c0      	movs	r3, #192	; 0xc0
     ace:	05db      	lsls	r3, r3, #23
     ad0:	619a      	str	r2, [r3, #24]


void FT8_cs_clear(void)
{
	gpio_set_pin_level(CS,true); //digitalWrite(FT8_CS, HIGH);
}
     ad2:	4770      	bx	lr

00000ad4 <FT8_pdn_set>:

void FT8_pdn_set(void)
{
	//digitalWrite(FT8_PDN, LOW);	/* Power-Down low */
	//not using power down
}
     ad4:	4770      	bx	lr

00000ad6 <FT8_pdn_clear>:

void FT8_pdn_clear(void)
{
	//digitalWrite(FT8_PDN, HIGH);	/* Power-Down high */
	//not using power down
}
     ad6:	4770      	bx	lr

00000ad8 <spi_transmit>:

void spi_transmit(uint8_t data)
{
     ad8:	b500      	push	{lr}
     ada:	b083      	sub	sp, #12
     adc:	466b      	mov	r3, sp
     ade:	1dd9      	adds	r1, r3, #7
     ae0:	7008      	strb	r0, [r1, #0]
	
	io_write(io, &data,1);	//SPI.transfer(data);
     ae2:	4b03      	ldr	r3, [pc, #12]	; (af0 <spi_transmit+0x18>)
     ae4:	6818      	ldr	r0, [r3, #0]
     ae6:	2201      	movs	r2, #1
     ae8:	4b02      	ldr	r3, [pc, #8]	; (af4 <spi_transmit+0x1c>)
     aea:	4798      	blx	r3
}
     aec:	b003      	add	sp, #12
     aee:	bd00      	pop	{pc}
     af0:	20000230 	.word	0x20000230
     af4:	00000f7d 	.word	0x00000f7d

00000af8 <spi_receive>:


uint8_t spi_receive(uint8_t data)
{
     af8:	b510      	push	{r4, lr}
     afa:	b082      	sub	sp, #8
     afc:	466b      	mov	r3, sp
     afe:	1ddc      	adds	r4, r3, #7
     b00:	71d8      	strb	r0, [r3, #7]
	io_read(io, &data,1);		//SPI.transfer(data);
     b02:	4b04      	ldr	r3, [pc, #16]	; (b14 <spi_receive+0x1c>)
     b04:	6818      	ldr	r0, [r3, #0]
     b06:	2201      	movs	r2, #1
     b08:	0021      	movs	r1, r4
     b0a:	4b03      	ldr	r3, [pc, #12]	; (b18 <spi_receive+0x20>)
     b0c:	4798      	blx	r3
	return data;
     b0e:	7820      	ldrb	r0, [r4, #0]
}
     b10:	b002      	add	sp, #8
     b12:	bd10      	pop	{r4, pc}
     b14:	20000230 	.word	0x20000230
     b18:	00000fb5 	.word	0x00000fb5

00000b1c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     b1c:	b510      	push	{r4, lr}
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     b1e:	4a07      	ldr	r2, [pc, #28]	; (b3c <TIMER_0_init+0x20>)
     b20:	6951      	ldr	r1, [r2, #20]
     b22:	2380      	movs	r3, #128	; 0x80
     b24:	009b      	lsls	r3, r3, #2
     b26:	430b      	orrs	r3, r1
     b28:	6153      	str	r3, [r2, #20]
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     b2a:	4b05      	ldr	r3, [pc, #20]	; (b40 <TIMER_0_init+0x24>)
     b2c:	4798      	blx	r3
     b2e:	0002      	movs	r2, r0
     b30:	4904      	ldr	r1, [pc, #16]	; (b44 <TIMER_0_init+0x28>)
     b32:	4805      	ldr	r0, [pc, #20]	; (b48 <TIMER_0_init+0x2c>)
     b34:	4b05      	ldr	r3, [pc, #20]	; (b4c <TIMER_0_init+0x30>)
     b36:	4798      	blx	r3
}
     b38:	bd10      	pop	{r4, pc}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	40000800 	.word	0x40000800
     b40:	00001b47 	.word	0x00001b47
     b44:	40002400 	.word	0x40002400
     b48:	20000280 	.word	0x20000280
     b4c:	00001219 	.word	0x00001219

00000b50 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     b50:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b52:	2382      	movs	r3, #130	; 0x82
     b54:	05db      	lsls	r3, r3, #23
     b56:	2244      	movs	r2, #68	; 0x44
     b58:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b5a:	2501      	movs	r5, #1
     b5c:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b5e:	2401      	movs	r4, #1
     b60:	4321      	orrs	r1, r4
     b62:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b64:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b66:	2032      	movs	r0, #50	; 0x32
     b68:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b6a:	3a35      	subs	r2, #53	; 0x35
     b6c:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     b6e:	2203      	movs	r2, #3
     b70:	4311      	orrs	r1, r2
     b72:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b74:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b76:	2145      	movs	r1, #69	; 0x45
     b78:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b7a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b7c:	4322      	orrs	r2, r4
     b7e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b80:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b82:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b84:	3936      	subs	r1, #54	; 0x36
     b86:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     b88:	2130      	movs	r1, #48	; 0x30
     b8a:	430a      	orrs	r2, r1
     b8c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b8e:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
}
     b90:	bd30      	pop	{r4, r5, pc}
	...

00000b94 <TARGET_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     b94:	4b06      	ldr	r3, [pc, #24]	; (bb0 <TARGET_IO_CLOCK_init+0x1c>)
     b96:	2141      	movs	r1, #65	; 0x41
     b98:	22cc      	movs	r2, #204	; 0xcc
     b9a:	5099      	str	r1, [r3, r2]
     b9c:	3102      	adds	r1, #2
     b9e:	3a04      	subs	r2, #4
     ba0:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     ba2:	4a04      	ldr	r2, [pc, #16]	; (bb4 <TARGET_IO_CLOCK_init+0x20>)
     ba4:	69d3      	ldr	r3, [r2, #28]
     ba6:	3941      	subs	r1, #65	; 0x41
     ba8:	430b      	orrs	r3, r1
     baa:	61d3      	str	r3, [r2, #28]
void TARGET_IO_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
}
     bac:	4770      	bx	lr
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	40001c00 	.word	0x40001c00
     bb4:	40000800 	.word	0x40000800

00000bb8 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     bb8:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     bba:	4b05      	ldr	r3, [pc, #20]	; (bd0 <TARGET_IO_init+0x18>)
     bbc:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM0, (void *)NULL);
     bbe:	2200      	movs	r2, #0
     bc0:	4904      	ldr	r1, [pc, #16]	; (bd4 <TARGET_IO_init+0x1c>)
     bc2:	4805      	ldr	r0, [pc, #20]	; (bd8 <TARGET_IO_init+0x20>)
     bc4:	4b05      	ldr	r3, [pc, #20]	; (bdc <TARGET_IO_init+0x24>)
     bc6:	4798      	blx	r3
	TARGET_IO_PORT_init();
     bc8:	4b05      	ldr	r3, [pc, #20]	; (be0 <TARGET_IO_init+0x28>)
     bca:	4798      	blx	r3
}
     bcc:	bd10      	pop	{r4, pc}
     bce:	46c0      	nop			; (mov r8, r8)
     bd0:	00000b95 	.word	0x00000b95
     bd4:	42000400 	.word	0x42000400
     bd8:	20000274 	.word	0x20000274
     bdc:	00001429 	.word	0x00001429
     be0:	00000b51 	.word	0x00000b51

00000be4 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     be4:	b5f0      	push	{r4, r5, r6, r7, lr}
     be6:	46ce      	mov	lr, r9
     be8:	4647      	mov	r7, r8
     bea:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bec:	24c0      	movs	r4, #192	; 0xc0
     bee:	05e4      	lsls	r4, r4, #23
     bf0:	2380      	movs	r3, #128	; 0x80
     bf2:	025b      	lsls	r3, r3, #9
     bf4:	6163      	str	r3, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bf6:	60a3      	str	r3, [r4, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bf8:	2382      	movs	r3, #130	; 0x82
     bfa:	05db      	lsls	r3, r3, #23
     bfc:	2280      	movs	r2, #128	; 0x80
     bfe:	05d2      	lsls	r2, r2, #23
     c00:	4691      	mov	r9, r2
     c02:	629a      	str	r2, [r3, #40]	; 0x28
     c04:	4921      	ldr	r1, [pc, #132]	; (c8c <SPI_0_PORT_init+0xa8>)
     c06:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c08:	2050      	movs	r0, #80	; 0x50
     c0a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c0c:	2601      	movs	r6, #1
     c0e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c10:	2501      	movs	r5, #1
     c12:	4329      	orrs	r1, r5
     c14:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c16:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c18:	3818      	subs	r0, #24
     c1a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c1c:	270f      	movs	r7, #15
     c1e:	46bc      	mov	ip, r7
     c20:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
     c22:	2702      	movs	r7, #2
     c24:	4339      	orrs	r1, r7
     c26:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c28:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c2a:	2180      	movs	r1, #128	; 0x80
     c2c:	02c9      	lsls	r1, r1, #11
     c2e:	6061      	str	r1, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c30:	4917      	ldr	r1, [pc, #92]	; (c90 <SPI_0_PORT_init+0xac>)
     c32:	6299      	str	r1, [r3, #40]	; 0x28
     c34:	4917      	ldr	r1, [pc, #92]	; (c94 <SPI_0_PORT_init+0xb0>)
     c36:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c38:	2152      	movs	r1, #82	; 0x52
     c3a:	5c58      	ldrb	r0, [r3, r1]
     c3c:	2204      	movs	r2, #4
     c3e:	4390      	bics	r0, r2
     c40:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c42:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c44:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c46:	4328      	orrs	r0, r5
     c48:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c4a:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c4c:	2039      	movs	r0, #57	; 0x39
     c4e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c50:	4662      	mov	r2, ip
     c52:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     c54:	4339      	orrs	r1, r7
     c56:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c58:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c5a:	2180      	movs	r1, #128	; 0x80
     c5c:	0309      	lsls	r1, r1, #12
     c5e:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c60:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c62:	464a      	mov	r2, r9
     c64:	629a      	str	r2, [r3, #40]	; 0x28
     c66:	4a0c      	ldr	r2, [pc, #48]	; (c98 <SPI_0_PORT_init+0xb4>)
     c68:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c6a:	2153      	movs	r1, #83	; 0x53
     c6c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     c6e:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c70:	432a      	orrs	r2, r5
     c72:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c74:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c76:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c78:	3944      	subs	r1, #68	; 0x44
     c7a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     c7c:	2120      	movs	r1, #32
     c7e:	430a      	orrs	r2, r1
     c80:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c82:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA19, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA19, PINMUX_PA19C_SERCOM1_PAD3);
}
     c84:	bc0c      	pop	{r2, r3}
     c86:	4690      	mov	r8, r2
     c88:	4699      	mov	r9, r3
     c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c8c:	c0000001 	.word	0xc0000001
     c90:	40020000 	.word	0x40020000
     c94:	c0020004 	.word	0xc0020004
     c98:	c0000008 	.word	0xc0000008

00000c9c <SPI_0_CLOCK_init>:
     c9c:	4b06      	ldr	r3, [pc, #24]	; (cb8 <SPI_0_CLOCK_init+0x1c>)
     c9e:	2142      	movs	r1, #66	; 0x42
     ca0:	22d0      	movs	r2, #208	; 0xd0
     ca2:	5099      	str	r1, [r3, r2]
     ca4:	3101      	adds	r1, #1
     ca6:	3a08      	subs	r2, #8
     ca8:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM1;
     caa:	4a04      	ldr	r2, [pc, #16]	; (cbc <SPI_0_CLOCK_init+0x20>)
     cac:	69d3      	ldr	r3, [r2, #28]
     cae:	393f      	subs	r1, #63	; 0x3f
     cb0:	430b      	orrs	r3, r1
     cb2:	61d3      	str	r3, [r2, #28]
void SPI_0_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM1_bit(MCLK);
}
     cb4:	4770      	bx	lr
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	40001c00 	.word	0x40001c00
     cbc:	40000800 	.word	0x40000800

00000cc0 <SPI_0_init>:

void SPI_0_init(void)
{
     cc0:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     cc2:	4b04      	ldr	r3, [pc, #16]	; (cd4 <SPI_0_init+0x14>)
     cc4:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM1);
     cc6:	4904      	ldr	r1, [pc, #16]	; (cd8 <SPI_0_init+0x18>)
     cc8:	4804      	ldr	r0, [pc, #16]	; (cdc <SPI_0_init+0x1c>)
     cca:	4b05      	ldr	r3, [pc, #20]	; (ce0 <SPI_0_init+0x20>)
     ccc:	4798      	blx	r3
	SPI_0_PORT_init();
     cce:	4b05      	ldr	r3, [pc, #20]	; (ce4 <SPI_0_init+0x24>)
     cd0:	4798      	blx	r3
}
     cd2:	bd10      	pop	{r4, pc}
     cd4:	00000c9d 	.word	0x00000c9d
     cd8:	42000800 	.word	0x42000800
     cdc:	20000234 	.word	0x20000234
     ce0:	00000fed 	.word	0x00000fed
     ce4:	00000be5 	.word	0x00000be5

00000ce8 <delay_driver_init>:

void delay_driver_init(void)
{
     ce8:	b510      	push	{r4, lr}
	delay_init(SysTick);
     cea:	4802      	ldr	r0, [pc, #8]	; (cf4 <delay_driver_init+0xc>)
     cec:	4b02      	ldr	r3, [pc, #8]	; (cf8 <delay_driver_init+0x10>)
     cee:	4798      	blx	r3
}
     cf0:	bd10      	pop	{r4, pc}
     cf2:	46c0      	nop			; (mov r8, r8)
     cf4:	e000e010 	.word	0xe000e010
     cf8:	00000f49 	.word	0x00000f49

00000cfc <CAN_0_PORT_init>:

void CAN_0_PORT_init(void)
{
     cfc:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cfe:	2382      	movs	r3, #130	; 0x82
     d00:	05db      	lsls	r3, r3, #23
     d02:	2259      	movs	r2, #89	; 0x59
     d04:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d06:	2501      	movs	r5, #1
     d08:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d0a:	2401      	movs	r4, #1
     d0c:	4321      	orrs	r1, r4
     d0e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d10:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d12:	203c      	movs	r0, #60	; 0x3c
     d14:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d16:	3a4a      	subs	r2, #74	; 0x4a
     d18:	4011      	ands	r1, r2
	tmp |= PORT_PMUX_PMUXO(data);
     d1a:	2260      	movs	r2, #96	; 0x60
     d1c:	4311      	orrs	r1, r2
     d1e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d20:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d22:	2158      	movs	r1, #88	; 0x58
     d24:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d26:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d28:	4322      	orrs	r2, r4
     d2a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d2c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d2e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d30:	3949      	subs	r1, #73	; 0x49
     d32:	438a      	bics	r2, r1
	tmp |= PORT_PMUX_PMUXE(data);
     d34:	2106      	movs	r1, #6
     d36:	430a      	orrs	r2, r1
     d38:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d3a:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA25, PINMUX_PA25G_CAN0_RX);

	gpio_set_pin_function(PA24, PINMUX_PA24G_CAN0_TX);
}
     d3c:	bd30      	pop	{r4, r5, pc}
	...

00000d40 <CAN_0_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_0_init(void)
{
     d40:	b510      	push	{r4, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN0;
     d42:	4a08      	ldr	r2, [pc, #32]	; (d64 <CAN_0_init+0x24>)
     d44:	6911      	ldr	r1, [r2, #16]
     d46:	2380      	movs	r3, #128	; 0x80
     d48:	005b      	lsls	r3, r3, #1
     d4a:	430b      	orrs	r3, r1
     d4c:	6113      	str	r3, [r2, #16]
     d4e:	2141      	movs	r1, #65	; 0x41
     d50:	23e8      	movs	r3, #232	; 0xe8
     d52:	4a05      	ldr	r2, [pc, #20]	; (d68 <CAN_0_init+0x28>)
     d54:	50d1      	str	r1, [r2, r3]
	hri_mclk_set_AHBMASK_CAN0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN0_GCLK_ID, CONF_GCLK_CAN0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_0, CAN0);
     d56:	4905      	ldr	r1, [pc, #20]	; (d6c <CAN_0_init+0x2c>)
     d58:	4805      	ldr	r0, [pc, #20]	; (d70 <CAN_0_init+0x30>)
     d5a:	4b06      	ldr	r3, [pc, #24]	; (d74 <CAN_0_init+0x34>)
     d5c:	4798      	blx	r3
	CAN_0_PORT_init();
     d5e:	4b06      	ldr	r3, [pc, #24]	; (d78 <CAN_0_init+0x38>)
     d60:	4798      	blx	r3
}
     d62:	bd10      	pop	{r4, pc}
     d64:	40000800 	.word	0x40000800
     d68:	40001c00 	.word	0x40001c00
     d6c:	42001c00 	.word	0x42001c00
     d70:	2000024c 	.word	0x2000024c
     d74:	00000e39 	.word	0x00000e39
     d78:	00000cfd 	.word	0x00000cfd

00000d7c <system_init>:

void system_init(void)
{
     d7c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     d7e:	4b16      	ldr	r3, [pc, #88]	; (dd8 <system_init+0x5c>)
     d80:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d82:	22c0      	movs	r2, #192	; 0xc0
     d84:	05d2      	lsls	r2, r2, #23
     d86:	2380      	movs	r3, #128	; 0x80
     d88:	021b      	lsls	r3, r3, #8
     d8a:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d8c:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d8e:	2382      	movs	r3, #130	; 0x82
     d90:	05db      	lsls	r3, r3, #23
     d92:	4912      	ldr	r1, [pc, #72]	; (ddc <system_init+0x60>)
     d94:	6299      	str	r1, [r3, #40]	; 0x28
     d96:	21c0      	movs	r1, #192	; 0xc0
     d98:	0609      	lsls	r1, r1, #24
     d9a:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d9c:	244f      	movs	r4, #79	; 0x4f
     d9e:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     da0:	2001      	movs	r0, #1
     da2:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     da4:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     da6:	2180      	movs	r1, #128	; 0x80
     da8:	0289      	lsls	r1, r1, #10
     daa:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dac:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dae:	2280      	movs	r2, #128	; 0x80
     db0:	05d2      	lsls	r2, r2, #23
     db2:	629a      	str	r2, [r3, #40]	; 0x28
     db4:	4a0a      	ldr	r2, [pc, #40]	; (de0 <system_init+0x64>)
     db6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     db8:	2151      	movs	r1, #81	; 0x51
     dba:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     dbc:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dbe:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(CS, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CS, GPIO_PIN_FUNCTION_OFF);

	TIMER_0_init();
     dc0:	4b08      	ldr	r3, [pc, #32]	; (de4 <system_init+0x68>)
     dc2:	4798      	blx	r3

	TARGET_IO_init();
     dc4:	4b08      	ldr	r3, [pc, #32]	; (de8 <system_init+0x6c>)
     dc6:	4798      	blx	r3

	SPI_0_init();
     dc8:	4b08      	ldr	r3, [pc, #32]	; (dec <system_init+0x70>)
     dca:	4798      	blx	r3

	delay_driver_init();
     dcc:	4b08      	ldr	r3, [pc, #32]	; (df0 <system_init+0x74>)
     dce:	4798      	blx	r3
	CAN_0_init();
     dd0:	4b08      	ldr	r3, [pc, #32]	; (df4 <system_init+0x78>)
     dd2:	4798      	blx	r3
}
     dd4:	bd10      	pop	{r4, pc}
     dd6:	46c0      	nop			; (mov r8, r8)
     dd8:	00001871 	.word	0x00001871
     ddc:	40008000 	.word	0x40008000
     de0:	c0000002 	.word	0xc0000002
     de4:	00000b1d 	.word	0x00000b1d
     de8:	00000bb9 	.word	0x00000bb9
     dec:	00000cc1 	.word	0x00000cc1
     df0:	00000ce9 	.word	0x00000ce9
     df4:	00000d41 	.word	0x00000d41

00000df8 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     df8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     dfc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     dfe:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     e00:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     e04:	4770      	bx	lr

00000e06 <atomic_leave_critical>:
     e06:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     e0a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     e0c:	f383 8810 	msr	PRIMASK, r3
}
     e10:	4770      	bx	lr

00000e12 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     e12:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
     e14:	69c3      	ldr	r3, [r0, #28]
     e16:	2b00      	cmp	r3, #0
     e18:	d000      	beq.n	e1c <can_tx_done+0xa>
		descr->cb.tx_done(descr);
     e1a:	4798      	blx	r3
	}
}
     e1c:	bd10      	pop	{r4, pc}

00000e1e <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
     e1e:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
     e20:	6a03      	ldr	r3, [r0, #32]
     e22:	2b00      	cmp	r3, #0
     e24:	d000      	beq.n	e28 <can_rx_done+0xa>
		descr->cb.rx_done(descr);
     e26:	4798      	blx	r3
	}
}
     e28:	bd10      	pop	{r4, pc}

00000e2a <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
     e2a:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
     e2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
     e2e:	2b00      	cmp	r3, #0
     e30:	d000      	beq.n	e34 <can_irq_handler+0xa>
		descr->cb.irq_handler(descr, type);
     e32:	4798      	blx	r3
	}
}
     e34:	bd10      	pop	{r4, pc}
	...

00000e38 <can_async_init>:
{
     e38:	b570      	push	{r4, r5, r6, lr}
     e3a:	0004      	movs	r4, r0
     e3c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     e3e:	2800      	cmp	r0, #0
     e40:	d015      	beq.n	e6e <can_async_init+0x36>
     e42:	2900      	cmp	r1, #0
     e44:	d011      	beq.n	e6a <can_async_init+0x32>
     e46:	2001      	movs	r0, #1
     e48:	2241      	movs	r2, #65	; 0x41
     e4a:	490a      	ldr	r1, [pc, #40]	; (e74 <can_async_init+0x3c>)
     e4c:	4b0a      	ldr	r3, [pc, #40]	; (e78 <can_async_init+0x40>)
     e4e:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
     e50:	0029      	movs	r1, r5
     e52:	0020      	movs	r0, r4
     e54:	4b09      	ldr	r3, [pc, #36]	; (e7c <can_async_init+0x44>)
     e56:	4798      	blx	r3
	if (rc) {
     e58:	2800      	cmp	r0, #0
     e5a:	d105      	bne.n	e68 <can_async_init+0x30>
	descr->dev.cb.tx_done     = can_tx_done;
     e5c:	4b08      	ldr	r3, [pc, #32]	; (e80 <can_async_init+0x48>)
     e5e:	6063      	str	r3, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
     e60:	4b08      	ldr	r3, [pc, #32]	; (e84 <can_async_init+0x4c>)
     e62:	60a3      	str	r3, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
     e64:	4b08      	ldr	r3, [pc, #32]	; (e88 <can_async_init+0x50>)
     e66:	60e3      	str	r3, [r4, #12]
}
     e68:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     e6a:	2000      	movs	r0, #0
     e6c:	e7ec      	b.n	e48 <can_async_init+0x10>
     e6e:	2000      	movs	r0, #0
     e70:	e7ea      	b.n	e48 <can_async_init+0x10>
     e72:	46c0      	nop			; (mov r8, r8)
     e74:	00004424 	.word	0x00004424
     e78:	000014a1 	.word	0x000014a1
     e7c:	00001541 	.word	0x00001541
     e80:	00000e13 	.word	0x00000e13
     e84:	00000e1f 	.word	0x00000e1f
     e88:	00000e2b 	.word	0x00000e2b

00000e8c <can_async_read>:
{
     e8c:	b570      	push	{r4, r5, r6, lr}
     e8e:	0004      	movs	r4, r0
     e90:	000d      	movs	r5, r1
	ASSERT(descr && msg);
     e92:	2800      	cmp	r0, #0
     e94:	d00d      	beq.n	eb2 <can_async_read+0x26>
     e96:	2900      	cmp	r1, #0
     e98:	d009      	beq.n	eae <can_async_read+0x22>
     e9a:	2001      	movs	r0, #1
     e9c:	226e      	movs	r2, #110	; 0x6e
     e9e:	4906      	ldr	r1, [pc, #24]	; (eb8 <can_async_read+0x2c>)
     ea0:	4b06      	ldr	r3, [pc, #24]	; (ebc <can_async_read+0x30>)
     ea2:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
     ea4:	0029      	movs	r1, r5
     ea6:	0020      	movs	r0, r4
     ea8:	4b05      	ldr	r3, [pc, #20]	; (ec0 <can_async_read+0x34>)
     eaa:	4798      	blx	r3
}
     eac:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && msg);
     eae:	2000      	movs	r0, #0
     eb0:	e7f4      	b.n	e9c <can_async_read+0x10>
     eb2:	2000      	movs	r0, #0
     eb4:	e7f2      	b.n	e9c <can_async_read+0x10>
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	00004424 	.word	0x00004424
     ebc:	000014a1 	.word	0x000014a1
     ec0:	0000165d 	.word	0x0000165d

00000ec4 <can_async_register_callback>:
{
     ec4:	b570      	push	{r4, r5, r6, lr}
     ec6:	0006      	movs	r6, r0
     ec8:	000d      	movs	r5, r1
     eca:	0014      	movs	r4, r2
	ASSERT(descr);
     ecc:	1e43      	subs	r3, r0, #1
     ece:	4198      	sbcs	r0, r3
     ed0:	b2c0      	uxtb	r0, r0
     ed2:	2281      	movs	r2, #129	; 0x81
     ed4:	490c      	ldr	r1, [pc, #48]	; (f08 <can_async_register_callback+0x44>)
     ed6:	4b0d      	ldr	r3, [pc, #52]	; (f0c <can_async_register_callback+0x48>)
     ed8:	4798      	blx	r3
	switch (type) {
     eda:	2d01      	cmp	r5, #1
     edc:	d010      	beq.n	f00 <can_async_register_callback+0x3c>
     ede:	2d00      	cmp	r5, #0
     ee0:	d004      	beq.n	eec <can_async_register_callback+0x28>
     ee2:	2d02      	cmp	r5, #2
     ee4:	d00e      	beq.n	f04 <can_async_register_callback+0x40>
		return ERR_INVALID_ARG;
     ee6:	200d      	movs	r0, #13
     ee8:	4240      	negs	r0, r0
     eea:	e008      	b.n	efe <can_async_register_callback+0x3a>
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
     eec:	6234      	str	r4, [r6, #32]
	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
     eee:	1e62      	subs	r2, r4, #1
     ef0:	4194      	sbcs	r4, r2
     ef2:	b2e2      	uxtb	r2, r4
     ef4:	0029      	movs	r1, r5
     ef6:	0030      	movs	r0, r6
     ef8:	4b05      	ldr	r3, [pc, #20]	; (f10 <can_async_register_callback+0x4c>)
     efa:	4798      	blx	r3
	return ERR_NONE;
     efc:	2000      	movs	r0, #0
}
     efe:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
     f00:	61f4      	str	r4, [r6, #28]
		break;
     f02:	e7f4      	b.n	eee <can_async_register_callback+0x2a>
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
     f04:	6274      	str	r4, [r6, #36]	; 0x24
		break;
     f06:	e7f2      	b.n	eee <can_async_register_callback+0x2a>
     f08:	00004424 	.word	0x00004424
     f0c:	000014a1 	.word	0x000014a1
     f10:	0000171d 	.word	0x0000171d

00000f14 <can_async_set_filter>:
{
     f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f16:	0004      	movs	r4, r0
     f18:	000d      	movs	r5, r1
     f1a:	0016      	movs	r6, r2
     f1c:	001f      	movs	r7, r3
	ASSERT(descr);
     f1e:	1e43      	subs	r3, r0, #1
     f20:	4198      	sbcs	r0, r3
     f22:	b2c0      	uxtb	r0, r0
     f24:	22b8      	movs	r2, #184	; 0xb8
     f26:	4905      	ldr	r1, [pc, #20]	; (f3c <can_async_set_filter+0x28>)
     f28:	4b05      	ldr	r3, [pc, #20]	; (f40 <can_async_set_filter+0x2c>)
     f2a:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
     f2c:	003b      	movs	r3, r7
     f2e:	0032      	movs	r2, r6
     f30:	0029      	movs	r1, r5
     f32:	0020      	movs	r0, r4
     f34:	4c03      	ldr	r4, [pc, #12]	; (f44 <can_async_set_filter+0x30>)
     f36:	47a0      	blx	r4
}
     f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	00004424 	.word	0x00004424
     f40:	000014a1 	.word	0x000014a1
     f44:	00001769 	.word	0x00001769

00000f48 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     f48:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     f4a:	4b02      	ldr	r3, [pc, #8]	; (f54 <delay_init+0xc>)
     f4c:	6018      	str	r0, [r3, #0]
     f4e:	4b02      	ldr	r3, [pc, #8]	; (f58 <delay_init+0x10>)
     f50:	4798      	blx	r3
}
     f52:	bd10      	pop	{r4, pc}
     f54:	20000098 	.word	0x20000098
     f58:	0000208d 	.word	0x0000208d

00000f5c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     f5c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     f5e:	4b04      	ldr	r3, [pc, #16]	; (f70 <delay_ms+0x14>)
     f60:	681c      	ldr	r4, [r3, #0]
     f62:	4b04      	ldr	r3, [pc, #16]	; (f74 <delay_ms+0x18>)
     f64:	4798      	blx	r3
     f66:	0001      	movs	r1, r0
     f68:	0020      	movs	r0, r4
     f6a:	4b03      	ldr	r3, [pc, #12]	; (f78 <delay_ms+0x1c>)
     f6c:	4798      	blx	r3
}
     f6e:	bd10      	pop	{r4, pc}
     f70:	20000098 	.word	0x20000098
     f74:	00001865 	.word	0x00001865
     f78:	00002099 	.word	0x00002099

00000f7c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     f7c:	b570      	push	{r4, r5, r6, lr}
     f7e:	0004      	movs	r4, r0
     f80:	000d      	movs	r5, r1
     f82:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     f84:	2800      	cmp	r0, #0
     f86:	d00e      	beq.n	fa6 <io_write+0x2a>
     f88:	2900      	cmp	r1, #0
     f8a:	d00a      	beq.n	fa2 <io_write+0x26>
     f8c:	2001      	movs	r0, #1
     f8e:	2234      	movs	r2, #52	; 0x34
     f90:	4906      	ldr	r1, [pc, #24]	; (fac <io_write+0x30>)
     f92:	4b07      	ldr	r3, [pc, #28]	; (fb0 <io_write+0x34>)
     f94:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     f96:	6823      	ldr	r3, [r4, #0]
     f98:	0032      	movs	r2, r6
     f9a:	0029      	movs	r1, r5
     f9c:	0020      	movs	r0, r4
     f9e:	4798      	blx	r3
}
     fa0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     fa2:	2000      	movs	r0, #0
     fa4:	e7f3      	b.n	f8e <io_write+0x12>
     fa6:	2000      	movs	r0, #0
     fa8:	e7f1      	b.n	f8e <io_write+0x12>
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	00004440 	.word	0x00004440
     fb0:	000014a1 	.word	0x000014a1

00000fb4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     fb4:	b570      	push	{r4, r5, r6, lr}
     fb6:	0004      	movs	r4, r0
     fb8:	000d      	movs	r5, r1
     fba:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     fbc:	2800      	cmp	r0, #0
     fbe:	d00e      	beq.n	fde <io_read+0x2a>
     fc0:	2900      	cmp	r1, #0
     fc2:	d00a      	beq.n	fda <io_read+0x26>
     fc4:	2001      	movs	r0, #1
     fc6:	223d      	movs	r2, #61	; 0x3d
     fc8:	4906      	ldr	r1, [pc, #24]	; (fe4 <io_read+0x30>)
     fca:	4b07      	ldr	r3, [pc, #28]	; (fe8 <io_read+0x34>)
     fcc:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     fce:	6863      	ldr	r3, [r4, #4]
     fd0:	0032      	movs	r2, r6
     fd2:	0029      	movs	r1, r5
     fd4:	0020      	movs	r0, r4
     fd6:	4798      	blx	r3
}
     fd8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     fda:	2000      	movs	r0, #0
     fdc:	e7f3      	b.n	fc6 <io_read+0x12>
     fde:	2000      	movs	r0, #0
     fe0:	e7f1      	b.n	fc6 <io_read+0x12>
     fe2:	46c0      	nop			; (mov r8, r8)
     fe4:	00004440 	.word	0x00004440
     fe8:	000014a1 	.word	0x000014a1

00000fec <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     fec:	b570      	push	{r4, r5, r6, lr}
     fee:	0004      	movs	r4, r0
     ff0:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     ff2:	2800      	cmp	r0, #0
     ff4:	d017      	beq.n	1026 <spi_m_sync_init+0x3a>
     ff6:	2900      	cmp	r1, #0
     ff8:	d013      	beq.n	1022 <spi_m_sync_init+0x36>
     ffa:	2001      	movs	r0, #1
     ffc:	2240      	movs	r2, #64	; 0x40
     ffe:	490b      	ldr	r1, [pc, #44]	; (102c <spi_m_sync_init+0x40>)
    1000:	4b0b      	ldr	r3, [pc, #44]	; (1030 <spi_m_sync_init+0x44>)
    1002:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1004:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1006:	1d20      	adds	r0, r4, #4
    1008:	0029      	movs	r1, r5
    100a:	4b0a      	ldr	r3, [pc, #40]	; (1034 <spi_m_sync_init+0x48>)
    100c:	4798      	blx	r3

	if (rc < 0) {
    100e:	2800      	cmp	r0, #0
    1010:	db06      	blt.n	1020 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    1012:	4b09      	ldr	r3, [pc, #36]	; (1038 <spi_m_sync_init+0x4c>)
    1014:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1016:	4b09      	ldr	r3, [pc, #36]	; (103c <spi_m_sync_init+0x50>)
    1018:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    101a:	4b09      	ldr	r3, [pc, #36]	; (1040 <spi_m_sync_init+0x54>)
    101c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    101e:	2000      	movs	r0, #0
}
    1020:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
    1022:	2000      	movs	r0, #0
    1024:	e7ea      	b.n	ffc <spi_m_sync_init+0x10>
    1026:	2000      	movs	r0, #0
    1028:	e7e8      	b.n	ffc <spi_m_sync_init+0x10>
    102a:	46c0      	nop			; (mov r8, r8)
    102c:	00004454 	.word	0x00004454
    1030:	000014a1 	.word	0x000014a1
    1034:	00001d35 	.word	0x00001d35
    1038:	ffff8000 	.word	0xffff8000
    103c:	000010f1 	.word	0x000010f1
    1040:	000010b5 	.word	0x000010b5

00001044 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    1044:	b510      	push	{r4, lr}
    1046:	0004      	movs	r4, r0
	ASSERT(spi);
    1048:	1e43      	subs	r3, r0, #1
    104a:	4198      	sbcs	r0, r3
    104c:	b2c0      	uxtb	r0, r0
    104e:	2257      	movs	r2, #87	; 0x57
    1050:	4903      	ldr	r1, [pc, #12]	; (1060 <spi_m_sync_enable+0x1c>)
    1052:	4b04      	ldr	r3, [pc, #16]	; (1064 <spi_m_sync_enable+0x20>)
    1054:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    1056:	1d20      	adds	r0, r4, #4
    1058:	4b03      	ldr	r3, [pc, #12]	; (1068 <spi_m_sync_enable+0x24>)
    105a:	4798      	blx	r3
}
    105c:	bd10      	pop	{r4, pc}
    105e:	46c0      	nop			; (mov r8, r8)
    1060:	00004454 	.word	0x00004454
    1064:	000014a1 	.word	0x000014a1
    1068:	00001f31 	.word	0x00001f31

0000106c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    106c:	b530      	push	{r4, r5, lr}
    106e:	b087      	sub	sp, #28
    1070:	0004      	movs	r4, r0
    1072:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1074:	2800      	cmp	r0, #0
    1076:	d015      	beq.n	10a4 <spi_m_sync_transfer+0x38>
    1078:	2900      	cmp	r1, #0
    107a:	d011      	beq.n	10a0 <spi_m_sync_transfer+0x34>
    107c:	2001      	movs	r0, #1
    107e:	22b3      	movs	r2, #179	; 0xb3
    1080:	4909      	ldr	r1, [pc, #36]	; (10a8 <spi_m_sync_transfer+0x3c>)
    1082:	4b0a      	ldr	r3, [pc, #40]	; (10ac <spi_m_sync_transfer+0x40>)
    1084:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1086:	682b      	ldr	r3, [r5, #0]
    1088:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    108a:	686b      	ldr	r3, [r5, #4]
    108c:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    108e:	68ab      	ldr	r3, [r5, #8]
    1090:	9301      	str	r3, [sp, #4]
    1092:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1094:	1d20      	adds	r0, r4, #4
    1096:	a903      	add	r1, sp, #12
    1098:	4b05      	ldr	r3, [pc, #20]	; (10b0 <spi_m_sync_transfer+0x44>)
    109a:	4798      	blx	r3
}
    109c:	b007      	add	sp, #28
    109e:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
    10a0:	2000      	movs	r0, #0
    10a2:	e7ec      	b.n	107e <spi_m_sync_transfer+0x12>
    10a4:	2000      	movs	r0, #0
    10a6:	e7ea      	b.n	107e <spi_m_sync_transfer+0x12>
    10a8:	00004454 	.word	0x00004454
    10ac:	000014a1 	.word	0x000014a1
    10b0:	00001f65 	.word	0x00001f65

000010b4 <_spi_m_sync_io_write>:
{
    10b4:	b570      	push	{r4, r5, r6, lr}
    10b6:	b084      	sub	sp, #16
    10b8:	0004      	movs	r4, r0
    10ba:	000e      	movs	r6, r1
    10bc:	0015      	movs	r5, r2
	ASSERT(io);
    10be:	1e43      	subs	r3, r0, #1
    10c0:	4198      	sbcs	r0, r3
    10c2:	b2c0      	uxtb	r0, r0
    10c4:	22a3      	movs	r2, #163	; 0xa3
    10c6:	4907      	ldr	r1, [pc, #28]	; (10e4 <_spi_m_sync_io_write+0x30>)
    10c8:	4b07      	ldr	r3, [pc, #28]	; (10e8 <_spi_m_sync_io_write+0x34>)
    10ca:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    10cc:	0020      	movs	r0, r4
    10ce:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
    10d0:	2300      	movs	r3, #0
    10d2:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    10d4:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    10d6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    10d8:	a901      	add	r1, sp, #4
    10da:	4b04      	ldr	r3, [pc, #16]	; (10ec <_spi_m_sync_io_write+0x38>)
    10dc:	4798      	blx	r3
}
    10de:	b004      	add	sp, #16
    10e0:	bd70      	pop	{r4, r5, r6, pc}
    10e2:	46c0      	nop			; (mov r8, r8)
    10e4:	00004454 	.word	0x00004454
    10e8:	000014a1 	.word	0x000014a1
    10ec:	0000106d 	.word	0x0000106d

000010f0 <_spi_m_sync_io_read>:
{
    10f0:	b570      	push	{r4, r5, r6, lr}
    10f2:	b084      	sub	sp, #16
    10f4:	0004      	movs	r4, r0
    10f6:	000e      	movs	r6, r1
    10f8:	0015      	movs	r5, r2
	ASSERT(io);
    10fa:	1e43      	subs	r3, r0, #1
    10fc:	4198      	sbcs	r0, r3
    10fe:	b2c0      	uxtb	r0, r0
    1100:	2287      	movs	r2, #135	; 0x87
    1102:	4907      	ldr	r1, [pc, #28]	; (1120 <_spi_m_sync_io_read+0x30>)
    1104:	4b07      	ldr	r3, [pc, #28]	; (1124 <_spi_m_sync_io_read+0x34>)
    1106:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1108:	0020      	movs	r0, r4
    110a:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
    110c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    110e:	2300      	movs	r3, #0
    1110:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    1112:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1114:	a901      	add	r1, sp, #4
    1116:	4b04      	ldr	r3, [pc, #16]	; (1128 <_spi_m_sync_io_read+0x38>)
    1118:	4798      	blx	r3
}
    111a:	b004      	add	sp, #16
    111c:	bd70      	pop	{r4, r5, r6, pc}
    111e:	46c0      	nop			; (mov r8, r8)
    1120:	00004454 	.word	0x00004454
    1124:	000014a1 	.word	0x000014a1
    1128:	0000106d 	.word	0x0000106d

0000112c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    112c:	b570      	push	{r4, r5, r6, lr}
    112e:	0004      	movs	r4, r0
    1130:	000d      	movs	r5, r1
	ASSERT(spi && io);
    1132:	2800      	cmp	r0, #0
    1134:	d00c      	beq.n	1150 <spi_m_sync_get_io_descriptor+0x24>
    1136:	2900      	cmp	r1, #0
    1138:	d008      	beq.n	114c <spi_m_sync_get_io_descriptor+0x20>
    113a:	2001      	movs	r0, #1
    113c:	22bd      	movs	r2, #189	; 0xbd
    113e:	4905      	ldr	r1, [pc, #20]	; (1154 <spi_m_sync_get_io_descriptor+0x28>)
    1140:	4b05      	ldr	r3, [pc, #20]	; (1158 <spi_m_sync_get_io_descriptor+0x2c>)
    1142:	4798      	blx	r3
	*io = &spi->io;
    1144:	340c      	adds	r4, #12
    1146:	602c      	str	r4, [r5, #0]
	return 0;
}
    1148:	2000      	movs	r0, #0
    114a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && io);
    114c:	2000      	movs	r0, #0
    114e:	e7f5      	b.n	113c <spi_m_sync_get_io_descriptor+0x10>
    1150:	2000      	movs	r0, #0
    1152:	e7f3      	b.n	113c <spi_m_sync_get_io_descriptor+0x10>
    1154:	00004454 	.word	0x00004454
    1158:	000014a1 	.word	0x000014a1

0000115c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    115e:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1160:	2e00      	cmp	r6, #0
    1162:	d002      	beq.n	116a <timer_add_timer_task+0xe>
    1164:	0033      	movs	r3, r6
    1166:	2500      	movs	r5, #0
    1168:	e00c      	b.n	1184 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    116a:	4b10      	ldr	r3, [pc, #64]	; (11ac <timer_add_timer_task+0x50>)
    116c:	4798      	blx	r3
		return;
    116e:	e018      	b.n	11a2 <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1170:	689f      	ldr	r7, [r3, #8]
    1172:	46bc      	mov	ip, r7
    1174:	4464      	add	r4, ip
    1176:	1aa4      	subs	r4, r4, r2
    1178:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
    117a:	688f      	ldr	r7, [r1, #8]
    117c:	42bc      	cmp	r4, r7
    117e:	d20b      	bcs.n	1198 <timer_add_timer_task+0x3c>
			break;
		prev = it;
    1180:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1182:	681b      	ldr	r3, [r3, #0]
    1184:	2b00      	cmp	r3, #0
    1186:	d007      	beq.n	1198 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
    1188:	685c      	ldr	r4, [r3, #4]
    118a:	4294      	cmp	r4, r2
    118c:	d8f0      	bhi.n	1170 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
    118e:	1aa4      	subs	r4, r4, r2
    1190:	689f      	ldr	r7, [r3, #8]
    1192:	46bc      	mov	ip, r7
    1194:	4464      	add	r4, ip
    1196:	e7f0      	b.n	117a <timer_add_timer_task+0x1e>
	}

	if (it == head) {
    1198:	42b3      	cmp	r3, r6
    119a:	d003      	beq.n	11a4 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    119c:	0028      	movs	r0, r5
    119e:	4b04      	ldr	r3, [pc, #16]	; (11b0 <timer_add_timer_task+0x54>)
    11a0:	4798      	blx	r3
	}
}
    11a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    11a4:	4b01      	ldr	r3, [pc, #4]	; (11ac <timer_add_timer_task+0x50>)
    11a6:	4798      	blx	r3
    11a8:	e7fb      	b.n	11a2 <timer_add_timer_task+0x46>
    11aa:	46c0      	nop			; (mov r8, r8)
    11ac:	000014c1 	.word	0x000014c1
    11b0:	000014ed 	.word	0x000014ed

000011b4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    11b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11b6:	0005      	movs	r5, r0
    11b8:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    11ba:	6903      	ldr	r3, [r0, #16]
    11bc:	1c5e      	adds	r6, r3, #1
    11be:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    11c0:	7e03      	ldrb	r3, [r0, #24]
    11c2:	07db      	lsls	r3, r3, #31
    11c4:	d402      	bmi.n	11cc <timer_process_counted+0x18>
    11c6:	7e03      	ldrb	r3, [r0, #24]
    11c8:	079b      	lsls	r3, r3, #30
    11ca:	d50a      	bpl.n	11e2 <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    11cc:	7e2b      	ldrb	r3, [r5, #24]
    11ce:	2202      	movs	r2, #2
    11d0:	4313      	orrs	r3, r2
    11d2:	b2db      	uxtb	r3, r3
    11d4:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    11d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11d8:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
    11da:	68e3      	ldr	r3, [r4, #12]
    11dc:	0020      	movs	r0, r4
    11de:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    11e0:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    11e2:	2c00      	cmp	r4, #0
    11e4:	d0f7      	beq.n	11d6 <timer_process_counted+0x22>
    11e6:	6863      	ldr	r3, [r4, #4]
    11e8:	1af3      	subs	r3, r6, r3
    11ea:	68a2      	ldr	r2, [r4, #8]
    11ec:	4293      	cmp	r3, r2
    11ee:	d3f2      	bcc.n	11d6 <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
    11f0:	002f      	movs	r7, r5
    11f2:	3714      	adds	r7, #20
    11f4:	0038      	movs	r0, r7
    11f6:	4b06      	ldr	r3, [pc, #24]	; (1210 <timer_process_counted+0x5c>)
    11f8:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    11fa:	7c23      	ldrb	r3, [r4, #16]
    11fc:	2b01      	cmp	r3, #1
    11fe:	d1eb      	bne.n	11d8 <timer_process_counted+0x24>
			tmp->time_label = time;
    1200:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1202:	0032      	movs	r2, r6
    1204:	0021      	movs	r1, r4
    1206:	0038      	movs	r0, r7
    1208:	4b02      	ldr	r3, [pc, #8]	; (1214 <timer_process_counted+0x60>)
    120a:	4798      	blx	r3
    120c:	e7e4      	b.n	11d8 <timer_process_counted+0x24>
    120e:	46c0      	nop			; (mov r8, r8)
    1210:	000014f5 	.word	0x000014f5
    1214:	0000115d 	.word	0x0000115d

00001218 <timer_init>:
{
    1218:	b570      	push	{r4, r5, r6, lr}
    121a:	0004      	movs	r4, r0
    121c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    121e:	2800      	cmp	r0, #0
    1220:	d012      	beq.n	1248 <timer_init+0x30>
    1222:	2900      	cmp	r1, #0
    1224:	d00e      	beq.n	1244 <timer_init+0x2c>
    1226:	2001      	movs	r0, #1
    1228:	223b      	movs	r2, #59	; 0x3b
    122a:	4908      	ldr	r1, [pc, #32]	; (124c <timer_init+0x34>)
    122c:	4b08      	ldr	r3, [pc, #32]	; (1250 <timer_init+0x38>)
    122e:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1230:	0029      	movs	r1, r5
    1232:	0020      	movs	r0, r4
    1234:	4b07      	ldr	r3, [pc, #28]	; (1254 <timer_init+0x3c>)
    1236:	4798      	blx	r3
	descr->time                           = 0;
    1238:	2300      	movs	r3, #0
    123a:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    123c:	4b06      	ldr	r3, [pc, #24]	; (1258 <timer_init+0x40>)
    123e:	6023      	str	r3, [r4, #0]
}
    1240:	2000      	movs	r0, #0
    1242:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
    1244:	2000      	movs	r0, #0
    1246:	e7ef      	b.n	1228 <timer_init+0x10>
    1248:	2000      	movs	r0, #0
    124a:	e7ed      	b.n	1228 <timer_init+0x10>
    124c:	00004470 	.word	0x00004470
    1250:	000014a1 	.word	0x000014a1
    1254:	00001a69 	.word	0x00001a69
    1258:	000011b5 	.word	0x000011b5

0000125c <timer_start>:
{
    125c:	b510      	push	{r4, lr}
    125e:	0004      	movs	r4, r0
	ASSERT(descr);
    1260:	1e43      	subs	r3, r0, #1
    1262:	4198      	sbcs	r0, r3
    1264:	b2c0      	uxtb	r0, r0
    1266:	2253      	movs	r2, #83	; 0x53
    1268:	4907      	ldr	r1, [pc, #28]	; (1288 <timer_start+0x2c>)
    126a:	4b08      	ldr	r3, [pc, #32]	; (128c <timer_start+0x30>)
    126c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    126e:	0020      	movs	r0, r4
    1270:	4b07      	ldr	r3, [pc, #28]	; (1290 <timer_start+0x34>)
    1272:	4798      	blx	r3
    1274:	2800      	cmp	r0, #0
    1276:	d104      	bne.n	1282 <timer_start+0x26>
	_timer_start(&descr->device);
    1278:	0020      	movs	r0, r4
    127a:	4b06      	ldr	r3, [pc, #24]	; (1294 <timer_start+0x38>)
    127c:	4798      	blx	r3
	return ERR_NONE;
    127e:	2000      	movs	r0, #0
}
    1280:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1282:	2011      	movs	r0, #17
    1284:	4240      	negs	r0, r0
    1286:	e7fb      	b.n	1280 <timer_start+0x24>
    1288:	00004470 	.word	0x00004470
    128c:	000014a1 	.word	0x000014a1
    1290:	00001b2d 	.word	0x00001b2d
    1294:	00001ad1 	.word	0x00001ad1

00001298 <timer_add_task>:
{
    1298:	b570      	push	{r4, r5, r6, lr}
    129a:	b082      	sub	sp, #8
    129c:	0004      	movs	r4, r0
    129e:	000d      	movs	r5, r1
	ASSERT(descr && task);
    12a0:	2800      	cmp	r0, #0
    12a2:	d026      	beq.n	12f2 <timer_add_task+0x5a>
    12a4:	2900      	cmp	r1, #0
    12a6:	d022      	beq.n	12ee <timer_add_task+0x56>
    12a8:	2001      	movs	r0, #1
    12aa:	227a      	movs	r2, #122	; 0x7a
    12ac:	491f      	ldr	r1, [pc, #124]	; (132c <timer_add_task+0x94>)
    12ae:	4b20      	ldr	r3, [pc, #128]	; (1330 <timer_add_task+0x98>)
    12b0:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    12b2:	7e23      	ldrb	r3, [r4, #24]
    12b4:	2201      	movs	r2, #1
    12b6:	4313      	orrs	r3, r2
    12b8:	b2db      	uxtb	r3, r3
    12ba:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    12bc:	0026      	movs	r6, r4
    12be:	3614      	adds	r6, #20
    12c0:	0029      	movs	r1, r5
    12c2:	0030      	movs	r0, r6
    12c4:	4b1b      	ldr	r3, [pc, #108]	; (1334 <timer_add_task+0x9c>)
    12c6:	4798      	blx	r3
    12c8:	2800      	cmp	r0, #0
    12ca:	d114      	bne.n	12f6 <timer_add_task+0x5e>
	task->time_label = descr->time;
    12cc:	6923      	ldr	r3, [r4, #16]
    12ce:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    12d0:	6922      	ldr	r2, [r4, #16]
    12d2:	0029      	movs	r1, r5
    12d4:	0030      	movs	r0, r6
    12d6:	4b18      	ldr	r3, [pc, #96]	; (1338 <timer_add_task+0xa0>)
    12d8:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    12da:	7e23      	ldrb	r3, [r4, #24]
    12dc:	2201      	movs	r2, #1
    12de:	4393      	bics	r3, r2
    12e0:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    12e2:	7e23      	ldrb	r3, [r4, #24]
    12e4:	079b      	lsls	r3, r3, #30
    12e6:	d412      	bmi.n	130e <timer_add_task+0x76>
	return ERR_NONE;
    12e8:	2000      	movs	r0, #0
}
    12ea:	b002      	add	sp, #8
    12ec:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    12ee:	2000      	movs	r0, #0
    12f0:	e7db      	b.n	12aa <timer_add_task+0x12>
    12f2:	2000      	movs	r0, #0
    12f4:	e7d9      	b.n	12aa <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    12f6:	7e23      	ldrb	r3, [r4, #24]
    12f8:	2201      	movs	r2, #1
    12fa:	4393      	bics	r3, r2
    12fc:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    12fe:	327e      	adds	r2, #126	; 0x7e
    1300:	490a      	ldr	r1, [pc, #40]	; (132c <timer_add_task+0x94>)
    1302:	2000      	movs	r0, #0
    1304:	4b0a      	ldr	r3, [pc, #40]	; (1330 <timer_add_task+0x98>)
    1306:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    1308:	2012      	movs	r0, #18
    130a:	4240      	negs	r0, r0
    130c:	e7ed      	b.n	12ea <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    130e:	a801      	add	r0, sp, #4
    1310:	4b0a      	ldr	r3, [pc, #40]	; (133c <timer_add_task+0xa4>)
    1312:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1314:	7e23      	ldrb	r3, [r4, #24]
    1316:	2202      	movs	r2, #2
    1318:	4393      	bics	r3, r2
    131a:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    131c:	0020      	movs	r0, r4
    131e:	4b08      	ldr	r3, [pc, #32]	; (1340 <timer_add_task+0xa8>)
    1320:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1322:	a801      	add	r0, sp, #4
    1324:	4b07      	ldr	r3, [pc, #28]	; (1344 <timer_add_task+0xac>)
    1326:	4798      	blx	r3
	return ERR_NONE;
    1328:	2000      	movs	r0, #0
    132a:	e7de      	b.n	12ea <timer_add_task+0x52>
    132c:	00004470 	.word	0x00004470
    1330:	000014a1 	.word	0x000014a1
    1334:	000014a9 	.word	0x000014a9
    1338:	0000115d 	.word	0x0000115d
    133c:	00000df9 	.word	0x00000df9
    1340:	00001b45 	.word	0x00001b45
    1344:	00000e07 	.word	0x00000e07

00001348 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    134a:	0005      	movs	r5, r0
    134c:	000e      	movs	r6, r1
    134e:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    1350:	2800      	cmp	r0, #0
    1352:	d023      	beq.n	139c <usart_sync_write+0x54>
    1354:	2900      	cmp	r1, #0
    1356:	d023      	beq.n	13a0 <usart_sync_write+0x58>
    1358:	2a00      	cmp	r2, #0
    135a:	d123      	bne.n	13a4 <usart_sync_write+0x5c>
    135c:	2000      	movs	r0, #0
    135e:	22f1      	movs	r2, #241	; 0xf1
    1360:	4911      	ldr	r1, [pc, #68]	; (13a8 <usart_sync_write+0x60>)
    1362:	4b12      	ldr	r3, [pc, #72]	; (13ac <usart_sync_write+0x64>)
    1364:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    1366:	002c      	movs	r4, r5
    1368:	3408      	adds	r4, #8
    136a:	0020      	movs	r0, r4
    136c:	4b10      	ldr	r3, [pc, #64]	; (13b0 <usart_sync_write+0x68>)
    136e:	4798      	blx	r3
    1370:	2800      	cmp	r0, #0
    1372:	d0f8      	beq.n	1366 <usart_sync_write+0x1e>
    1374:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1376:	5d71      	ldrb	r1, [r6, r5]
    1378:	0020      	movs	r0, r4
    137a:	4b0e      	ldr	r3, [pc, #56]	; (13b4 <usart_sync_write+0x6c>)
    137c:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    137e:	0020      	movs	r0, r4
    1380:	4b0b      	ldr	r3, [pc, #44]	; (13b0 <usart_sync_write+0x68>)
    1382:	4798      	blx	r3
    1384:	2800      	cmp	r0, #0
    1386:	d0fa      	beq.n	137e <usart_sync_write+0x36>
			;
	} while (++offset < length);
    1388:	3501      	adds	r5, #1
    138a:	42bd      	cmp	r5, r7
    138c:	d3f3      	bcc.n	1376 <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
    138e:	0020      	movs	r0, r4
    1390:	4b09      	ldr	r3, [pc, #36]	; (13b8 <usart_sync_write+0x70>)
    1392:	4798      	blx	r3
    1394:	2800      	cmp	r0, #0
    1396:	d0fa      	beq.n	138e <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
    1398:	0028      	movs	r0, r5
    139a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    139c:	2000      	movs	r0, #0
    139e:	e7de      	b.n	135e <usart_sync_write+0x16>
    13a0:	2000      	movs	r0, #0
    13a2:	e7dc      	b.n	135e <usart_sync_write+0x16>
    13a4:	2001      	movs	r0, #1
    13a6:	e7da      	b.n	135e <usart_sync_write+0x16>
    13a8:	00004488 	.word	0x00004488
    13ac:	000014a1 	.word	0x000014a1
    13b0:	00001d13 	.word	0x00001d13
    13b4:	00001d03 	.word	0x00001d03
    13b8:	00001d1d 	.word	0x00001d1d

000013bc <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    13bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13be:	46ce      	mov	lr, r9
    13c0:	4647      	mov	r7, r8
    13c2:	b580      	push	{r7, lr}
    13c4:	1e05      	subs	r5, r0, #0
    13c6:	4688      	mov	r8, r1
    13c8:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    13ca:	d01f      	beq.n	140c <usart_sync_read+0x50>
    13cc:	2900      	cmp	r1, #0
    13ce:	d01f      	beq.n	1410 <usart_sync_read+0x54>
    13d0:	2a00      	cmp	r2, #0
    13d2:	d11f      	bne.n	1414 <usart_sync_read+0x58>
    13d4:	2000      	movs	r0, #0
    13d6:	2286      	movs	r2, #134	; 0x86
    13d8:	0052      	lsls	r2, r2, #1
    13da:	490f      	ldr	r1, [pc, #60]	; (1418 <usart_sync_read+0x5c>)
    13dc:	4b0f      	ldr	r3, [pc, #60]	; (141c <usart_sync_read+0x60>)
    13de:	4798      	blx	r3
	uint32_t                      offset = 0;
    13e0:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    13e2:	002c      	movs	r4, r5
    13e4:	3408      	adds	r4, #8
    13e6:	0020      	movs	r0, r4
    13e8:	4b0d      	ldr	r3, [pc, #52]	; (1420 <usart_sync_read+0x64>)
    13ea:	4798      	blx	r3
    13ec:	2800      	cmp	r0, #0
    13ee:	d0f8      	beq.n	13e2 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    13f0:	4643      	mov	r3, r8
    13f2:	199f      	adds	r7, r3, r6
    13f4:	0020      	movs	r0, r4
    13f6:	4b0b      	ldr	r3, [pc, #44]	; (1424 <usart_sync_read+0x68>)
    13f8:	4798      	blx	r3
    13fa:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
    13fc:	3601      	adds	r6, #1
    13fe:	454e      	cmp	r6, r9
    1400:	d3ef      	bcc.n	13e2 <usart_sync_read+0x26>

	return (int32_t)offset;
}
    1402:	0030      	movs	r0, r6
    1404:	bc0c      	pop	{r2, r3}
    1406:	4690      	mov	r8, r2
    1408:	4699      	mov	r9, r3
    140a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    140c:	2000      	movs	r0, #0
    140e:	e7e2      	b.n	13d6 <usart_sync_read+0x1a>
    1410:	2000      	movs	r0, #0
    1412:	e7e0      	b.n	13d6 <usart_sync_read+0x1a>
    1414:	2001      	movs	r0, #1
    1416:	e7de      	b.n	13d6 <usart_sync_read+0x1a>
    1418:	00004488 	.word	0x00004488
    141c:	000014a1 	.word	0x000014a1
    1420:	00001d29 	.word	0x00001d29
    1424:	00001d0b 	.word	0x00001d0b

00001428 <usart_sync_init>:
{
    1428:	b570      	push	{r4, r5, r6, lr}
    142a:	0004      	movs	r4, r0
    142c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    142e:	2800      	cmp	r0, #0
    1430:	d014      	beq.n	145c <usart_sync_init+0x34>
    1432:	2900      	cmp	r1, #0
    1434:	d010      	beq.n	1458 <usart_sync_init+0x30>
    1436:	2001      	movs	r0, #1
    1438:	2234      	movs	r2, #52	; 0x34
    143a:	4909      	ldr	r1, [pc, #36]	; (1460 <usart_sync_init+0x38>)
    143c:	4b09      	ldr	r3, [pc, #36]	; (1464 <usart_sync_init+0x3c>)
    143e:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    1440:	0020      	movs	r0, r4
    1442:	3008      	adds	r0, #8
    1444:	0029      	movs	r1, r5
    1446:	4b08      	ldr	r3, [pc, #32]	; (1468 <usart_sync_init+0x40>)
    1448:	4798      	blx	r3
	if (init_status) {
    144a:	2800      	cmp	r0, #0
    144c:	d103      	bne.n	1456 <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
    144e:	4b07      	ldr	r3, [pc, #28]	; (146c <usart_sync_init+0x44>)
    1450:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
    1452:	4b07      	ldr	r3, [pc, #28]	; (1470 <usart_sync_init+0x48>)
    1454:	6023      	str	r3, [r4, #0]
}
    1456:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
    1458:	2000      	movs	r0, #0
    145a:	e7ed      	b.n	1438 <usart_sync_init+0x10>
    145c:	2000      	movs	r0, #0
    145e:	e7eb      	b.n	1438 <usart_sync_init+0x10>
    1460:	00004488 	.word	0x00004488
    1464:	000014a1 	.word	0x000014a1
    1468:	00001cc5 	.word	0x00001cc5
    146c:	000013bd 	.word	0x000013bd
    1470:	00001349 	.word	0x00001349

00001474 <usart_sync_enable>:
{
    1474:	b510      	push	{r4, lr}
    1476:	0004      	movs	r4, r0
	ASSERT(descr);
    1478:	1e43      	subs	r3, r0, #1
    147a:	4198      	sbcs	r0, r3
    147c:	b2c0      	uxtb	r0, r0
    147e:	2253      	movs	r2, #83	; 0x53
    1480:	4904      	ldr	r1, [pc, #16]	; (1494 <usart_sync_enable+0x20>)
    1482:	4b05      	ldr	r3, [pc, #20]	; (1498 <usart_sync_enable+0x24>)
    1484:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    1486:	0020      	movs	r0, r4
    1488:	3008      	adds	r0, #8
    148a:	4b04      	ldr	r3, [pc, #16]	; (149c <usart_sync_enable+0x28>)
    148c:	4798      	blx	r3
}
    148e:	2000      	movs	r0, #0
    1490:	bd10      	pop	{r4, pc}
    1492:	46c0      	nop			; (mov r8, r8)
    1494:	00004488 	.word	0x00004488
    1498:	000014a1 	.word	0x000014a1
    149c:	00001cf1 	.word	0x00001cf1

000014a0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    14a0:	2800      	cmp	r0, #0
    14a2:	d100      	bne.n	14a6 <assert+0x6>
		__asm("BKPT #0");
    14a4:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    14a6:	4770      	bx	lr

000014a8 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    14a8:	6803      	ldr	r3, [r0, #0]
    14aa:	2b00      	cmp	r3, #0
    14ac:	d003      	beq.n	14b6 <is_list_element+0xe>
		if (it == element) {
    14ae:	428b      	cmp	r3, r1
    14b0:	d003      	beq.n	14ba <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
    14b2:	681b      	ldr	r3, [r3, #0]
    14b4:	e7f9      	b.n	14aa <is_list_element+0x2>
			return true;
		}
	}

	return false;
    14b6:	2000      	movs	r0, #0
}
    14b8:	4770      	bx	lr
			return true;
    14ba:	2001      	movs	r0, #1
    14bc:	e7fc      	b.n	14b8 <is_list_element+0x10>
	...

000014c0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    14c0:	b570      	push	{r4, r5, r6, lr}
    14c2:	0004      	movs	r4, r0
    14c4:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    14c6:	4b06      	ldr	r3, [pc, #24]	; (14e0 <list_insert_as_head+0x20>)
    14c8:	4798      	blx	r3
    14ca:	2301      	movs	r3, #1
    14cc:	4058      	eors	r0, r3
    14ce:	b2c0      	uxtb	r0, r0
    14d0:	2239      	movs	r2, #57	; 0x39
    14d2:	4904      	ldr	r1, [pc, #16]	; (14e4 <list_insert_as_head+0x24>)
    14d4:	4b04      	ldr	r3, [pc, #16]	; (14e8 <list_insert_as_head+0x28>)
    14d6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    14d8:	6823      	ldr	r3, [r4, #0]
    14da:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    14dc:	6025      	str	r5, [r4, #0]
}
    14de:	bd70      	pop	{r4, r5, r6, pc}
    14e0:	000014a9 	.word	0x000014a9
    14e4:	000044a4 	.word	0x000044a4
    14e8:	000014a1 	.word	0x000014a1

000014ec <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    14ec:	6803      	ldr	r3, [r0, #0]
    14ee:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    14f0:	6001      	str	r1, [r0, #0]
}
    14f2:	4770      	bx	lr

000014f4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    14f4:	6803      	ldr	r3, [r0, #0]
    14f6:	2b00      	cmp	r3, #0
    14f8:	d003      	beq.n	1502 <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    14fa:	681a      	ldr	r2, [r3, #0]
    14fc:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    14fe:	0018      	movs	r0, r3
	}

	return NULL;
}
    1500:	4770      	bx	lr
	return NULL;
    1502:	2000      	movs	r0, #0
    1504:	e7fc      	b.n	1500 <list_remove_head+0xc>
	...

00001508 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1508:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    150a:	4a06      	ldr	r2, [pc, #24]	; (1524 <_sbrk+0x1c>)
    150c:	6812      	ldr	r2, [r2, #0]
    150e:	2a00      	cmp	r2, #0
    1510:	d004      	beq.n	151c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1512:	4a04      	ldr	r2, [pc, #16]	; (1524 <_sbrk+0x1c>)
    1514:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1516:	18c3      	adds	r3, r0, r3
    1518:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    151a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    151c:	4902      	ldr	r1, [pc, #8]	; (1528 <_sbrk+0x20>)
    151e:	4a01      	ldr	r2, [pc, #4]	; (1524 <_sbrk+0x1c>)
    1520:	6011      	str	r1, [r2, #0]
    1522:	e7f6      	b.n	1512 <_sbrk+0xa>
    1524:	2000009c 	.word	0x2000009c
    1528:	200022e8 	.word	0x200022e8

0000152c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    152c:	2001      	movs	r0, #1
    152e:	4240      	negs	r0, r0
    1530:	4770      	bx	lr

00001532 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    1532:	2380      	movs	r3, #128	; 0x80
    1534:	019b      	lsls	r3, r3, #6
    1536:	604b      	str	r3, [r1, #4]

	return 0;
}
    1538:	2000      	movs	r0, #0
    153a:	4770      	bx	lr

0000153c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    153c:	2000      	movs	r0, #0
    153e:	4770      	bx	lr

00001540 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    1540:	b5f0      	push	{r4, r5, r6, r7, lr}
	dev->hw = hw;
    1542:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    1544:	698b      	ldr	r3, [r1, #24]
    1546:	2201      	movs	r2, #1
    1548:	4313      	orrs	r3, r2
    154a:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    154c:	6803      	ldr	r3, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    154e:	699a      	ldr	r2, [r3, #24]
    1550:	07d2      	lsls	r2, r2, #31
    1552:	d5fb      	bpl.n	154c <_can_async_init+0xc>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    1554:	699a      	ldr	r2, [r3, #24]
    1556:	2402      	movs	r4, #2
    1558:	4322      	orrs	r2, r4
    155a:	619a      	str	r2, [r3, #24]
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);

#ifdef CONF_CAN0_ENABLED
	if (hw == CAN0) {
    155c:	4b36      	ldr	r3, [pc, #216]	; (1638 <_can_async_init+0xf8>)
    155e:	4299      	cmp	r1, r3
    1560:	d00f      	beq.n	1582 <_can_async_init+0x42>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    1562:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    1564:	6993      	ldr	r3, [r2, #24]
    1566:	2102      	movs	r1, #2
    1568:	438b      	bics	r3, r1
    156a:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    156c:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    156e:	6993      	ldr	r3, [r2, #24]
    1570:	3901      	subs	r1, #1
    1572:	438b      	bics	r3, r1
    1574:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    1576:	6803      	ldr	r3, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    1578:	699b      	ldr	r3, [r3, #24]
    157a:	07db      	lsls	r3, r3, #31
    157c:	d4fb      	bmi.n	1576 <_can_async_init+0x36>
	};

	return ERR_NONE;
}
    157e:	2000      	movs	r0, #0
    1580:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_can0_dev    = dev;
    1582:	4b2e      	ldr	r3, [pc, #184]	; (163c <_can_async_init+0xfc>)
    1584:	001a      	movs	r2, r3
    1586:	c201      	stmia	r2!, {r0}
		dev->context = (void *)&_can0_context;
    1588:	492d      	ldr	r1, [pc, #180]	; (1640 <_can_async_init+0x100>)
    158a:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN0_CCCR_REG);
    158c:	6804      	ldr	r4, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    158e:	69a5      	ldr	r5, [r4, #24]
    1590:	21c0      	movs	r1, #192	; 0xc0
    1592:	0089      	lsls	r1, r1, #2
    1594:	4329      	orrs	r1, r5
    1596:	61a1      	str	r1, [r4, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN0_MRCFG_REG);
    1598:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
    159a:	2402      	movs	r4, #2
    159c:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN0_BTP_REG);
    159e:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    15a0:	4c28      	ldr	r4, [pc, #160]	; (1644 <_can_async_init+0x104>)
    15a2:	61cc      	str	r4, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN0_DBTP_REG);
    15a4:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
    15a6:	4c28      	ldr	r4, [pc, #160]	; (1648 <_can_async_init+0x108>)
    15a8:	60cc      	str	r4, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN0_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo));
    15aa:	4928      	ldr	r1, [pc, #160]	; (164c <_can_async_init+0x10c>)
    15ac:	0409      	lsls	r1, r1, #16
    15ae:	0c09      	lsrs	r1, r1, #16
    15b0:	4c27      	ldr	r4, [pc, #156]	; (1650 <_can_async_init+0x110>)
    15b2:	4321      	orrs	r1, r4
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    15b4:	24a0      	movs	r4, #160	; 0xa0
    15b6:	6805      	ldr	r5, [r0, #0]
    15b8:	5129      	str	r1, [r5, r4]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    15ba:	2100      	movs	r1, #0
    15bc:	341c      	adds	r4, #28
    15be:	6805      	ldr	r5, [r0, #0]
    15c0:	5129      	str	r1, [r5, r4]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    15c2:	340c      	adds	r4, #12
    15c4:	6805      	ldr	r5, [r0, #0]
    15c6:	5129      	str	r1, [r5, r4]
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN0_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can0_tx_fifo));
    15c8:	4c22      	ldr	r4, [pc, #136]	; (1654 <_can_async_init+0x114>)
    15ca:	0424      	lsls	r4, r4, #16
    15cc:	0c24      	lsrs	r4, r4, #16
    15ce:	2580      	movs	r5, #128	; 0x80
    15d0:	04ad      	lsls	r5, r5, #18
    15d2:	432c      	orrs	r4, r5
	((Can *)hw)->TXBC.reg = data;
    15d4:	25c0      	movs	r5, #192	; 0xc0
    15d6:	6806      	ldr	r6, [r0, #0]
    15d8:	5174      	str	r4, [r6, r5]
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN0_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo));
    15da:	0412      	lsls	r2, r2, #16
    15dc:	0c12      	lsrs	r2, r2, #16
    15de:	2480      	movs	r4, #128	; 0x80
    15e0:	02a4      	lsls	r4, r4, #10
    15e2:	4322      	orrs	r2, r4
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    15e4:	3530      	adds	r5, #48	; 0x30
    15e6:	6806      	ldr	r6, [r0, #0]
    15e8:	5172      	str	r2, [r6, r5]
	((Can *)hw)->GFC.reg = data;
    15ea:	3d70      	subs	r5, #112	; 0x70
    15ec:	2228      	movs	r2, #40	; 0x28
    15ee:	6806      	ldr	r6, [r0, #0]
    15f0:	5172      	str	r2, [r6, r5]
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN0_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can0_rx_std_filter));
    15f2:	001a      	movs	r2, r3
    15f4:	3214      	adds	r2, #20
    15f6:	0412      	lsls	r2, r2, #16
    15f8:	0c12      	lsrs	r2, r2, #16
    15fa:	4322      	orrs	r2, r4
	((Can *)hw)->SIDFC.reg = data;
    15fc:	2684      	movs	r6, #132	; 0x84
    15fe:	6807      	ldr	r7, [r0, #0]
    1600:	51ba      	str	r2, [r7, r6]
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN0_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can0_rx_ext_filter));
    1602:	331c      	adds	r3, #28
    1604:	041b      	lsls	r3, r3, #16
    1606:	0c1b      	lsrs	r3, r3, #16
    1608:	4323      	orrs	r3, r4
	((Can *)hw)->XIDFC.reg = data;
    160a:	2288      	movs	r2, #136	; 0x88
    160c:	6804      	ldr	r4, [r0, #0]
    160e:	50a3      	str	r3, [r4, r2]
	((Can *)hw)->XIDAM.reg = data;
    1610:	2390      	movs	r3, #144	; 0x90
    1612:	6802      	ldr	r2, [r0, #0]
    1614:	50d1      	str	r1, [r2, r3]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1616:	4b10      	ldr	r3, [pc, #64]	; (1658 <_can_async_init+0x118>)
    1618:	2280      	movs	r2, #128	; 0x80
    161a:	0212      	lsls	r2, r2, #8
    161c:	515a      	str	r2, [r3, r5]
  __ASM volatile ("dsb 0xF":::"memory");
    161e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1622:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1626:	3181      	adds	r1, #129	; 0x81
    1628:	31ff      	adds	r1, #255	; 0xff
    162a:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    162c:	601a      	str	r2, [r3, #0]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    162e:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
    1630:	2201      	movs	r2, #1
    1632:	65da      	str	r2, [r3, #92]	; 0x5c
    1634:	e795      	b.n	1562 <_can_async_init+0x22>
    1636:	46c0      	nop			; (mov r8, r8)
    1638:	42001c00 	.word	0x42001c00
    163c:	200000a0 	.word	0x200000a0
    1640:	20000000 	.word	0x20000000
    1644:	06020a03 	.word	0x06020a03
    1648:	00020a33 	.word	0x00020a33
    164c:	2000029c 	.word	0x2000029c
    1650:	80020000 	.word	0x80020000
    1654:	200002bc 	.word	0x200002bc
    1658:	e000e100 	.word	0xe000e100

0000165c <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
    165c:	b5f0      	push	{r4, r5, r6, r7, lr}
    165e:	46ce      	mov	lr, r9
    1660:	4647      	mov	r7, r8
    1662:	b580      	push	{r7, lr}
    1664:	b085      	sub	sp, #20
    1666:	4680      	mov	r8, r0
	struct _can_rx_fifo_entry *f = NULL;
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    1668:	6803      	ldr	r3, [r0, #0]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    166a:	22a4      	movs	r2, #164	; 0xa4
    166c:	589a      	ldr	r2, [r3, r2]
    166e:	0652      	lsls	r2, r2, #25
    1670:	d045      	beq.n	16fe <_can_async_read+0xa2>
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    1672:	22a4      	movs	r2, #164	; 0xa4
    1674:	589c      	ldr	r4, [r3, r2]
    1676:	0a24      	lsrs	r4, r4, #8
    1678:	3a65      	subs	r2, #101	; 0x65
    167a:	4014      	ands	r4, r2
    167c:	46a1      	mov	r9, r4
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);

#ifdef CONF_CAN0_ENABLED
	if (dev->hw == CAN0) {
    167e:	4a23      	ldr	r2, [pc, #140]	; (170c <_can_async_read+0xb0>)
    1680:	4293      	cmp	r3, r2
    1682:	d02e      	beq.n	16e2 <_can_async_read+0x86>
	struct _can_rx_fifo_entry *f = NULL;
    1684:	2300      	movs	r3, #0
	if (dev->hw == CAN1) {
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
	}
#endif

	if (f == NULL) {
    1686:	2b00      	cmp	r3, #0
    1688:	d03c      	beq.n	1704 <_can_async_read+0xa8>
		return ERR_NO_RESOURCE;
	}

	if (f->R0.bit.XTD == 1) {
    168a:	681a      	ldr	r2, [r3, #0]
    168c:	0052      	lsls	r2, r2, #1
    168e:	d42c      	bmi.n	16ea <_can_async_read+0x8e>
		msg->fmt = CAN_FMT_EXTID;
		msg->id  = f->R0.bit.ID;
	} else {
		msg->fmt = CAN_FMT_STDID;
    1690:	2200      	movs	r2, #0
    1692:	734a      	strb	r2, [r1, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    1694:	681a      	ldr	r2, [r3, #0]
    1696:	00d2      	lsls	r2, r2, #3
    1698:	0d52      	lsrs	r2, r2, #21
    169a:	600a      	str	r2, [r1, #0]
	}

	if (f->R0.bit.RTR == 1) {
    169c:	681a      	ldr	r2, [r3, #0]
    169e:	0092      	lsls	r2, r2, #2
    16a0:	d42a      	bmi.n	16f8 <_can_async_read+0x9c>
		msg->type = CAN_TYPE_REMOTE;
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    16a2:	466a      	mov	r2, sp
    16a4:	481a      	ldr	r0, [pc, #104]	; (1710 <_can_async_read+0xb4>)
    16a6:	466e      	mov	r6, sp
    16a8:	c8b0      	ldmia	r0!, {r4, r5, r7}
    16aa:	c6b0      	stmia	r6!, {r4, r5, r7}
    16ac:	6800      	ldr	r0, [r0, #0]
    16ae:	6030      	str	r0, [r6, #0]
	msg->len                = dlc2len[f->R1.bit.DLC];
    16b0:	6858      	ldr	r0, [r3, #4]
    16b2:	0300      	lsls	r0, r0, #12
    16b4:	0f00      	lsrs	r0, r0, #28
    16b6:	5c12      	ldrb	r2, [r2, r0]
    16b8:	730a      	strb	r2, [r1, #12]

	memcpy(msg->data, f->data, msg->len);
    16ba:	6888      	ldr	r0, [r1, #8]
    16bc:	3308      	adds	r3, #8
    16be:	0019      	movs	r1, r3
    16c0:	4b14      	ldr	r3, [pc, #80]	; (1714 <_can_async_read+0xb8>)
    16c2:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    16c4:	4643      	mov	r3, r8
    16c6:	6819      	ldr	r1, [r3, #0]
	tmp = ((Can *)hw)->RXF0A.reg;
    16c8:	22a8      	movs	r2, #168	; 0xa8
    16ca:	588b      	ldr	r3, [r1, r2]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    16cc:	203f      	movs	r0, #63	; 0x3f
    16ce:	4383      	bics	r3, r0
	tmp |= CAN_RXF0A_F0AI(data);
    16d0:	464c      	mov	r4, r9
    16d2:	431c      	orrs	r4, r3
	((Can *)hw)->RXF0A.reg = tmp;
    16d4:	508c      	str	r4, [r1, r2]

	return ERR_NONE;
    16d6:	2000      	movs	r0, #0
}
    16d8:	b005      	add	sp, #20
    16da:	bc0c      	pop	{r2, r3}
    16dc:	4690      	mov	r8, r2
    16de:	4699      	mov	r9, r3
    16e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
    16e2:	0123      	lsls	r3, r4, #4
    16e4:	4a0c      	ldr	r2, [pc, #48]	; (1718 <_can_async_read+0xbc>)
    16e6:	189b      	adds	r3, r3, r2
    16e8:	e7cd      	b.n	1686 <_can_async_read+0x2a>
		msg->fmt = CAN_FMT_EXTID;
    16ea:	2201      	movs	r2, #1
    16ec:	734a      	strb	r2, [r1, #13]
		msg->id  = f->R0.bit.ID;
    16ee:	681a      	ldr	r2, [r3, #0]
    16f0:	00d2      	lsls	r2, r2, #3
    16f2:	08d2      	lsrs	r2, r2, #3
    16f4:	600a      	str	r2, [r1, #0]
    16f6:	e7d1      	b.n	169c <_can_async_read+0x40>
		msg->type = CAN_TYPE_REMOTE;
    16f8:	2201      	movs	r2, #1
    16fa:	710a      	strb	r2, [r1, #4]
    16fc:	e7d1      	b.n	16a2 <_can_async_read+0x46>
		return ERR_NOT_FOUND;
    16fe:	200a      	movs	r0, #10
    1700:	4240      	negs	r0, r0
    1702:	e7e9      	b.n	16d8 <_can_async_read+0x7c>
		return ERR_NO_RESOURCE;
    1704:	201c      	movs	r0, #28
    1706:	4240      	negs	r0, r0
    1708:	e7e6      	b.n	16d8 <_can_async_read+0x7c>
    170a:	46c0      	nop			; (mov r8, r8)
    170c:	42001c00 	.word	0x42001c00
    1710:	000044c4 	.word	0x000044c4
    1714:	00003c49 	.word	0x00003c49
    1718:	2000029c 	.word	0x2000029c

0000171c <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
    171c:	b510      	push	{r4, lr}
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    171e:	2900      	cmp	r1, #0
    1720:	d009      	beq.n	1736 <_can_async_set_irq_state+0x1a>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
	} else if (type == CAN_ASYNC_TX_CB) {
    1722:	2901      	cmp	r1, #1
    1724:	d00e      	beq.n	1744 <_can_async_set_irq_state+0x28>
		hri_can_write_IE_TCE_bit(dev->hw, state);
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
	} else if (type == CAN_ASYNC_IRQ_CB) {
    1726:	2902      	cmp	r1, #2
    1728:	d10b      	bne.n	1742 <_can_async_set_irq_state+0x26>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    172a:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
    172c:	6d53      	ldr	r3, [r2, #84]	; 0x54
	tmp &= mask;
    172e:	490c      	ldr	r1, [pc, #48]	; (1760 <_can_async_set_irq_state+0x44>)
    1730:	400b      	ands	r3, r1
	((Can *)hw)->IE.reg = data;
    1732:	6553      	str	r3, [r2, #84]	; 0x54
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    1734:	e005      	b.n	1742 <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    1736:	6801      	ldr	r1, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
    1738:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~CAN_IE_RF0NE;
    173a:	2001      	movs	r0, #1
    173c:	4383      	bics	r3, r0
	tmp |= value << CAN_IE_RF0NE_Pos;
    173e:	431a      	orrs	r2, r3
	((Can *)hw)->IE.reg = tmp;
    1740:	654a      	str	r2, [r1, #84]	; 0x54
}
    1742:	bd10      	pop	{r4, pc}
		hri_can_write_IE_TCE_bit(dev->hw, state);
    1744:	6801      	ldr	r1, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
    1746:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~CAN_IE_TCE;
    1748:	4c06      	ldr	r4, [pc, #24]	; (1764 <_can_async_set_irq_state+0x48>)
    174a:	4023      	ands	r3, r4
	tmp |= value << CAN_IE_TCE_Pos;
    174c:	0252      	lsls	r2, r2, #9
    174e:	431a      	orrs	r2, r3
	((Can *)hw)->IE.reg = tmp;
    1750:	654a      	str	r2, [r1, #84]	; 0x54
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    1752:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->TXBTIE.reg = data;
    1754:	2101      	movs	r1, #1
    1756:	4249      	negs	r1, r1
    1758:	23e0      	movs	r3, #224	; 0xe0
    175a:	50d1      	str	r1, [r2, r3]
    175c:	e7f1      	b.n	1742 <_can_async_set_irq_state+0x26>
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	00000201 	.word	0x00000201
    1764:	fffffdff 	.word	0xfffffdff

00001768 <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
    1768:	b530      	push	{r4, r5, lr}
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    176a:	6984      	ldr	r4, [r0, #24]
    176c:	0088      	lsls	r0, r1, #2
    176e:	68e5      	ldr	r5, [r4, #12]
    1770:	46ac      	mov	ip, r5
    1772:	4460      	add	r0, ip
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    1774:	6924      	ldr	r4, [r4, #16]
    1776:	00c9      	lsls	r1, r1, #3
    1778:	1861      	adds	r1, r4, r1

	if (fmt == CAN_FMT_STDID) {
    177a:	2a00      	cmp	r2, #0
    177c:	d11d      	bne.n	17ba <_can_async_set_filter+0x52>
		if (filter == NULL) {
    177e:	2b00      	cmp	r3, #0
    1780:	d019      	beq.n	17b6 <_can_async_set_filter+0x4e>
			sf->S0.val = 0;
			return ERR_NONE;
		}
		sf->S0.val       = filter->mask;
    1782:	685a      	ldr	r2, [r3, #4]
    1784:	6002      	str	r2, [r0, #0]
		sf->S0.bit.SFID1 = filter->id;
    1786:	681b      	ldr	r3, [r3, #0]
    1788:	6802      	ldr	r2, [r0, #0]
    178a:	055b      	lsls	r3, r3, #21
    178c:	095b      	lsrs	r3, r3, #5
    178e:	4917      	ldr	r1, [pc, #92]	; (17ec <_can_async_set_filter+0x84>)
    1790:	400a      	ands	r2, r1
    1792:	4313      	orrs	r3, r2
    1794:	6003      	str	r3, [r0, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    1796:	6803      	ldr	r3, [r0, #0]
    1798:	009b      	lsls	r3, r3, #2
    179a:	089b      	lsrs	r3, r3, #2
    179c:	2280      	movs	r2, #128	; 0x80
    179e:	0612      	lsls	r2, r2, #24
    17a0:	431a      	orrs	r2, r3
    17a2:	6002      	str	r2, [r0, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    17a4:	6802      	ldr	r2, [r0, #0]
    17a6:	4b12      	ldr	r3, [pc, #72]	; (17f0 <_can_async_set_filter+0x88>)
    17a8:	401a      	ands	r2, r3
    17aa:	2380      	movs	r3, #128	; 0x80
    17ac:	051b      	lsls	r3, r3, #20
    17ae:	4313      	orrs	r3, r2
    17b0:	6003      	str	r3, [r0, #0]
		ef->F1.val      = filter->mask;
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
	}

	return ERR_NONE;
}
    17b2:	2000      	movs	r0, #0
    17b4:	bd30      	pop	{r4, r5, pc}
			sf->S0.val = 0;
    17b6:	6003      	str	r3, [r0, #0]
			return ERR_NONE;
    17b8:	e7fb      	b.n	17b2 <_can_async_set_filter+0x4a>
	} else if (fmt == CAN_FMT_EXTID) {
    17ba:	2a01      	cmp	r2, #1
    17bc:	d1f9      	bne.n	17b2 <_can_async_set_filter+0x4a>
		if (filter == NULL) {
    17be:	2b00      	cmp	r3, #0
    17c0:	d012      	beq.n	17e8 <_can_async_set_filter+0x80>
		ef->F0.val      = filter->id;
    17c2:	681a      	ldr	r2, [r3, #0]
    17c4:	600a      	str	r2, [r1, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    17c6:	680a      	ldr	r2, [r1, #0]
    17c8:	00d2      	lsls	r2, r2, #3
    17ca:	08d2      	lsrs	r2, r2, #3
    17cc:	2080      	movs	r0, #128	; 0x80
    17ce:	0580      	lsls	r0, r0, #22
    17d0:	4310      	orrs	r0, r2
    17d2:	6008      	str	r0, [r1, #0]
		ef->F1.val      = filter->mask;
    17d4:	685b      	ldr	r3, [r3, #4]
    17d6:	604b      	str	r3, [r1, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    17d8:	684b      	ldr	r3, [r1, #4]
    17da:	009b      	lsls	r3, r3, #2
    17dc:	089b      	lsrs	r3, r3, #2
    17de:	2280      	movs	r2, #128	; 0x80
    17e0:	0612      	lsls	r2, r2, #24
    17e2:	431a      	orrs	r2, r3
    17e4:	604a      	str	r2, [r1, #4]
    17e6:	e7e4      	b.n	17b2 <_can_async_set_filter+0x4a>
			ef->F0.val = 0;
    17e8:	600b      	str	r3, [r1, #0]
			return ERR_NONE;
    17ea:	e7e2      	b.n	17b2 <_can_async_set_filter+0x4a>
    17ec:	f800ffff 	.word	0xf800ffff
    17f0:	c7ffffff 	.word	0xc7ffffff

000017f4 <CAN0_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN0_Handler(void)
{
    17f4:	b570      	push	{r4, r5, r6, lr}
	struct _can_async_device *dev = _can0_dev;
    17f6:	4b1a      	ldr	r3, [pc, #104]	; (1860 <CAN0_Handler+0x6c>)
    17f8:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    17fa:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
    17fc:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
    17fe:	07e3      	lsls	r3, r4, #31
    1800:	d414      	bmi.n	182c <CAN0_Handler+0x38>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
    1802:	05a3      	lsls	r3, r4, #22
    1804:	d416      	bmi.n	1834 <CAN0_Handler+0x40>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
    1806:	01a3      	lsls	r3, r4, #6
    1808:	d418      	bmi.n	183c <CAN0_Handler+0x48>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
    180a:	01e3      	lsls	r3, r4, #7
    180c:	d41b      	bmi.n	1846 <CAN0_Handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
    180e:	0223      	lsls	r3, r4, #8
    1810:	d507      	bpl.n	1822 <CAN0_Handler+0x2e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    1812:	68eb      	ldr	r3, [r5, #12]
    1814:	682a      	ldr	r2, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    1816:	6c52      	ldr	r2, [r2, #68]	; 0x44
    1818:	0692      	lsls	r2, r2, #26
    181a:	d519      	bpl.n	1850 <CAN0_Handler+0x5c>
    181c:	2102      	movs	r1, #2
    181e:	0028      	movs	r0, r5
    1820:	4798      	blx	r3
	}

	if (ir & CAN_IR_RF0L) {
    1822:	0723      	lsls	r3, r4, #28
    1824:	d416      	bmi.n	1854 <CAN0_Handler+0x60>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
    1826:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
    1828:	651c      	str	r4, [r3, #80]	; 0x50
}
    182a:	bd70      	pop	{r4, r5, r6, pc}
		dev->cb.rx_done(dev);
    182c:	0028      	movs	r0, r5
    182e:	68ab      	ldr	r3, [r5, #8]
    1830:	4798      	blx	r3
    1832:	e7e6      	b.n	1802 <CAN0_Handler+0xe>
		dev->cb.tx_done(dev);
    1834:	0028      	movs	r0, r5
    1836:	686b      	ldr	r3, [r5, #4]
    1838:	4798      	blx	r3
    183a:	e7e4      	b.n	1806 <CAN0_Handler+0x12>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    183c:	2103      	movs	r1, #3
    183e:	0028      	movs	r0, r5
    1840:	68eb      	ldr	r3, [r5, #12]
    1842:	4798      	blx	r3
    1844:	e7e1      	b.n	180a <CAN0_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    1846:	2100      	movs	r1, #0
    1848:	0028      	movs	r0, r5
    184a:	68eb      	ldr	r3, [r5, #12]
    184c:	4798      	blx	r3
    184e:	e7de      	b.n	180e <CAN0_Handler+0x1a>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    1850:	2101      	movs	r1, #1
    1852:	e7e4      	b.n	181e <CAN0_Handler+0x2a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    1854:	2104      	movs	r1, #4
    1856:	0028      	movs	r0, r5
    1858:	68eb      	ldr	r3, [r5, #12]
    185a:	4798      	blx	r3
    185c:	e7e3      	b.n	1826 <CAN0_Handler+0x32>
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	200000a0 	.word	0x200000a0

00001864 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
    1864:	0103      	lsls	r3, r0, #4
    1866:	1a1b      	subs	r3, r3, r0
    1868:	011a      	lsls	r2, r3, #4
    186a:	2064      	movs	r0, #100	; 0x64
    186c:	4350      	muls	r0, r2
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    186e:	4770      	bx	lr

00001870 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1870:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1872:	4a09      	ldr	r2, [pc, #36]	; (1898 <_init_chip+0x28>)
    1874:	6853      	ldr	r3, [r2, #4]
    1876:	2106      	movs	r1, #6
    1878:	430b      	orrs	r3, r1
    187a:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    187c:	4b07      	ldr	r3, [pc, #28]	; (189c <_init_chip+0x2c>)
    187e:	4798      	blx	r3
	_oscctrl_init_sources();
    1880:	4b07      	ldr	r3, [pc, #28]	; (18a0 <_init_chip+0x30>)
    1882:	4798      	blx	r3
	_mclk_init();
    1884:	4b07      	ldr	r3, [pc, #28]	; (18a4 <_init_chip+0x34>)
    1886:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1888:	4b07      	ldr	r3, [pc, #28]	; (18a8 <_init_chip+0x38>)
    188a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    188c:	20ff      	movs	r0, #255	; 0xff
    188e:	4b07      	ldr	r3, [pc, #28]	; (18ac <_init_chip+0x3c>)
    1890:	4798      	blx	r3

	_div_init();
    1892:	4b07      	ldr	r3, [pc, #28]	; (18b0 <_init_chip+0x40>)
    1894:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    1896:	bd10      	pop	{r4, pc}
    1898:	41004000 	.word	0x41004000
    189c:	00001979 	.word	0x00001979
    18a0:	0000199d 	.word	0x0000199d
    18a4:	0000196d 	.word	0x0000196d
    18a8:	000019d9 	.word	0x000019d9
    18ac:	00001901 	.word	0x00001901
    18b0:	000018b5 	.word	0x000018b5

000018b4 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
    18b4:	2290      	movs	r2, #144	; 0x90
    18b6:	05d2      	lsls	r2, r2, #23
    18b8:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
    18ba:	2102      	movs	r1, #2
    18bc:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
    18be:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
    18c0:	4770      	bx	lr
	...

000018c4 <__aeabi_idivmod>:

/**
 * \brief Do signed division, return result and remainder
 */
uint64_t __aeabi_idivmod(int numerator, int denominator)
{
    18c4:	b510      	push	{r4, lr}
    18c6:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    18c8:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
    18cc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    18ce:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
    18d0:	2390      	movs	r3, #144	; 0x90
    18d2:	05db      	lsls	r3, r3, #23
    18d4:	781a      	ldrb	r2, [r3, #0]
    18d6:	2401      	movs	r4, #1
    18d8:	4322      	orrs	r2, r4
    18da:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
    18dc:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
    18de:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
    18e0:	2390      	movs	r3, #144	; 0x90
    18e2:	05db      	lsls	r3, r3, #23
    18e4:	791b      	ldrb	r3, [r3, #4]
    18e6:	07db      	lsls	r3, r3, #31
    18e8:	d4fa      	bmi.n	18e0 <__aeabi_idivmod+0x1c>
	_divas_div(1, numerator, denominator);
	res = _divas_result64();
    18ea:	4b04      	ldr	r3, [pc, #16]	; (18fc <__aeabi_idivmod+0x38>)
    18ec:	6818      	ldr	r0, [r3, #0]
    18ee:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
    18f0:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    18f2:	f383 8810 	msr	PRIMASK, r3
	return res;
}
    18f6:	b002      	add	sp, #8
    18f8:	bd10      	pop	{r4, pc}
    18fa:	46c0      	nop			; (mov r8, r8)
    18fc:	48000010 	.word	0x48000010

00001900 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1900:	07c3      	lsls	r3, r0, #31
    1902:	d507      	bpl.n	1914 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1904:	4a13      	ldr	r2, [pc, #76]	; (1954 <_gclk_init_generators_by_fref+0x54>)
    1906:	4b14      	ldr	r3, [pc, #80]	; (1958 <_gclk_init_generators_by_fref+0x58>)
    1908:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    190a:	4b13      	ldr	r3, [pc, #76]	; (1958 <_gclk_init_generators_by_fref+0x58>)
    190c:	685a      	ldr	r2, [r3, #4]
    190e:	4b13      	ldr	r3, [pc, #76]	; (195c <_gclk_init_generators_by_fref+0x5c>)
    1910:	421a      	tst	r2, r3
    1912:	d1fa      	bne.n	190a <_gclk_init_generators_by_fref+0xa>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1914:	0783      	lsls	r3, r0, #30
    1916:	d507      	bpl.n	1928 <_gclk_init_generators_by_fref+0x28>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1918:	4a11      	ldr	r2, [pc, #68]	; (1960 <_gclk_init_generators_by_fref+0x60>)
    191a:	4b0f      	ldr	r3, [pc, #60]	; (1958 <_gclk_init_generators_by_fref+0x58>)
    191c:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    191e:	4b0e      	ldr	r3, [pc, #56]	; (1958 <_gclk_init_generators_by_fref+0x58>)
    1920:	685a      	ldr	r2, [r3, #4]
    1922:	4b0e      	ldr	r3, [pc, #56]	; (195c <_gclk_init_generators_by_fref+0x5c>)
    1924:	421a      	tst	r2, r3
    1926:	d1fa      	bne.n	191e <_gclk_init_generators_by_fref+0x1e>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1928:	0743      	lsls	r3, r0, #29
    192a:	d507      	bpl.n	193c <_gclk_init_generators_by_fref+0x3c>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    192c:	4a0d      	ldr	r2, [pc, #52]	; (1964 <_gclk_init_generators_by_fref+0x64>)
    192e:	4b0a      	ldr	r3, [pc, #40]	; (1958 <_gclk_init_generators_by_fref+0x58>)
    1930:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1932:	4b09      	ldr	r3, [pc, #36]	; (1958 <_gclk_init_generators_by_fref+0x58>)
    1934:	685a      	ldr	r2, [r3, #4]
    1936:	4b09      	ldr	r3, [pc, #36]	; (195c <_gclk_init_generators_by_fref+0x5c>)
    1938:	421a      	tst	r2, r3
    193a:	d1fa      	bne.n	1932 <_gclk_init_generators_by_fref+0x32>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    193c:	0703      	lsls	r3, r0, #28
    193e:	d507      	bpl.n	1950 <_gclk_init_generators_by_fref+0x50>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1940:	4a09      	ldr	r2, [pc, #36]	; (1968 <_gclk_init_generators_by_fref+0x68>)
    1942:	4b05      	ldr	r3, [pc, #20]	; (1958 <_gclk_init_generators_by_fref+0x58>)
    1944:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1946:	4b04      	ldr	r3, [pc, #16]	; (1958 <_gclk_init_generators_by_fref+0x58>)
    1948:	685a      	ldr	r2, [r3, #4]
    194a:	4b04      	ldr	r3, [pc, #16]	; (195c <_gclk_init_generators_by_fref+0x5c>)
    194c:	421a      	tst	r2, r3
    194e:	d1fa      	bne.n	1946 <_gclk_init_generators_by_fref+0x46>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    1950:	4770      	bx	lr
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	00020106 	.word	0x00020106
    1958:	40001c00 	.word	0x40001c00
    195c:	000007fd 	.word	0x000007fd
    1960:	00010107 	.word	0x00010107
    1964:	000c0106 	.word	0x000c0106
    1968:	00780106 	.word	0x00780106

0000196c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    196c:	2201      	movs	r2, #1
    196e:	4b01      	ldr	r3, [pc, #4]	; (1974 <_mclk_init+0x8>)
    1970:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    1972:	4770      	bx	lr
    1974:	40000800 	.word	0x40000800

00001978 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1978:	4a07      	ldr	r2, [pc, #28]	; (1998 <_osc32kctrl_init_sources+0x20>)
    197a:	238e      	movs	r3, #142	; 0x8e
    197c:	8293      	strh	r3, [r2, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    197e:	2300      	movs	r3, #0
    1980:	7593      	strb	r3, [r2, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1982:	75d3      	strb	r3, [r2, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1984:	69d3      	ldr	r3, [r2, #28]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    1986:	0a1b      	lsrs	r3, r3, #8
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1988:	021b      	lsls	r3, r3, #8
    198a:	21f8      	movs	r1, #248	; 0xf8
    198c:	0149      	lsls	r1, r1, #5
    198e:	400b      	ands	r3, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1990:	61d3      	str	r3, [r2, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1992:	2301      	movs	r3, #1
    1994:	6113      	str	r3, [r2, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    1996:	4770      	bx	lr
    1998:	40001400 	.word	0x40001400

0000199c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
    199c:	4b0d      	ldr	r3, [pc, #52]	; (19d4 <_oscctrl_init_sources+0x38>)
    199e:	2202      	movs	r2, #2
    19a0:	751a      	strb	r2, [r3, #20]
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
    19a2:	2200      	movs	r2, #0
    19a4:	755a      	strb	r2, [r3, #21]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
    19a6:	4b0b      	ldr	r3, [pc, #44]	; (19d4 <_oscctrl_init_sources+0x38>)
    19a8:	699b      	ldr	r3, [r3, #24]
    19aa:	075b      	lsls	r3, r3, #29
    19ac:	d4fb      	bmi.n	19a6 <_oscctrl_init_sources+0xa>
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
    19ae:	4b09      	ldr	r3, [pc, #36]	; (19d4 <_oscctrl_init_sources+0x38>)
    19b0:	699b      	ldr	r3, [r3, #24]
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
    19b2:	075b      	lsls	r3, r3, #29
    19b4:	d4fb      	bmi.n	19ae <_oscctrl_init_sources+0x12>
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
    19b6:	2207      	movs	r2, #7
    19b8:	4b06      	ldr	r3, [pc, #24]	; (19d4 <_oscctrl_init_sources+0x38>)
    19ba:	759a      	strb	r2, [r3, #22]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
    19bc:	4b05      	ldr	r3, [pc, #20]	; (19d4 <_oscctrl_init_sources+0x38>)
    19be:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
    19c0:	06db      	lsls	r3, r3, #27
    19c2:	d5fb      	bpl.n	19bc <_oscctrl_init_sources+0x20>
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
    19c4:	4a03      	ldr	r2, [pc, #12]	; (19d4 <_oscctrl_init_sources+0x38>)
    19c6:	7d13      	ldrb	r3, [r2, #20]
    19c8:	2180      	movs	r1, #128	; 0x80
    19ca:	4249      	negs	r1, r1
    19cc:	430b      	orrs	r3, r1
    19ce:	b2db      	uxtb	r3, r3
    19d0:	7513      	strb	r3, [r2, #20]
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    19d2:	4770      	bx	lr
    19d4:	40001000 	.word	0x40001000

000019d8 <_oscctrl_init_referenced_generators>:
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLRATIO.reg = data;
    19d8:	4a19      	ldr	r2, [pc, #100]	; (1a40 <_oscctrl_init_referenced_generators+0x68>)
    19da:	4b1a      	ldr	r3, [pc, #104]	; (1a44 <_oscctrl_init_referenced_generators+0x6c>)
    19dc:	621a      	str	r2, [r3, #32]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    19de:	232c      	movs	r3, #44	; 0x2c
    19e0:	4a18      	ldr	r2, [pc, #96]	; (1a44 <_oscctrl_init_referenced_generators+0x6c>)
    19e2:	5cd2      	ldrb	r2, [r2, r3]
    19e4:	3b1e      	subs	r3, #30
    19e6:	421a      	tst	r2, r3
    19e8:	d1f9      	bne.n	19de <_oscctrl_init_referenced_generators+0x6>
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLCTRLB.reg = data;
    19ea:	4b16      	ldr	r3, [pc, #88]	; (1a44 <_oscctrl_init_referenced_generators+0x6c>)
    19ec:	2200      	movs	r2, #0
    19ee:	625a      	str	r2, [r3, #36]	; 0x24
}

static inline void hri_oscctrl_write_DPLLPRESC_reg(const void *const hw, hri_oscctrl_dpllpresc_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLPRESC.reg = data;
    19f0:	2128      	movs	r1, #40	; 0x28
    19f2:	545a      	strb	r2, [r3, r1]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    19f4:	232c      	movs	r3, #44	; 0x2c
    19f6:	4a13      	ldr	r2, [pc, #76]	; (1a44 <_oscctrl_init_referenced_generators+0x6c>)
    19f8:	5cd2      	ldrb	r2, [r2, r3]
    19fa:	3b1e      	subs	r3, #30
    19fc:	421a      	tst	r2, r3
    19fe:	d1f9      	bne.n	19f4 <_oscctrl_init_referenced_generators+0x1c>
	((Oscctrl *)hw)->DPLLCTRLA.reg = data;
    1a00:	2202      	movs	r2, #2
    1a02:	4b10      	ldr	r3, [pc, #64]	; (1a44 <_oscctrl_init_referenced_generators+0x6c>)
    1a04:	771a      	strb	r2, [r3, #28]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    1a06:	232c      	movs	r3, #44	; 0x2c
    1a08:	4a0e      	ldr	r2, [pc, #56]	; (1a44 <_oscctrl_init_referenced_generators+0x6c>)
    1a0a:	5cd3      	ldrb	r3, [r2, r3]
    1a0c:	079b      	lsls	r3, r3, #30
    1a0e:	d4fa      	bmi.n	1a06 <_oscctrl_init_referenced_generators+0x2e>
	return (((Oscctrl *)hw)->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK) >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    1a10:	2330      	movs	r3, #48	; 0x30
    1a12:	4a0c      	ldr	r2, [pc, #48]	; (1a44 <_oscctrl_init_referenced_generators+0x6c>)
    1a14:	5cd3      	ldrb	r3, [r2, r3]
	                                    | (CONF_DPLL_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw)))
    1a16:	07db      	lsls	r3, r3, #31
    1a18:	d403      	bmi.n	1a22 <_oscctrl_init_referenced_generators+0x4a>
	return (((Oscctrl *)hw)->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY) >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    1a1a:	2330      	movs	r3, #48	; 0x30
    1a1c:	5cd3      	ldrb	r3, [r2, r3]
    1a1e:	079b      	lsls	r3, r3, #30
    1a20:	d5f6      	bpl.n	1a10 <_oscctrl_init_referenced_generators+0x38>
	((Oscctrl *)hw)->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ONDEMAND;
    1a22:	4a08      	ldr	r2, [pc, #32]	; (1a44 <_oscctrl_init_referenced_generators+0x6c>)
    1a24:	7f13      	ldrb	r3, [r2, #28]
    1a26:	2180      	movs	r1, #128	; 0x80
    1a28:	4249      	negs	r1, r1
    1a2a:	430b      	orrs	r3, r1
    1a2c:	b2db      	uxtb	r3, r3
    1a2e:	7713      	strb	r3, [r2, #28]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    1a30:	232c      	movs	r3, #44	; 0x2c
    1a32:	4a04      	ldr	r2, [pc, #16]	; (1a44 <_oscctrl_init_referenced_generators+0x6c>)
    1a34:	5cd2      	ldrb	r2, [r2, r3]
    1a36:	3b1e      	subs	r3, #30
    1a38:	421a      	tst	r2, r3
    1a3a:	d1f9      	bne.n	1a30 <_oscctrl_init_referenced_generators+0x58>
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1a3c:	4770      	bx	lr
    1a3e:	46c0      	nop			; (mov r8, r8)
    1a40:	000d05b7 	.word	0x000d05b7
    1a44:	40001000 	.word	0x40001000

00001a48 <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
    1a48:	b510      	push	{r4, lr}
    1a4a:	0004      	movs	r4, r0
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1a4c:	68c3      	ldr	r3, [r0, #12]
    1a4e:	899b      	ldrh	r3, [r3, #12]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    1a50:	05db      	lsls	r3, r3, #23
    1a52:	d507      	bpl.n	1a64 <_rtc_timer_interrupt_handler+0x1c>
		if (dev->timer_cb.period_expired) {
    1a54:	6803      	ldr	r3, [r0, #0]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d000      	beq.n	1a5c <_rtc_timer_interrupt_handler+0x14>
			dev->timer_cb.period_expired(dev);
    1a5a:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1a5c:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1a5e:	2280      	movs	r2, #128	; 0x80
    1a60:	0052      	lsls	r2, r2, #1
    1a62:	819a      	strh	r2, [r3, #12]
	}
}
    1a64:	bd10      	pop	{r4, pc}
	...

00001a68 <_timer_init>:
{
    1a68:	b570      	push	{r4, r5, r6, lr}
    1a6a:	0004      	movs	r4, r0
    1a6c:	000d      	movs	r5, r1
	ASSERT(dev);
    1a6e:	1e43      	subs	r3, r0, #1
    1a70:	4198      	sbcs	r0, r3
    1a72:	b2c0      	uxtb	r0, r0
    1a74:	2230      	movs	r2, #48	; 0x30
    1a76:	4911      	ldr	r1, [pc, #68]	; (1abc <_timer_init+0x54>)
    1a78:	4b11      	ldr	r3, [pc, #68]	; (1ac0 <_timer_init+0x58>)
    1a7a:	4798      	blx	r3
	dev->hw = hw;
    1a7c:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1a7e:	2301      	movs	r3, #1
    1a80:	802b      	strh	r3, [r5, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1a82:	692a      	ldr	r2, [r5, #16]
    1a84:	4b0f      	ldr	r3, [pc, #60]	; (1ac4 <_timer_init+0x5c>)
    1a86:	421a      	tst	r2, r3
    1a88:	d1fb      	bne.n	1a82 <_timer_init+0x1a>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    1a8a:	68e3      	ldr	r3, [r4, #12]
    1a8c:	691a      	ldr	r2, [r3, #16]
    1a8e:	07d2      	lsls	r2, r2, #31
    1a90:	d4fc      	bmi.n	1a8c <_timer_init+0x24>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1a92:	4a0d      	ldr	r2, [pc, #52]	; (1ac8 <_timer_init+0x60>)
    1a94:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1a96:	6919      	ldr	r1, [r3, #16]
    1a98:	4a0a      	ldr	r2, [pc, #40]	; (1ac4 <_timer_init+0x5c>)
    1a9a:	4211      	tst	r1, r2
    1a9c:	d1fb      	bne.n	1a96 <_timer_init+0x2e>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    1a9e:	68e2      	ldr	r2, [r4, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1aa0:	2320      	movs	r3, #32
    1aa2:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1aa4:	6913      	ldr	r3, [r2, #16]
    1aa6:	069b      	lsls	r3, r3, #26
    1aa8:	d4fc      	bmi.n	1aa4 <_timer_init+0x3c>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1aaa:	2380      	movs	r3, #128	; 0x80
    1aac:	005b      	lsls	r3, r3, #1
    1aae:	68e2      	ldr	r2, [r4, #12]
    1ab0:	8153      	strh	r3, [r2, #10]
	_rtc_dev = dev;
    1ab2:	4b06      	ldr	r3, [pc, #24]	; (1acc <_timer_init+0x64>)
    1ab4:	601c      	str	r4, [r3, #0]
}
    1ab6:	2000      	movs	r0, #0
    1ab8:	bd70      	pop	{r4, r5, r6, pc}
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	000044d4 	.word	0x000044d4
    1ac0:	000014a1 	.word	0x000014a1
    1ac4:	00008003 	.word	0x00008003
    1ac8:	ffff8080 	.word	0xffff8080
    1acc:	200000cc 	.word	0x200000cc

00001ad0 <_timer_start>:
{
    1ad0:	b510      	push	{r4, lr}
    1ad2:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
    1ad4:	d020      	beq.n	1b18 <_timer_start+0x48>
    1ad6:	68c3      	ldr	r3, [r0, #12]
    1ad8:	2b00      	cmp	r3, #0
    1ada:	d01b      	beq.n	1b14 <_timer_start+0x44>
    1adc:	2001      	movs	r0, #1
    1ade:	225c      	movs	r2, #92	; 0x5c
    1ae0:	490e      	ldr	r1, [pc, #56]	; (1b1c <_timer_start+0x4c>)
    1ae2:	4b0f      	ldr	r3, [pc, #60]	; (1b20 <_timer_start+0x50>)
    1ae4:	4798      	blx	r3
    1ae6:	2204      	movs	r2, #4
    1ae8:	4b0e      	ldr	r3, [pc, #56]	; (1b24 <_timer_start+0x54>)
    1aea:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    1aec:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    1aee:	2300      	movs	r3, #0
    1af0:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1af2:	6913      	ldr	r3, [r2, #16]
    1af4:	071b      	lsls	r3, r3, #28
    1af6:	d4fc      	bmi.n	1af2 <_timer_start+0x22>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    1af8:	68e3      	ldr	r3, [r4, #12]
    1afa:	691a      	ldr	r2, [r3, #16]
    1afc:	0712      	lsls	r2, r2, #28
    1afe:	d4fc      	bmi.n	1afa <_timer_start+0x2a>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    1b00:	881a      	ldrh	r2, [r3, #0]
    1b02:	2102      	movs	r1, #2
    1b04:	430a      	orrs	r2, r1
    1b06:	b292      	uxth	r2, r2
    1b08:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1b0a:	6919      	ldr	r1, [r3, #16]
    1b0c:	4a06      	ldr	r2, [pc, #24]	; (1b28 <_timer_start+0x58>)
    1b0e:	4211      	tst	r1, r2
    1b10:	d1fb      	bne.n	1b0a <_timer_start+0x3a>
}
    1b12:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    1b14:	2000      	movs	r0, #0
    1b16:	e7e2      	b.n	1ade <_timer_start+0xe>
    1b18:	2000      	movs	r0, #0
    1b1a:	e7e0      	b.n	1ade <_timer_start+0xe>
    1b1c:	000044d4 	.word	0x000044d4
    1b20:	000014a1 	.word	0x000014a1
    1b24:	e000e100 	.word	0xe000e100
    1b28:	00008003 	.word	0x00008003

00001b2c <_timer_is_started>:
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    1b2c:	68c1      	ldr	r1, [r0, #12]
    1b2e:	690a      	ldr	r2, [r1, #16]
    1b30:	4b03      	ldr	r3, [pc, #12]	; (1b40 <_timer_is_started+0x14>)
    1b32:	421a      	tst	r2, r3
    1b34:	d1fb      	bne.n	1b2e <_timer_is_started+0x2>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    1b36:	880b      	ldrh	r3, [r1, #0]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    1b38:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    1b3a:	2001      	movs	r0, #1
    1b3c:	4018      	ands	r0, r3
}
    1b3e:	4770      	bx	lr
    1b40:	00008003 	.word	0x00008003

00001b44 <_timer_set_irq>:
}
    1b44:	4770      	bx	lr

00001b46 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    1b46:	2000      	movs	r0, #0
    1b48:	4770      	bx	lr
	...

00001b4c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1b4c:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    1b4e:	4b02      	ldr	r3, [pc, #8]	; (1b58 <RTC_Handler+0xc>)
    1b50:	6818      	ldr	r0, [r3, #0]
    1b52:	4b02      	ldr	r3, [pc, #8]	; (1b5c <RTC_Handler+0x10>)
    1b54:	4798      	blx	r3
}
    1b56:	bd10      	pop	{r4, pc}
    1b58:	200000cc 	.word	0x200000cc
    1b5c:	00001a49 	.word	0x00001a49

00001b60 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1b60:	4b02      	ldr	r3, [pc, #8]	; (1b6c <_sercom_get_hardware_index+0xc>)
    1b62:	469c      	mov	ip, r3
    1b64:	4460      	add	r0, ip
    1b66:	0a80      	lsrs	r0, r0, #10
    1b68:	b2c0      	uxtb	r0, r0
}
    1b6a:	4770      	bx	lr
    1b6c:	bdfffc00 	.word	0xbdfffc00

00001b70 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1b70:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1b72:	07db      	lsls	r3, r3, #31
    1b74:	d408      	bmi.n	1b88 <_spi_sync_enable+0x18>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1b76:	6803      	ldr	r3, [r0, #0]
    1b78:	2202      	movs	r2, #2
    1b7a:	4313      	orrs	r3, r2
    1b7c:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b7e:	69c3      	ldr	r3, [r0, #28]
    1b80:	079b      	lsls	r3, r3, #30
    1b82:	d1fc      	bne.n	1b7e <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1b84:	2000      	movs	r0, #0
}
    1b86:	4770      	bx	lr
		return ERR_BUSY;
    1b88:	2004      	movs	r0, #4
    1b8a:	4240      	negs	r0, r0
    1b8c:	e7fb      	b.n	1b86 <_spi_sync_enable+0x16>
	...

00001b90 <_get_sercom_index>:
{
    1b90:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1b92:	4b0b      	ldr	r3, [pc, #44]	; (1bc0 <_get_sercom_index+0x30>)
    1b94:	4798      	blx	r3
    1b96:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1b98:	2000      	movs	r0, #0
    1b9a:	2800      	cmp	r0, #0
    1b9c:	d006      	beq.n	1bac <_get_sercom_index+0x1c>
	ASSERT(false);
    1b9e:	4a09      	ldr	r2, [pc, #36]	; (1bc4 <_get_sercom_index+0x34>)
    1ba0:	4909      	ldr	r1, [pc, #36]	; (1bc8 <_get_sercom_index+0x38>)
    1ba2:	2000      	movs	r0, #0
    1ba4:	4b09      	ldr	r3, [pc, #36]	; (1bcc <_get_sercom_index+0x3c>)
    1ba6:	4798      	blx	r3
	return 0;
    1ba8:	2000      	movs	r0, #0
}
    1baa:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    1bac:	0083      	lsls	r3, r0, #2
    1bae:	181b      	adds	r3, r3, r0
    1bb0:	0099      	lsls	r1, r3, #2
    1bb2:	4b07      	ldr	r3, [pc, #28]	; (1bd0 <_get_sercom_index+0x40>)
    1bb4:	5ccb      	ldrb	r3, [r1, r3]
    1bb6:	429a      	cmp	r2, r3
    1bb8:	d0f7      	beq.n	1baa <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1bba:	3001      	adds	r0, #1
    1bbc:	b2c0      	uxtb	r0, r0
    1bbe:	e7ec      	b.n	1b9a <_get_sercom_index+0xa>
    1bc0:	00001b61 	.word	0x00001b61
    1bc4:	0000023a 	.word	0x0000023a
    1bc8:	0000453c 	.word	0x0000453c
    1bcc:	000014a1 	.word	0x000014a1
    1bd0:	000044ec 	.word	0x000044ec

00001bd4 <_usart_init>:
{
    1bd4:	b570      	push	{r4, r5, r6, lr}
    1bd6:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    1bd8:	4b38      	ldr	r3, [pc, #224]	; (1cbc <_usart_init+0xe8>)
    1bda:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1bdc:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1bde:	07db      	lsls	r3, r3, #31
    1be0:	d41d      	bmi.n	1c1e <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1be2:	0083      	lsls	r3, r0, #2
    1be4:	181b      	adds	r3, r3, r0
    1be6:	009a      	lsls	r2, r3, #2
    1be8:	4b35      	ldr	r3, [pc, #212]	; (1cc0 <_usart_init+0xec>)
    1bea:	189b      	adds	r3, r3, r2
    1bec:	685a      	ldr	r2, [r3, #4]
    1bee:	231c      	movs	r3, #28
    1bf0:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1bf2:	69e3      	ldr	r3, [r4, #28]
    1bf4:	079b      	lsls	r3, r3, #30
    1bf6:	d1fc      	bne.n	1bf2 <_usart_init+0x1e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1bf8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1bfa:	079b      	lsls	r3, r3, #30
    1bfc:	d509      	bpl.n	1c12 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1bfe:	6823      	ldr	r3, [r4, #0]
    1c00:	2102      	movs	r1, #2
    1c02:	438b      	bics	r3, r1
    1c04:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1c06:	69e3      	ldr	r3, [r4, #28]
    1c08:	079b      	lsls	r3, r3, #30
    1c0a:	d1fc      	bne.n	1c06 <_usart_init+0x32>
    1c0c:	69e3      	ldr	r3, [r4, #28]
    1c0e:	079b      	lsls	r3, r3, #30
    1c10:	d4fc      	bmi.n	1c0c <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1c12:	2301      	movs	r3, #1
    1c14:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1c16:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1c18:	69e3      	ldr	r3, [r4, #28]
    1c1a:	079b      	lsls	r3, r3, #30
    1c1c:	d1fc      	bne.n	1c18 <_usart_init+0x44>
    1c1e:	69e3      	ldr	r3, [r4, #28]
    1c20:	07db      	lsls	r3, r3, #31
    1c22:	d4fc      	bmi.n	1c1e <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1c24:	0083      	lsls	r3, r0, #2
    1c26:	181b      	adds	r3, r3, r0
    1c28:	009a      	lsls	r2, r3, #2
    1c2a:	4b25      	ldr	r3, [pc, #148]	; (1cc0 <_usart_init+0xec>)
    1c2c:	189b      	adds	r3, r3, r2
    1c2e:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1c30:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1c32:	69e3      	ldr	r3, [r4, #28]
    1c34:	079b      	lsls	r3, r3, #30
    1c36:	d1fc      	bne.n	1c32 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1c38:	0083      	lsls	r3, r0, #2
    1c3a:	181b      	adds	r3, r3, r0
    1c3c:	009a      	lsls	r2, r3, #2
    1c3e:	4b20      	ldr	r3, [pc, #128]	; (1cc0 <_usart_init+0xec>)
    1c40:	189b      	adds	r3, r3, r2
    1c42:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1c44:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1c46:	69e3      	ldr	r3, [r4, #28]
    1c48:	075b      	lsls	r3, r3, #29
    1c4a:	d1fc      	bne.n	1c46 <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1c4c:	0083      	lsls	r3, r0, #2
    1c4e:	181b      	adds	r3, r3, r0
    1c50:	009a      	lsls	r2, r3, #2
    1c52:	4b1b      	ldr	r3, [pc, #108]	; (1cc0 <_usart_init+0xec>)
    1c54:	189b      	adds	r3, r3, r2
    1c56:	685b      	ldr	r3, [r3, #4]
    1c58:	049a      	lsls	r2, r3, #18
    1c5a:	d40b      	bmi.n	1c74 <_usart_init+0xa0>
    1c5c:	22c0      	movs	r2, #192	; 0xc0
    1c5e:	01d2      	lsls	r2, r2, #7
    1c60:	4213      	tst	r3, r2
    1c62:	d107      	bne.n	1c74 <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1c64:	0083      	lsls	r3, r0, #2
    1c66:	181b      	adds	r3, r3, r0
    1c68:	009a      	lsls	r2, r3, #2
    1c6a:	4b15      	ldr	r3, [pc, #84]	; (1cc0 <_usart_init+0xec>)
    1c6c:	189b      	adds	r3, r3, r2
    1c6e:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1c70:	81a3      	strh	r3, [r4, #12]
    1c72:	e015      	b.n	1ca0 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1c74:	0083      	lsls	r3, r0, #2
    1c76:	181b      	adds	r3, r3, r0
    1c78:	009a      	lsls	r2, r3, #2
    1c7a:	4911      	ldr	r1, [pc, #68]	; (1cc0 <_usart_init+0xec>)
    1c7c:	1889      	adds	r1, r1, r2
    1c7e:	898a      	ldrh	r2, [r1, #12]
    1c80:	89a3      	ldrh	r3, [r4, #12]
    1c82:	04d2      	lsls	r2, r2, #19
    1c84:	0cd2      	lsrs	r2, r2, #19
    1c86:	0b5b      	lsrs	r3, r3, #13
    1c88:	035b      	lsls	r3, r3, #13
    1c8a:	4313      	orrs	r3, r2
    1c8c:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1c8e:	7b8b      	ldrb	r3, [r1, #14]
    1c90:	2207      	movs	r2, #7
    1c92:	401a      	ands	r2, r3
    1c94:	89a3      	ldrh	r3, [r4, #12]
    1c96:	0352      	lsls	r2, r2, #13
    1c98:	04db      	lsls	r3, r3, #19
    1c9a:	0cdb      	lsrs	r3, r3, #19
    1c9c:	4313      	orrs	r3, r2
    1c9e:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1ca0:	4a07      	ldr	r2, [pc, #28]	; (1cc0 <_usart_init+0xec>)
    1ca2:	0083      	lsls	r3, r0, #2
    1ca4:	181d      	adds	r5, r3, r0
    1ca6:	00a9      	lsls	r1, r5, #2
    1ca8:	000d      	movs	r5, r1
    1caa:	1851      	adds	r1, r2, r1
    1cac:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1cae:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1cb0:	1952      	adds	r2, r2, r5
    1cb2:	7c12      	ldrb	r2, [r2, #16]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1cb4:	2330      	movs	r3, #48	; 0x30
    1cb6:	54e2      	strb	r2, [r4, r3]
}
    1cb8:	2000      	movs	r0, #0
    1cba:	bd70      	pop	{r4, r5, r6, pc}
    1cbc:	00001b91 	.word	0x00001b91
    1cc0:	000044ec 	.word	0x000044ec

00001cc4 <_usart_sync_init>:
{
    1cc4:	b570      	push	{r4, r5, r6, lr}
    1cc6:	0005      	movs	r5, r0
    1cc8:	000c      	movs	r4, r1
	ASSERT(device);
    1cca:	1e43      	subs	r3, r0, #1
    1ccc:	4198      	sbcs	r0, r3
    1cce:	b2c0      	uxtb	r0, r0
    1cd0:	22b4      	movs	r2, #180	; 0xb4
    1cd2:	4904      	ldr	r1, [pc, #16]	; (1ce4 <_usart_sync_init+0x20>)
    1cd4:	4b04      	ldr	r3, [pc, #16]	; (1ce8 <_usart_sync_init+0x24>)
    1cd6:	4798      	blx	r3
	device->hw = hw;
    1cd8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1cda:	0020      	movs	r0, r4
    1cdc:	4b03      	ldr	r3, [pc, #12]	; (1cec <_usart_sync_init+0x28>)
    1cde:	4798      	blx	r3
}
    1ce0:	bd70      	pop	{r4, r5, r6, pc}
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	0000453c 	.word	0x0000453c
    1ce8:	000014a1 	.word	0x000014a1
    1cec:	00001bd5 	.word	0x00001bd5

00001cf0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1cf0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1cf2:	6813      	ldr	r3, [r2, #0]
    1cf4:	2102      	movs	r1, #2
    1cf6:	430b      	orrs	r3, r1
    1cf8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1cfa:	69d3      	ldr	r3, [r2, #28]
    1cfc:	079b      	lsls	r3, r3, #30
    1cfe:	d1fc      	bne.n	1cfa <_usart_sync_enable+0xa>
}
    1d00:	4770      	bx	lr

00001d02 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1d02:	6803      	ldr	r3, [r0, #0]
    1d04:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1d06:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1d08:	4770      	bx	lr

00001d0a <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1d0a:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1d0c:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1d0e:	b2c0      	uxtb	r0, r0
}
    1d10:	4770      	bx	lr

00001d12 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1d12:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1d14:	7e18      	ldrb	r0, [r3, #24]
    1d16:	2301      	movs	r3, #1
    1d18:	4018      	ands	r0, r3
}
    1d1a:	4770      	bx	lr

00001d1c <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1d1c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1d1e:	7e1b      	ldrb	r3, [r3, #24]
    1d20:	085b      	lsrs	r3, r3, #1
    1d22:	2001      	movs	r0, #1
    1d24:	4018      	ands	r0, r3
}
    1d26:	4770      	bx	lr

00001d28 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1d28:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1d2a:	7e1b      	ldrb	r3, [r3, #24]
    1d2c:	089b      	lsrs	r3, r3, #2
    1d2e:	2001      	movs	r0, #1
    1d30:	4018      	ands	r0, r3
}
    1d32:	4770      	bx	lr

00001d34 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1d34:	b570      	push	{r4, r5, r6, lr}
    1d36:	0006      	movs	r6, r0
    1d38:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1d3a:	0008      	movs	r0, r1
    1d3c:	4b71      	ldr	r3, [pc, #452]	; (1f04 <_spi_m_sync_init+0x1d0>)
    1d3e:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1d40:	2300      	movs	r3, #0
    1d42:	2b00      	cmp	r3, #0
    1d44:	d100      	bne.n	1d48 <_spi_m_sync_init+0x14>
    1d46:	e084      	b.n	1e52 <_spi_m_sync_init+0x11e>
	return NULL;
    1d48:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1d4a:	2e00      	cmp	r6, #0
    1d4c:	d100      	bne.n	1d50 <_spi_m_sync_init+0x1c>
    1d4e:	e08d      	b.n	1e6c <_spi_m_sync_init+0x138>
    1d50:	2c00      	cmp	r4, #0
    1d52:	d100      	bne.n	1d56 <_spi_m_sync_init+0x22>
    1d54:	e088      	b.n	1e68 <_spi_m_sync_init+0x134>
    1d56:	2001      	movs	r0, #1
    1d58:	4a6b      	ldr	r2, [pc, #428]	; (1f08 <_spi_m_sync_init+0x1d4>)
    1d5a:	496c      	ldr	r1, [pc, #432]	; (1f0c <_spi_m_sync_init+0x1d8>)
    1d5c:	4b6c      	ldr	r3, [pc, #432]	; (1f10 <_spi_m_sync_init+0x1dc>)
    1d5e:	4798      	blx	r3

	if (regs == NULL) {
    1d60:	2d00      	cmp	r5, #0
    1d62:	d100      	bne.n	1d66 <_spi_m_sync_init+0x32>
    1d64:	e0cb      	b.n	1efe <_spi_m_sync_init+0x1ca>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1d66:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1d68:	07db      	lsls	r3, r3, #31
    1d6a:	d421      	bmi.n	1db0 <_spi_m_sync_init+0x7c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    1d6c:	782a      	ldrb	r2, [r5, #0]
    1d6e:	786b      	ldrb	r3, [r5, #1]
    1d70:	021b      	lsls	r3, r3, #8
    1d72:	4313      	orrs	r3, r2
    1d74:	78aa      	ldrb	r2, [r5, #2]
    1d76:	0412      	lsls	r2, r2, #16
    1d78:	4313      	orrs	r3, r2
    1d7a:	78ea      	ldrb	r2, [r5, #3]
    1d7c:	0612      	lsls	r2, r2, #24
    1d7e:	431a      	orrs	r2, r3
    1d80:	231c      	movs	r3, #28
    1d82:	401a      	ands	r2, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1d84:	69e3      	ldr	r3, [r4, #28]
    1d86:	079b      	lsls	r3, r3, #30
    1d88:	d1fc      	bne.n	1d84 <_spi_m_sync_init+0x50>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1d8a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1d8c:	079b      	lsls	r3, r3, #30
    1d8e:	d509      	bpl.n	1da4 <_spi_m_sync_init+0x70>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1d90:	6823      	ldr	r3, [r4, #0]
    1d92:	2102      	movs	r1, #2
    1d94:	438b      	bics	r3, r1
    1d96:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1d98:	69e3      	ldr	r3, [r4, #28]
    1d9a:	079b      	lsls	r3, r3, #30
    1d9c:	d1fc      	bne.n	1d98 <_spi_m_sync_init+0x64>
    1d9e:	69e3      	ldr	r3, [r4, #28]
    1da0:	079b      	lsls	r3, r3, #30
    1da2:	d4fc      	bmi.n	1d9e <_spi_m_sync_init+0x6a>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    1da4:	2301      	movs	r3, #1
    1da6:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1da8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1daa:	69e3      	ldr	r3, [r4, #28]
    1dac:	079b      	lsls	r3, r3, #30
    1dae:	d1fc      	bne.n	1daa <_spi_m_sync_init+0x76>
    1db0:	69e3      	ldr	r3, [r4, #28]
    1db2:	07db      	lsls	r3, r3, #31
    1db4:	d4fc      	bmi.n	1db0 <_spi_m_sync_init+0x7c>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1db6:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1db8:	782b      	ldrb	r3, [r5, #0]
    1dba:	786a      	ldrb	r2, [r5, #1]
    1dbc:	0212      	lsls	r2, r2, #8
    1dbe:	431a      	orrs	r2, r3
    1dc0:	78ab      	ldrb	r3, [r5, #2]
    1dc2:	041b      	lsls	r3, r3, #16
    1dc4:	431a      	orrs	r2, r3
    1dc6:	78eb      	ldrb	r3, [r5, #3]
    1dc8:	061b      	lsls	r3, r3, #24
    1dca:	4313      	orrs	r3, r2
    1dcc:	221c      	movs	r2, #28
    1dce:	4013      	ands	r3, r2
    1dd0:	2b08      	cmp	r3, #8
    1dd2:	d04d      	beq.n	1e70 <_spi_m_sync_init+0x13c>
	ASSERT(hw && regs);
    1dd4:	2c00      	cmp	r4, #0
    1dd6:	d100      	bne.n	1dda <_spi_m_sync_init+0xa6>
    1dd8:	e08d      	b.n	1ef6 <_spi_m_sync_init+0x1c2>
    1dda:	2d00      	cmp	r5, #0
    1ddc:	d100      	bne.n	1de0 <_spi_m_sync_init+0xac>
    1dde:	e088      	b.n	1ef2 <_spi_m_sync_init+0x1be>
    1de0:	2001      	movs	r0, #1
    1de2:	4a4c      	ldr	r2, [pc, #304]	; (1f14 <_spi_m_sync_init+0x1e0>)
    1de4:	4949      	ldr	r1, [pc, #292]	; (1f0c <_spi_m_sync_init+0x1d8>)
    1de6:	4b4a      	ldr	r3, [pc, #296]	; (1f10 <_spi_m_sync_init+0x1dc>)
    1de8:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1dea:	782b      	ldrb	r3, [r5, #0]
    1dec:	786a      	ldrb	r2, [r5, #1]
    1dee:	0212      	lsls	r2, r2, #8
    1df0:	431a      	orrs	r2, r3
    1df2:	78ab      	ldrb	r3, [r5, #2]
    1df4:	041b      	lsls	r3, r3, #16
    1df6:	431a      	orrs	r2, r3
    1df8:	78eb      	ldrb	r3, [r5, #3]
    1dfa:	061b      	lsls	r3, r3, #24
    1dfc:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1dfe:	4a46      	ldr	r2, [pc, #280]	; (1f18 <_spi_m_sync_init+0x1e4>)
    1e00:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1e02:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1e04:	69e3      	ldr	r3, [r4, #28]
    1e06:	079b      	lsls	r3, r3, #30
    1e08:	d1fc      	bne.n	1e04 <_spi_m_sync_init+0xd0>
	    (regs->ctrlb
    1e0a:	792b      	ldrb	r3, [r5, #4]
    1e0c:	796a      	ldrb	r2, [r5, #5]
    1e0e:	0212      	lsls	r2, r2, #8
    1e10:	431a      	orrs	r2, r3
    1e12:	79ab      	ldrb	r3, [r5, #6]
    1e14:	041b      	lsls	r3, r3, #16
    1e16:	431a      	orrs	r2, r3
    1e18:	79eb      	ldrb	r3, [r5, #7]
    1e1a:	061b      	lsls	r3, r3, #24
    1e1c:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    1e1e:	4a3f      	ldr	r2, [pc, #252]	; (1f1c <_spi_m_sync_init+0x1e8>)
    1e20:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    1e22:	2280      	movs	r2, #128	; 0x80
    1e24:	0292      	lsls	r2, r2, #10
    1e26:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1e28:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1e2a:	69e3      	ldr	r3, [r4, #28]
    1e2c:	075b      	lsls	r3, r3, #29
    1e2e:	d1fc      	bne.n	1e2a <_spi_m_sync_init+0xf6>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1e30:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1e32:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1e34:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1e36:	2330      	movs	r3, #48	; 0x30
    1e38:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1e3a:	792b      	ldrb	r3, [r5, #4]
    1e3c:	075b      	lsls	r3, r3, #29
    1e3e:	d15c      	bne.n	1efa <_spi_m_sync_init+0x1c6>
    1e40:	2301      	movs	r3, #1
    1e42:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    1e44:	7baa      	ldrb	r2, [r5, #14]
    1e46:	7beb      	ldrb	r3, [r5, #15]
    1e48:	021b      	lsls	r3, r3, #8
    1e4a:	4313      	orrs	r3, r2
    1e4c:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    1e4e:	2000      	movs	r0, #0
}
    1e50:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    1e52:	2801      	cmp	r0, #1
    1e54:	d002      	beq.n	1e5c <_spi_m_sync_init+0x128>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1e56:	3301      	adds	r3, #1
    1e58:	b2db      	uxtb	r3, r3
    1e5a:	e772      	b.n	1d42 <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    1e5c:	011d      	lsls	r5, r3, #4
    1e5e:	18ea      	adds	r2, r5, r3
    1e60:	4d2f      	ldr	r5, [pc, #188]	; (1f20 <_spi_m_sync_init+0x1ec>)
    1e62:	353c      	adds	r5, #60	; 0x3c
    1e64:	18ad      	adds	r5, r5, r2
    1e66:	e770      	b.n	1d4a <_spi_m_sync_init+0x16>
	ASSERT(dev && hw);
    1e68:	2000      	movs	r0, #0
    1e6a:	e775      	b.n	1d58 <_spi_m_sync_init+0x24>
    1e6c:	2000      	movs	r0, #0
    1e6e:	e773      	b.n	1d58 <_spi_m_sync_init+0x24>
	ASSERT(hw && regs);
    1e70:	2c00      	cmp	r4, #0
    1e72:	d03c      	beq.n	1eee <_spi_m_sync_init+0x1ba>
    1e74:	2d00      	cmp	r5, #0
    1e76:	d038      	beq.n	1eea <_spi_m_sync_init+0x1b6>
    1e78:	2001      	movs	r0, #1
    1e7a:	4a2a      	ldr	r2, [pc, #168]	; (1f24 <_spi_m_sync_init+0x1f0>)
    1e7c:	4923      	ldr	r1, [pc, #140]	; (1f0c <_spi_m_sync_init+0x1d8>)
    1e7e:	4b24      	ldr	r3, [pc, #144]	; (1f10 <_spi_m_sync_init+0x1dc>)
    1e80:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1e82:	782b      	ldrb	r3, [r5, #0]
    1e84:	786a      	ldrb	r2, [r5, #1]
    1e86:	0212      	lsls	r2, r2, #8
    1e88:	431a      	orrs	r2, r3
    1e8a:	78ab      	ldrb	r3, [r5, #2]
    1e8c:	041b      	lsls	r3, r3, #16
    1e8e:	431a      	orrs	r2, r3
    1e90:	78eb      	ldrb	r3, [r5, #3]
    1e92:	061b      	lsls	r3, r3, #24
    1e94:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1e96:	4a20      	ldr	r2, [pc, #128]	; (1f18 <_spi_m_sync_init+0x1e4>)
    1e98:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1e9a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1e9c:	69e3      	ldr	r3, [r4, #28]
    1e9e:	079b      	lsls	r3, r3, #30
    1ea0:	d1fc      	bne.n	1e9c <_spi_m_sync_init+0x168>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    1ea2:	792b      	ldrb	r3, [r5, #4]
    1ea4:	796a      	ldrb	r2, [r5, #5]
    1ea6:	0212      	lsls	r2, r2, #8
    1ea8:	431a      	orrs	r2, r3
    1eaa:	79ab      	ldrb	r3, [r5, #6]
    1eac:	041b      	lsls	r3, r3, #16
    1eae:	431a      	orrs	r2, r3
    1eb0:	79eb      	ldrb	r3, [r5, #7]
    1eb2:	061b      	lsls	r3, r3, #24
    1eb4:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    1eb6:	4a1c      	ldr	r2, [pc, #112]	; (1f28 <_spi_m_sync_init+0x1f4>)
    1eb8:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    1eba:	4a1c      	ldr	r2, [pc, #112]	; (1f2c <_spi_m_sync_init+0x1f8>)
    1ebc:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1ebe:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ec0:	69e3      	ldr	r3, [r4, #28]
    1ec2:	075b      	lsls	r3, r3, #29
    1ec4:	d1fc      	bne.n	1ec0 <_spi_m_sync_init+0x18c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1ec6:	7a2b      	ldrb	r3, [r5, #8]
    1ec8:	7a6a      	ldrb	r2, [r5, #9]
    1eca:	0212      	lsls	r2, r2, #8
    1ecc:	431a      	orrs	r2, r3
    1ece:	7aab      	ldrb	r3, [r5, #10]
    1ed0:	041b      	lsls	r3, r3, #16
    1ed2:	431a      	orrs	r2, r3
    1ed4:	7aeb      	ldrb	r3, [r5, #11]
    1ed6:	061b      	lsls	r3, r3, #24
    1ed8:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1eda:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1edc:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1ede:	2330      	movs	r3, #48	; 0x30
    1ee0:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1ee2:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	d1fc      	bne.n	1ee2 <_spi_m_sync_init+0x1ae>
    1ee8:	e7a7      	b.n	1e3a <_spi_m_sync_init+0x106>
	ASSERT(hw && regs);
    1eea:	2000      	movs	r0, #0
    1eec:	e7c5      	b.n	1e7a <_spi_m_sync_init+0x146>
    1eee:	2000      	movs	r0, #0
    1ef0:	e7c3      	b.n	1e7a <_spi_m_sync_init+0x146>
	ASSERT(hw && regs);
    1ef2:	2000      	movs	r0, #0
    1ef4:	e775      	b.n	1de2 <_spi_m_sync_init+0xae>
    1ef6:	2000      	movs	r0, #0
    1ef8:	e773      	b.n	1de2 <_spi_m_sync_init+0xae>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1efa:	2302      	movs	r3, #2
    1efc:	e7a1      	b.n	1e42 <_spi_m_sync_init+0x10e>
		return ERR_INVALID_ARG;
    1efe:	200d      	movs	r0, #13
    1f00:	4240      	negs	r0, r0
    1f02:	e7a5      	b.n	1e50 <_spi_m_sync_init+0x11c>
    1f04:	00001b61 	.word	0x00001b61
    1f08:	00000925 	.word	0x00000925
    1f0c:	0000453c 	.word	0x0000453c
    1f10:	000014a1 	.word	0x000014a1
    1f14:	000008ef 	.word	0x000008ef
    1f18:	fffffefc 	.word	0xfffffefc
    1f1c:	fffd1dbf 	.word	0xfffd1dbf
    1f20:	000044ec 	.word	0x000044ec
    1f24:	00000903 	.word	0x00000903
    1f28:	fffdddbf 	.word	0xfffdddbf
    1f2c:	00020240 	.word	0x00020240

00001f30 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1f30:	b510      	push	{r4, lr}
    1f32:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    1f34:	d00e      	beq.n	1f54 <_spi_m_sync_enable+0x24>
    1f36:	6803      	ldr	r3, [r0, #0]
    1f38:	2b00      	cmp	r3, #0
    1f3a:	d009      	beq.n	1f50 <_spi_m_sync_enable+0x20>
    1f3c:	2001      	movs	r0, #1
    1f3e:	2298      	movs	r2, #152	; 0x98
    1f40:	0112      	lsls	r2, r2, #4
    1f42:	4905      	ldr	r1, [pc, #20]	; (1f58 <_spi_m_sync_enable+0x28>)
    1f44:	4b05      	ldr	r3, [pc, #20]	; (1f5c <_spi_m_sync_enable+0x2c>)
    1f46:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1f48:	6820      	ldr	r0, [r4, #0]
    1f4a:	4b05      	ldr	r3, [pc, #20]	; (1f60 <_spi_m_sync_enable+0x30>)
    1f4c:	4798      	blx	r3
}
    1f4e:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    1f50:	2000      	movs	r0, #0
    1f52:	e7f4      	b.n	1f3e <_spi_m_sync_enable+0xe>
    1f54:	2000      	movs	r0, #0
    1f56:	e7f2      	b.n	1f3e <_spi_m_sync_enable+0xe>
    1f58:	0000453c 	.word	0x0000453c
    1f5c:	000014a1 	.word	0x000014a1
    1f60:	00001b71 	.word	0x00001b71

00001f64 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f66:	46ce      	mov	lr, r9
    1f68:	4647      	mov	r7, r8
    1f6a:	b580      	push	{r7, lr}
    1f6c:	b089      	sub	sp, #36	; 0x24
    1f6e:	4681      	mov	r9, r0
    1f70:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    1f72:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1f74:	680b      	ldr	r3, [r1, #0]
    1f76:	9303      	str	r3, [sp, #12]
    1f78:	684b      	ldr	r3, [r1, #4]
    1f7a:	9304      	str	r3, [sp, #16]
    1f7c:	2300      	movs	r3, #0
    1f7e:	9305      	str	r3, [sp, #20]
    1f80:	9306      	str	r3, [sp, #24]
    1f82:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    1f84:	2800      	cmp	r0, #0
    1f86:	d014      	beq.n	1fb2 <_spi_m_sync_trans+0x4e>
    1f88:	2c00      	cmp	r4, #0
    1f8a:	d010      	beq.n	1fae <_spi_m_sync_trans+0x4a>
    1f8c:	2001      	movs	r0, #1
    1f8e:	4a37      	ldr	r2, [pc, #220]	; (206c <STACK_SIZE+0x6c>)
    1f90:	4937      	ldr	r1, [pc, #220]	; (2070 <STACK_SIZE+0x70>)
    1f92:	4b38      	ldr	r3, [pc, #224]	; (2074 <STACK_SIZE+0x74>)
    1f94:	4798      	blx	r3
    1f96:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1f98:	075b      	lsls	r3, r3, #29
    1f9a:	d164      	bne.n	2066 <STACK_SIZE+0x66>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1f9c:	69e3      	ldr	r3, [r4, #28]
    1f9e:	079b      	lsls	r3, r3, #30
    1fa0:	d1fc      	bne.n	1f9c <_spi_m_sync_trans+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1fa2:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1fa4:	079b      	lsls	r3, r3, #30
    1fa6:	d420      	bmi.n	1fea <_spi_m_sync_trans+0x86>
		return ERR_NOT_INITIALIZED;
    1fa8:	2014      	movs	r0, #20
    1faa:	4240      	negs	r0, r0
    1fac:	e056      	b.n	205c <STACK_SIZE+0x5c>
	ASSERT(dev && hw);
    1fae:	2000      	movs	r0, #0
    1fb0:	e7ed      	b.n	1f8e <_spi_m_sync_trans+0x2a>
    1fb2:	2000      	movs	r0, #0
    1fb4:	e7eb      	b.n	1f8e <_spi_m_sync_trans+0x2a>
		return false;
    1fb6:	2200      	movs	r2, #0
    1fb8:	e02d      	b.n	2016 <STACK_SIZE+0x16>
			data |= (*ctrl->txbuf) << 8;
    1fba:	7848      	ldrb	r0, [r1, #1]
    1fbc:	0200      	lsls	r0, r0, #8
    1fbe:	4647      	mov	r7, r8
    1fc0:	4307      	orrs	r7, r0
    1fc2:	46b8      	mov	r8, r7
			ctrl->txbuf++;
    1fc4:	3102      	adds	r1, #2
    1fc6:	9103      	str	r1, [sp, #12]
	ctrl->txcnt++;
    1fc8:	3201      	adds	r2, #1
    1fca:	9205      	str	r2, [sp, #20]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1fcc:	4642      	mov	r2, r8
    1fce:	62a2      	str	r2, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1fd0:	b25b      	sxtb	r3, r3
    1fd2:	2b00      	cmp	r3, #0
    1fd4:	db35      	blt.n	2042 <STACK_SIZE+0x42>
	return ERR_NONE;
    1fd6:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    1fd8:	2800      	cmp	r0, #0
    1fda:	db3a      	blt.n	2052 <STACK_SIZE+0x52>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1fdc:	9805      	ldr	r0, [sp, #20]
    1fde:	68ab      	ldr	r3, [r5, #8]
    1fe0:	4298      	cmp	r0, r3
    1fe2:	d302      	bcc.n	1fea <_spi_m_sync_trans+0x86>
    1fe4:	9a06      	ldr	r2, [sp, #24]
    1fe6:	4293      	cmp	r3, r2
    1fe8:	d933      	bls.n	2052 <STACK_SIZE+0x52>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1fea:	7e23      	ldrb	r3, [r4, #24]
    1fec:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1fee:	075a      	lsls	r2, r3, #29
    1ff0:	d5e1      	bpl.n	1fb6 <_spi_m_sync_trans+0x52>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1ff2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1ff4:	9a04      	ldr	r2, [sp, #16]
    1ff6:	2a00      	cmp	r2, #0
    1ff8:	d008      	beq.n	200c <STACK_SIZE+0xc>
		*ctrl->rxbuf++ = (uint8_t)data;
    1ffa:	1c50      	adds	r0, r2, #1
    1ffc:	9004      	str	r0, [sp, #16]
    1ffe:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    2000:	2e01      	cmp	r6, #1
    2002:	d903      	bls.n	200c <STACK_SIZE+0xc>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    2004:	1c90      	adds	r0, r2, #2
    2006:	9004      	str	r0, [sp, #16]
    2008:	0a09      	lsrs	r1, r1, #8
    200a:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    200c:	9a06      	ldr	r2, [sp, #24]
    200e:	9201      	str	r2, [sp, #4]
    2010:	3201      	adds	r2, #1
    2012:	9206      	str	r2, [sp, #24]
	return true;
    2014:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    2016:	2a00      	cmp	r2, #0
    2018:	d1da      	bne.n	1fd0 <_spi_m_sync_trans+0x6c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    201a:	9906      	ldr	r1, [sp, #24]
    201c:	9a05      	ldr	r2, [sp, #20]
    201e:	4291      	cmp	r1, r2
    2020:	d3d6      	bcc.n	1fd0 <_spi_m_sync_trans+0x6c>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    2022:	4649      	mov	r1, r9
    2024:	88c8      	ldrh	r0, [r1, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2026:	07d9      	lsls	r1, r3, #31
    2028:	d5d2      	bpl.n	1fd0 <_spi_m_sync_trans+0x6c>
	if (ctrl->txbuf) {
    202a:	9903      	ldr	r1, [sp, #12]
    202c:	2900      	cmp	r1, #0
    202e:	d006      	beq.n	203e <STACK_SIZE+0x3e>
		data = *ctrl->txbuf++;
    2030:	1c48      	adds	r0, r1, #1
    2032:	9003      	str	r0, [sp, #12]
    2034:	7808      	ldrb	r0, [r1, #0]
    2036:	4680      	mov	r8, r0
		if (ctrl->char_size > 1) {
    2038:	2e01      	cmp	r6, #1
    203a:	d8be      	bhi.n	1fba <_spi_m_sync_trans+0x56>
    203c:	e7c4      	b.n	1fc8 <_spi_m_sync_trans+0x64>
		data = dummy;
    203e:	4680      	mov	r8, r0
    2040:	e7c2      	b.n	1fc8 <_spi_m_sync_trans+0x64>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    2042:	2301      	movs	r3, #1
    2044:	425b      	negs	r3, r3
    2046:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2048:	3381      	adds	r3, #129	; 0x81
    204a:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    204c:	2013      	movs	r0, #19
    204e:	4240      	negs	r0, r0
    2050:	e7c2      	b.n	1fd8 <_spi_m_sync_trans+0x74>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    2052:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    2054:	079b      	lsls	r3, r3, #30
    2056:	d0fc      	beq.n	2052 <STACK_SIZE+0x52>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2058:	2303      	movs	r3, #3
    205a:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    205c:	b009      	add	sp, #36	; 0x24
    205e:	bc0c      	pop	{r2, r3}
    2060:	4690      	mov	r8, r2
    2062:	4699      	mov	r9, r3
    2064:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    2066:	2004      	movs	r0, #4
    2068:	4240      	negs	r0, r0
    206a:	e7f7      	b.n	205c <STACK_SIZE+0x5c>
    206c:	00000a85 	.word	0x00000a85
    2070:	0000453c 	.word	0x0000453c
    2074:	000014a1 	.word	0x000014a1

00002078 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2078:	4b02      	ldr	r3, [pc, #8]	; (2084 <_system_time_init+0xc>)
    207a:	4a03      	ldr	r2, [pc, #12]	; (2088 <_system_time_init+0x10>)
    207c:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    207e:	2205      	movs	r2, #5
    2080:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    2082:	4770      	bx	lr
    2084:	e000e010 	.word	0xe000e010
    2088:	00ffffff 	.word	0x00ffffff

0000208c <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    208c:	b510      	push	{r4, lr}
	_system_time_init(hw);
    208e:	4b01      	ldr	r3, [pc, #4]	; (2094 <_delay_init+0x8>)
    2090:	4798      	blx	r3
}
    2092:	bd10      	pop	{r4, pc}
    2094:	00002079 	.word	0x00002079

00002098 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2098:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    209a:	e00b      	b.n	20b4 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    209c:	4b0b      	ldr	r3, [pc, #44]	; (20cc <_delay_cycles+0x34>)
    209e:	480c      	ldr	r0, [pc, #48]	; (20d0 <_delay_cycles+0x38>)
    20a0:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    20a2:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    20a4:	4b09      	ldr	r3, [pc, #36]	; (20cc <_delay_cycles+0x34>)
    20a6:	681b      	ldr	r3, [r3, #0]
    20a8:	03db      	lsls	r3, r3, #15
    20aa:	d5fb      	bpl.n	20a4 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    20ac:	4b09      	ldr	r3, [pc, #36]	; (20d4 <_delay_cycles+0x3c>)
    20ae:	469c      	mov	ip, r3
    20b0:	4461      	add	r1, ip
	while (n--) {
    20b2:	0010      	movs	r0, r2
    20b4:	1e42      	subs	r2, r0, #1
    20b6:	b2d2      	uxtb	r2, r2
    20b8:	2800      	cmp	r0, #0
    20ba:	d1ef      	bne.n	209c <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    20bc:	4b03      	ldr	r3, [pc, #12]	; (20cc <_delay_cycles+0x34>)
    20be:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    20c0:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    20c2:	4b02      	ldr	r3, [pc, #8]	; (20cc <_delay_cycles+0x34>)
    20c4:	681b      	ldr	r3, [r3, #0]
    20c6:	03db      	lsls	r3, r3, #15
    20c8:	d5fb      	bpl.n	20c2 <_delay_cycles+0x2a>
		;
}
    20ca:	4770      	bx	lr
    20cc:	e000e010 	.word	0xe000e010
    20d0:	00ffffff 	.word	0x00ffffff
    20d4:	ff000001 	.word	0xff000001

000020d8 <TIMER_0_task1_cb>:


// for tt1
static void TIMER_0_task1_cb(const struct timer_task *const timer_task)
{
	display_ms_counter++; // toggle the counter for the display, this is instead of delays
    20d8:	4a02      	ldr	r2, [pc, #8]	; (20e4 <TIMER_0_task1_cb+0xc>)
    20da:	6813      	ldr	r3, [r2, #0]
    20dc:	3301      	adds	r3, #1
    20de:	6013      	str	r3, [r2, #0]
}
    20e0:	4770      	bx	lr
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	200000d0 	.word	0x200000d0

000020e8 <TIMER_ams_task_cb>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    20e8:	2280      	movs	r2, #128	; 0x80
    20ea:	0212      	lsls	r2, r2, #8
    20ec:	23c0      	movs	r3, #192	; 0xc0
    20ee:	05db      	lsls	r3, r3, #23
    20f0:	615a      	str	r2, [r3, #20]

static void TIMER_ams_task_cb(const struct timer_task *const timer_task)
{
	// Use this to reset the latch of the RED ams light
	gpio_set_pin_level(LEDYellow,0); // @@ replace with the red light when available.
}
    20f2:	4770      	bx	lr

000020f4 <TIMER_keep_alive_ams_cb>:

static void TIMER_keep_alive_ams_cb(const struct timer_task *const timer_task)
{
	//check if the previous one has incremented
	if(recive_can_bms_counter <=last_state )
    20f4:	4b06      	ldr	r3, [pc, #24]	; (2110 <TIMER_keep_alive_ams_cb+0x1c>)
    20f6:	685a      	ldr	r2, [r3, #4]
    20f8:	689b      	ldr	r3, [r3, #8]
    20fa:	429a      	cmp	r2, r3
    20fc:	dd02      	ble.n	2104 <TIMER_keep_alive_ams_cb+0x10>
	{
		gpio_set_pin_level(LEDYellow,1); // toggle one
	}
	else
	{
		last_state = recive_can_bms_counter;
    20fe:	4b04      	ldr	r3, [pc, #16]	; (2110 <TIMER_keep_alive_ams_cb+0x1c>)
    2100:	609a      	str	r2, [r3, #8]
	}
	
}
    2102:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2104:	2280      	movs	r2, #128	; 0x80
    2106:	0212      	lsls	r2, r2, #8
    2108:	23c0      	movs	r3, #192	; 0xc0
    210a:	05db      	lsls	r3, r3, #23
    210c:	619a      	str	r2, [r3, #24]
    210e:	e7f8      	b.n	2102 <TIMER_keep_alive_ams_cb+0xe>
    2110:	200000d0 	.word	0x200000d0

00002114 <CAN_0_tx_callback>:

static void CAN_0_tx_callback(struct can_async_descriptor *const descr) // just to not make it angry
{
	(void)descr;
}
    2114:	4770      	bx	lr
	...

00002118 <CAN_0_rx_callback>:

// can handler
static void CAN_0_rx_callback(struct can_async_descriptor *const descr) // This is an interrupt, we will parse the messages
{
    2118:	b510      	push	{r4, lr}
    211a:	b086      	sub	sp, #24

	
	struct can_message msg;
	uint8_t            data[8];
	msg.data = data;
    211c:	466b      	mov	r3, sp
    211e:	9304      	str	r3, [sp, #16]
	can_async_read(descr, &msg);
    2120:	a902      	add	r1, sp, #8
    2122:	4b1a      	ldr	r3, [pc, #104]	; (218c <CAN_0_rx_callback+0x74>)
    2124:	4798      	blx	r3
	
	// Switch statement to check and parse the information
	
	switch (msg.id)
    2126:	9b02      	ldr	r3, [sp, #8]
    2128:	2b09      	cmp	r3, #9
    212a:	d003      	beq.n	2134 <CAN_0_rx_callback+0x1c>
    212c:	2b0a      	cmp	r3, #10
    212e:	d017      	beq.n	2160 <CAN_0_rx_callback+0x48>
		break;
		
	}
	
	return;
}
    2130:	b006      	add	sp, #24
    2132:	bd10      	pop	{r4, pc}
		recive_can_bms_counter++;
    2134:	4a16      	ldr	r2, [pc, #88]	; (2190 <CAN_0_rx_callback+0x78>)
    2136:	6853      	ldr	r3, [r2, #4]
    2138:	3301      	adds	r3, #1
    213a:	6053      	str	r3, [r2, #4]
		charge_safety = ((msg.data[1]>>CHARGE_SAFETY_BIT)&1);
    213c:	9b04      	ldr	r3, [sp, #16]
    213e:	785a      	ldrb	r2, [r3, #1]
    2140:	0992      	lsrs	r2, r2, #6
    2142:	2301      	movs	r3, #1
    2144:	4013      	ands	r3, r2
    2146:	4a13      	ldr	r2, [pc, #76]	; (2194 <CAN_0_rx_callback+0x7c>)
    2148:	7013      	strb	r3, [r2, #0]
		discharge_state = ((msg.data[1]>>DISCHARGE_STATE_BIT)&1);
    214a:	2100      	movs	r1, #0
    214c:	4a12      	ldr	r2, [pc, #72]	; (2198 <CAN_0_rx_callback+0x80>)
    214e:	7011      	strb	r1, [r2, #0]
		if(charge_safety&&discharge_state == 0) // There is an issue, latch the LED
    2150:	2b00      	cmp	r3, #0
    2152:	d0ed      	beq.n	2130 <CAN_0_rx_callback+0x18>
    2154:	2280      	movs	r2, #128	; 0x80
    2156:	0212      	lsls	r2, r2, #8
    2158:	23c0      	movs	r3, #192	; 0xc0
    215a:	05db      	lsls	r3, r3, #23
    215c:	619a      	str	r2, [r3, #24]
    215e:	e7e7      	b.n	2130 <CAN_0_rx_callback+0x18>
		memcpy(CAN_battery_charge_and_temp_buffer[CAN_battery_charge_and_temp_buffer_head],msg.data,4);
    2160:	4c0b      	ldr	r4, [pc, #44]	; (2190 <CAN_0_rx_callback+0x78>)
    2162:	7b23      	ldrb	r3, [r4, #12]
    2164:	0020      	movs	r0, r4
    2166:	3010      	adds	r0, #16
    2168:	00db      	lsls	r3, r3, #3
    216a:	18c0      	adds	r0, r0, r3
    216c:	2204      	movs	r2, #4
    216e:	9904      	ldr	r1, [sp, #16]
    2170:	4b0a      	ldr	r3, [pc, #40]	; (219c <CAN_0_rx_callback+0x84>)
    2172:	4798      	blx	r3
		CAN_battery_charge_and_temp_buffer_head++;
    2174:	7b23      	ldrb	r3, [r4, #12]
    2176:	3301      	adds	r3, #1
    2178:	b2db      	uxtb	r3, r3
    217a:	7323      	strb	r3, [r4, #12]
		if(CAN_battery_charge_and_temp_buffer_head >= CAN_RX_BUFFER_LENGTH)
    217c:	7b23      	ldrb	r3, [r4, #12]
    217e:	b2db      	uxtb	r3, r3
    2180:	2b09      	cmp	r3, #9
    2182:	d9d5      	bls.n	2130 <CAN_0_rx_callback+0x18>
			CAN_battery_charge_and_temp_buffer_head = 0;
    2184:	2200      	movs	r2, #0
    2186:	4b02      	ldr	r3, [pc, #8]	; (2190 <CAN_0_rx_callback+0x78>)
    2188:	731a      	strb	r2, [r3, #12]
	return;
    218a:	e7d1      	b.n	2130 <CAN_0_rx_callback+0x18>
    218c:	00000e8d 	.word	0x00000e8d
    2190:	200000d0 	.word	0x200000d0
    2194:	200002dd 	.word	0x200002dd
    2198:	200002dc 	.word	0x200002dc
    219c:	00003c49 	.word	0x00003c49

000021a0 <startFrame>:
#include "USER_DEF.h"



// write this function at the beginning of every frame - clears previous frame and handles default values
void startFrame(){
    21a0:	b510      	push	{r4, lr}
  FT8_cmd_dl(CMD_DLSTART); /* start the display list */
    21a2:	4804      	ldr	r0, [pc, #16]	; (21b4 <startFrame+0x14>)
    21a4:	4c04      	ldr	r4, [pc, #16]	; (21b8 <startFrame+0x18>)
    21a6:	47a0      	blx	r4
  FT8_cmd_dl(DL_CLEAR_RGB | COLOR_RGB(backgroundColorR,backgroundColorG,backgroundColorB)); /* set the default clear the background color */
    21a8:	4804      	ldr	r0, [pc, #16]	; (21bc <startFrame+0x1c>)
    21aa:	47a0      	blx	r4
  FT8_cmd_dl(DL_CLEAR | CLR_COL | CLR_STN | CLR_TAG); /* clear the screen - this and the previous prevent artifacts between lists, Attributes are the color, stencil and tag buffers */
    21ac:	4804      	ldr	r0, [pc, #16]	; (21c0 <startFrame+0x20>)
    21ae:	47a0      	blx	r4
}
    21b0:	bd10      	pop	{r4, pc}
    21b2:	46c0      	nop			; (mov r8, r8)
    21b4:	ffffff00 	.word	0xffffff00
    21b8:	00000411 	.word	0x00000411
    21bc:	067f7f7f 	.word	0x067f7f7f
    21c0:	26000007 	.word	0x26000007

000021c4 <endFrame>:

// write this function at the end of every frame - handles end of frame data prottocols to force screen update and flush buffer
void endFrame(){
    21c4:	b510      	push	{r4, lr}
  FT8_cmd_dl(DL_DISPLAY); /* instruct the graphics processor to show the list */
    21c6:	2000      	movs	r0, #0
    21c8:	4c03      	ldr	r4, [pc, #12]	; (21d8 <endFrame+0x14>)
    21ca:	47a0      	blx	r4
  FT8_cmd_dl(CMD_SWAP); /* make this list active */
    21cc:	20ff      	movs	r0, #255	; 0xff
    21ce:	4240      	negs	r0, r0
    21d0:	47a0      	blx	r4
  FT8_cmd_execute();
    21d2:	4b02      	ldr	r3, [pc, #8]	; (21dc <endFrame+0x18>)
    21d4:	4798      	blx	r3
}
    21d6:	bd10      	pop	{r4, pc}
    21d8:	00000411 	.word	0x00000411
    21dc:	0000033d 	.word	0x0000033d

000021e0 <display_numberRight>:
  //color is set by the input arguments
  FT8_cmd_dl(DL_COLOR_RGB | COLOR_RGB(R,G,B));
  FT8_cmd_number(x, y, font, 0, number);
}

void display_numberRight(int x, int y, int font, int number){
    21e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21e2:	b083      	sub	sp, #12
    21e4:	0004      	movs	r4, r0
    21e6:	000d      	movs	r5, r1
    21e8:	0016      	movs	r6, r2
    21ea:	001f      	movs	r7, r3
  //displays number at given coordinates and font(size)
  //(x,y) set the TOP RIGHT point of the number
  //color is the default draw color
  FT8_cmd_dl(DL_COLOR_RGB | COLOR_RGB(defDrawColorR,defDrawColorG,defDrawColorB));
    21ec:	4806      	ldr	r0, [pc, #24]	; (2208 <display_numberRight+0x28>)
    21ee:	4b07      	ldr	r3, [pc, #28]	; (220c <display_numberRight+0x2c>)
    21f0:	4798      	blx	r3
  FT8_cmd_number(x, y, font, FT8_OPT_RIGHTX, number);
    21f2:	b232      	sxth	r2, r6
    21f4:	b229      	sxth	r1, r5
    21f6:	b220      	sxth	r0, r4
    21f8:	9700      	str	r7, [sp, #0]
    21fa:	2380      	movs	r3, #128	; 0x80
    21fc:	011b      	lsls	r3, r3, #4
    21fe:	4c04      	ldr	r4, [pc, #16]	; (2210 <display_numberRight+0x30>)
    2200:	47a0      	blx	r4
}
    2202:	b003      	add	sp, #12
    2204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2206:	46c0      	nop			; (mov r8, r8)
    2208:	04ffffff 	.word	0x04ffffff
    220c:	00000411 	.word	0x00000411
    2210:	00000691 	.word	0x00000691

00002214 <display_text>:
  FT8_cmd_number(x, y, font, FT8_OPT_RIGHTX, number);
}



void display_text(int x, int y, int font, const char* text){
    2214:	b5f0      	push	{r4, r5, r6, r7, lr}
    2216:	b083      	sub	sp, #12
    2218:	0004      	movs	r4, r0
    221a:	000d      	movs	r5, r1
    221c:	0016      	movs	r6, r2
    221e:	001f      	movs	r7, r3
  //displays text at given coordinates and font(size)
  //(x,y) set the TOP LEFT point of the text
  //color is the default draw color
  FT8_cmd_dl(DL_COLOR_RGB | COLOR_RGB(defDrawColorR,defDrawColorG,defDrawColorB));
    2220:	4805      	ldr	r0, [pc, #20]	; (2238 <display_text+0x24>)
    2222:	4b06      	ldr	r3, [pc, #24]	; (223c <display_text+0x28>)
    2224:	4798      	blx	r3
  FT8_cmd_text(x, y, font, 0, text);
    2226:	b232      	sxth	r2, r6
    2228:	b229      	sxth	r1, r5
    222a:	b220      	sxth	r0, r4
    222c:	9700      	str	r7, [sp, #0]
    222e:	2300      	movs	r3, #0
    2230:	4c03      	ldr	r4, [pc, #12]	; (2240 <display_text+0x2c>)
    2232:	47a0      	blx	r4
}
    2234:	b003      	add	sp, #12
    2236:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2238:	04ffffff 	.word	0x04ffffff
    223c:	00000411 	.word	0x00000411
    2240:	00000469 	.word	0x00000469

00002244 <display_numbers_around_gauge>:
  FT8_cmd_dl(DL_COLOR_RGB | COLOR_RGB(R,G,B));
  FT8_cmd_text(x, y, font, FT8_OPT_RIGHTX, text);
}

void display_numbers_around_gauge(int x0, int y0, int radius, int font)
{
    2244:	b5f0      	push	{r4, r5, r6, r7, lr}
    2246:	46d6      	mov	lr, sl
    2248:	b500      	push	{lr}
    224a:	b092      	sub	sp, #72	; 0x48
    224c:	0007      	movs	r7, r0
    224e:	9107      	str	r1, [sp, #28]
    2250:	0015      	movs	r5, r2
    2252:	930c      	str	r3, [sp, #48]	; 0x30
	// consider the gauge being put inside a square and use the width and height accordingly to determine the proportions
	
	// gauge code is set to go from 0-60, therefore there will be 45 degree angle between each major sector. Feel free to change this if you wish
	
	// 0
	FT8_cmd_dl(DL_COLOR_RGB | WHITE);
    2254:	485d      	ldr	r0, [pc, #372]	; (23cc <display_numbers_around_gauge+0x188>)
    2256:	4b5e      	ldr	r3, [pc, #376]	; (23d0 <display_numbers_around_gauge+0x18c>)
    2258:	4798      	blx	r3
	FT8_cmd_number((int)(x0-(radius*0.8)), (int)(y0+(radius*0.8)), font, FT8_OPT_RIGHTX, 0);
    225a:	4e5e      	ldr	r6, [pc, #376]	; (23d4 <display_numbers_around_gauge+0x190>)
    225c:	0038      	movs	r0, r7
    225e:	47b0      	blx	r6
    2260:	9002      	str	r0, [sp, #8]
    2262:	9103      	str	r1, [sp, #12]
    2264:	0028      	movs	r0, r5
    2266:	47b0      	blx	r6
    2268:	0004      	movs	r4, r0
    226a:	000d      	movs	r5, r1
    226c:	4a5a      	ldr	r2, [pc, #360]	; (23d8 <display_numbers_around_gauge+0x194>)
    226e:	4692      	mov	sl, r2
    2270:	4a5a      	ldr	r2, [pc, #360]	; (23dc <display_numbers_around_gauge+0x198>)
    2272:	4b5b      	ldr	r3, [pc, #364]	; (23e0 <display_numbers_around_gauge+0x19c>)
    2274:	9404      	str	r4, [sp, #16]
    2276:	9505      	str	r5, [sp, #20]
    2278:	47d0      	blx	sl
    227a:	0002      	movs	r2, r0
    227c:	000b      	movs	r3, r1
    227e:	4c59      	ldr	r4, [pc, #356]	; (23e4 <display_numbers_around_gauge+0x1a0>)
    2280:	920a      	str	r2, [sp, #40]	; 0x28
    2282:	930b      	str	r3, [sp, #44]	; 0x2c
    2284:	9802      	ldr	r0, [sp, #8]
    2286:	9903      	ldr	r1, [sp, #12]
    2288:	47a0      	blx	r4
    228a:	4d57      	ldr	r5, [pc, #348]	; (23e8 <display_numbers_around_gauge+0x1a4>)
    228c:	47a8      	blx	r5
    228e:	b207      	sxth	r7, r0
    2290:	9807      	ldr	r0, [sp, #28]
    2292:	47b0      	blx	r6
    2294:	4e55      	ldr	r6, [pc, #340]	; (23ec <display_numbers_around_gauge+0x1a8>)
    2296:	9008      	str	r0, [sp, #32]
    2298:	9109      	str	r1, [sp, #36]	; 0x24
    229a:	0002      	movs	r2, r0
    229c:	000b      	movs	r3, r1
    229e:	980a      	ldr	r0, [sp, #40]	; 0x28
    22a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    22a2:	47b0      	blx	r6
    22a4:	47a8      	blx	r5
    22a6:	b201      	sxth	r1, r0
    22a8:	0008      	movs	r0, r1
    22aa:	466b      	mov	r3, sp
    22ac:	2130      	movs	r1, #48	; 0x30
    22ae:	5e5b      	ldrsh	r3, [r3, r1]
    22b0:	0019      	movs	r1, r3
    22b2:	2300      	movs	r3, #0
    22b4:	9300      	str	r3, [sp, #0]
    22b6:	2380      	movs	r3, #128	; 0x80
    22b8:	011b      	lsls	r3, r3, #4
    22ba:	9107      	str	r1, [sp, #28]
    22bc:	000a      	movs	r2, r1
    22be:	900d      	str	r0, [sp, #52]	; 0x34
    22c0:	0001      	movs	r1, r0
    22c2:	970c      	str	r7, [sp, #48]	; 0x30
    22c4:	0038      	movs	r0, r7
    22c6:	4f4a      	ldr	r7, [pc, #296]	; (23f0 <display_numbers_around_gauge+0x1ac>)
    22c8:	47b8      	blx	r7
	
	// 10
	FT8_cmd_number((int)(x0-(radius*1.1)), (int)(y0-(0.1*radius)), font, FT8_OPT_RIGHTX, 10);
    22ca:	4a44      	ldr	r2, [pc, #272]	; (23dc <display_numbers_around_gauge+0x198>)
    22cc:	4b49      	ldr	r3, [pc, #292]	; (23f4 <display_numbers_around_gauge+0x1b0>)
    22ce:	9804      	ldr	r0, [sp, #16]
    22d0:	9905      	ldr	r1, [sp, #20]
    22d2:	47d0      	blx	sl
    22d4:	9010      	str	r0, [sp, #64]	; 0x40
    22d6:	9111      	str	r1, [sp, #68]	; 0x44
    22d8:	0002      	movs	r2, r0
    22da:	000b      	movs	r3, r1
    22dc:	9802      	ldr	r0, [sp, #8]
    22de:	9903      	ldr	r1, [sp, #12]
    22e0:	47a0      	blx	r4
    22e2:	47a8      	blx	r5
    22e4:	900e      	str	r0, [sp, #56]	; 0x38
    22e6:	4a3d      	ldr	r2, [pc, #244]	; (23dc <display_numbers_around_gauge+0x198>)
    22e8:	4b43      	ldr	r3, [pc, #268]	; (23f8 <display_numbers_around_gauge+0x1b4>)
    22ea:	9804      	ldr	r0, [sp, #16]
    22ec:	9905      	ldr	r1, [sp, #20]
    22ee:	47d0      	blx	sl
    22f0:	0002      	movs	r2, r0
    22f2:	000b      	movs	r3, r1
    22f4:	9808      	ldr	r0, [sp, #32]
    22f6:	9909      	ldr	r1, [sp, #36]	; 0x24
    22f8:	47a0      	blx	r4
    22fa:	47a8      	blx	r5
    22fc:	b203      	sxth	r3, r0
    22fe:	0019      	movs	r1, r3
    2300:	466b      	mov	r3, sp
    2302:	2038      	movs	r0, #56	; 0x38
    2304:	5e18      	ldrsh	r0, [r3, r0]
    2306:	230a      	movs	r3, #10
    2308:	9300      	str	r3, [sp, #0]
    230a:	2380      	movs	r3, #128	; 0x80
    230c:	011b      	lsls	r3, r3, #4
    230e:	9a07      	ldr	r2, [sp, #28]
    2310:	910e      	str	r1, [sp, #56]	; 0x38
    2312:	47b8      	blx	r7
	
	// 20
	FT8_cmd_number((int)(x0-(radius*0.8)), (int)(y0-(radius*0.9)), font, FT8_OPT_RIGHTX, 20);
    2314:	4a39      	ldr	r2, [pc, #228]	; (23fc <display_numbers_around_gauge+0x1b8>)
    2316:	4b3a      	ldr	r3, [pc, #232]	; (2400 <display_numbers_around_gauge+0x1bc>)
    2318:	9804      	ldr	r0, [sp, #16]
    231a:	9905      	ldr	r1, [sp, #20]
    231c:	47d0      	blx	sl
    231e:	0002      	movs	r2, r0
    2320:	000b      	movs	r3, r1
    2322:	9808      	ldr	r0, [sp, #32]
    2324:	9909      	ldr	r1, [sp, #36]	; 0x24
    2326:	47a0      	blx	r4
    2328:	47a8      	blx	r5
    232a:	b203      	sxth	r3, r0
    232c:	0019      	movs	r1, r3
    232e:	2314      	movs	r3, #20
    2330:	9300      	str	r3, [sp, #0]
    2332:	2380      	movs	r3, #128	; 0x80
    2334:	011b      	lsls	r3, r3, #4
    2336:	9a07      	ldr	r2, [sp, #28]
    2338:	910f      	str	r1, [sp, #60]	; 0x3c
    233a:	980c      	ldr	r0, [sp, #48]	; 0x30
    233c:	47b8      	blx	r7
	
	// 30
	FT8_cmd_number((int)(x0-(radius*0.05)), (int)(y0-(1.3*radius)), font, 0, 30);
    233e:	4a27      	ldr	r2, [pc, #156]	; (23dc <display_numbers_around_gauge+0x198>)
    2340:	4b30      	ldr	r3, [pc, #192]	; (2404 <display_numbers_around_gauge+0x1c0>)
    2342:	9804      	ldr	r0, [sp, #16]
    2344:	9905      	ldr	r1, [sp, #20]
    2346:	47d0      	blx	sl
    2348:	0002      	movs	r2, r0
    234a:	000b      	movs	r3, r1
    234c:	9802      	ldr	r0, [sp, #8]
    234e:	9903      	ldr	r1, [sp, #12]
    2350:	47a0      	blx	r4
    2352:	47a8      	blx	r5
    2354:	900c      	str	r0, [sp, #48]	; 0x30
    2356:	4a29      	ldr	r2, [pc, #164]	; (23fc <display_numbers_around_gauge+0x1b8>)
    2358:	4b2b      	ldr	r3, [pc, #172]	; (2408 <display_numbers_around_gauge+0x1c4>)
    235a:	9804      	ldr	r0, [sp, #16]
    235c:	9905      	ldr	r1, [sp, #20]
    235e:	47d0      	blx	sl
    2360:	0002      	movs	r2, r0
    2362:	000b      	movs	r3, r1
    2364:	9808      	ldr	r0, [sp, #32]
    2366:	9909      	ldr	r1, [sp, #36]	; 0x24
    2368:	47a0      	blx	r4
    236a:	47a8      	blx	r5
    236c:	b201      	sxth	r1, r0
    236e:	466b      	mov	r3, sp
    2370:	2430      	movs	r4, #48	; 0x30
    2372:	5f18      	ldrsh	r0, [r3, r4]
    2374:	231e      	movs	r3, #30
    2376:	9300      	str	r3, [sp, #0]
    2378:	2300      	movs	r3, #0
    237a:	9a07      	ldr	r2, [sp, #28]
    237c:	47b8      	blx	r7
	
	// 40
	FT8_cmd_number((int)(x0+(radius*0.8)), (int)(y0-(radius*0.9)), font, 0, 40);
    237e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2382:	9802      	ldr	r0, [sp, #8]
    2384:	9903      	ldr	r1, [sp, #12]
    2386:	47b0      	blx	r6
    2388:	47a8      	blx	r5
    238a:	b204      	sxth	r4, r0
    238c:	2328      	movs	r3, #40	; 0x28
    238e:	9300      	str	r3, [sp, #0]
    2390:	2300      	movs	r3, #0
    2392:	9a07      	ldr	r2, [sp, #28]
    2394:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2396:	0020      	movs	r0, r4
    2398:	47b8      	blx	r7
	
	// 10
	FT8_cmd_number((int)(x0+(radius*1.1)), (int)(y0-(0.1*radius)), font, 0, 50);
    239a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    239c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    239e:	9802      	ldr	r0, [sp, #8]
    23a0:	9903      	ldr	r1, [sp, #12]
    23a2:	47b0      	blx	r6
    23a4:	47a8      	blx	r5
    23a6:	b200      	sxth	r0, r0
    23a8:	2332      	movs	r3, #50	; 0x32
    23aa:	9300      	str	r3, [sp, #0]
    23ac:	2300      	movs	r3, #0
    23ae:	9d07      	ldr	r5, [sp, #28]
    23b0:	002a      	movs	r2, r5
    23b2:	990e      	ldr	r1, [sp, #56]	; 0x38
    23b4:	47b8      	blx	r7
	
	// 60
	FT8_cmd_number((int)(x0+(radius*0.8)), (int)(y0+(radius*0.8)), font, 0, 60);
    23b6:	233c      	movs	r3, #60	; 0x3c
    23b8:	9300      	str	r3, [sp, #0]
    23ba:	2300      	movs	r3, #0
    23bc:	002a      	movs	r2, r5
    23be:	990d      	ldr	r1, [sp, #52]	; 0x34
    23c0:	0020      	movs	r0, r4
    23c2:	47b8      	blx	r7

}
    23c4:	b012      	add	sp, #72	; 0x48
    23c6:	bc04      	pop	{r2}
    23c8:	4692      	mov	sl, r2
    23ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23cc:	04ffffff 	.word	0x04ffffff
    23d0:	00000411 	.word	0x00000411
    23d4:	00003b41 	.word	0x00003b41
    23d8:	00002fad 	.word	0x00002fad
    23dc:	9999999a 	.word	0x9999999a
    23e0:	3fe99999 	.word	0x3fe99999
    23e4:	000034ad 	.word	0x000034ad
    23e8:	00003ad9 	.word	0x00003ad9
    23ec:	0000298d 	.word	0x0000298d
    23f0:	00000691 	.word	0x00000691
    23f4:	3ff19999 	.word	0x3ff19999
    23f8:	3fb99999 	.word	0x3fb99999
    23fc:	cccccccd 	.word	0xcccccccd
    2400:	3feccccc 	.word	0x3feccccc
    2404:	3fa99999 	.word	0x3fa99999
    2408:	3ff4cccc 	.word	0x3ff4cccc

0000240c <display_gauge_number_large>:

void display_gauge_number_large(int x0, int y0, int radius, int font, int val)
{
    240c:	b5f0      	push	{r4, r5, r6, r7, lr}
    240e:	46de      	mov	lr, fp
    2410:	b500      	push	{lr}
    2412:	b08c      	sub	sp, #48	; 0x30
    2414:	0006      	movs	r6, r0
    2416:	9106      	str	r1, [sp, #24]
    2418:	0015      	movs	r5, r2
    241a:	930b      	str	r3, [sp, #44]	; 0x2c
	// Set up the rectangle in which the large number will be displayed
	FT8_cmd_dl(DL_COLOR_RGB | WHITE);
    241c:	4834      	ldr	r0, [pc, #208]	; (24f0 <display_gauge_number_large+0xe4>)
    241e:	4a35      	ldr	r2, [pc, #212]	; (24f4 <display_gauge_number_large+0xe8>)
    2420:	4693      	mov	fp, r2
    2422:	4790      	blx	r2
	FT8_cmd_rect((int)(x0-(0.375*radius)), (int)(y0+(1.05*radius)), (int)(x0+(0.375*radius)),(int)(y0+(0.625*radius)), 1);
    2424:	4f34      	ldr	r7, [pc, #208]	; (24f8 <display_gauge_number_large+0xec>)
    2426:	0030      	movs	r0, r6
    2428:	47b8      	blx	r7
    242a:	9002      	str	r0, [sp, #8]
    242c:	9103      	str	r1, [sp, #12]
    242e:	0028      	movs	r0, r5
    2430:	47b8      	blx	r7
    2432:	0005      	movs	r5, r0
    2434:	000e      	movs	r6, r1
    2436:	4c31      	ldr	r4, [pc, #196]	; (24fc <display_gauge_number_large+0xf0>)
    2438:	2200      	movs	r2, #0
    243a:	4b31      	ldr	r3, [pc, #196]	; (2500 <display_gauge_number_large+0xf4>)
    243c:	9504      	str	r5, [sp, #16]
    243e:	9605      	str	r6, [sp, #20]
    2440:	47a0      	blx	r4
    2442:	0002      	movs	r2, r0
    2444:	000b      	movs	r3, r1
    2446:	9208      	str	r2, [sp, #32]
    2448:	9309      	str	r3, [sp, #36]	; 0x24
    244a:	9802      	ldr	r0, [sp, #8]
    244c:	9903      	ldr	r1, [sp, #12]
    244e:	4d2d      	ldr	r5, [pc, #180]	; (2504 <display_gauge_number_large+0xf8>)
    2450:	47a8      	blx	r5
    2452:	4e2d      	ldr	r6, [pc, #180]	; (2508 <display_gauge_number_large+0xfc>)
    2454:	47b0      	blx	r6
    2456:	0005      	movs	r5, r0
    2458:	9806      	ldr	r0, [sp, #24]
    245a:	47b8      	blx	r7
    245c:	9006      	str	r0, [sp, #24]
    245e:	9107      	str	r1, [sp, #28]
    2460:	4a2a      	ldr	r2, [pc, #168]	; (250c <display_gauge_number_large+0x100>)
    2462:	4b2b      	ldr	r3, [pc, #172]	; (2510 <display_gauge_number_large+0x104>)
    2464:	9804      	ldr	r0, [sp, #16]
    2466:	9905      	ldr	r1, [sp, #20]
    2468:	47a0      	blx	r4
    246a:	0002      	movs	r2, r0
    246c:	000b      	movs	r3, r1
    246e:	4f29      	ldr	r7, [pc, #164]	; (2514 <display_gauge_number_large+0x108>)
    2470:	9806      	ldr	r0, [sp, #24]
    2472:	9907      	ldr	r1, [sp, #28]
    2474:	47b8      	blx	r7
    2476:	47b0      	blx	r6
    2478:	900a      	str	r0, [sp, #40]	; 0x28
    247a:	9a08      	ldr	r2, [sp, #32]
    247c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    247e:	9802      	ldr	r0, [sp, #8]
    2480:	9903      	ldr	r1, [sp, #12]
    2482:	47b8      	blx	r7
    2484:	47b0      	blx	r6
    2486:	9008      	str	r0, [sp, #32]
    2488:	2200      	movs	r2, #0
    248a:	4b23      	ldr	r3, [pc, #140]	; (2518 <display_gauge_number_large+0x10c>)
    248c:	9804      	ldr	r0, [sp, #16]
    248e:	9905      	ldr	r1, [sp, #20]
    2490:	47a0      	blx	r4
    2492:	0002      	movs	r2, r0
    2494:	000b      	movs	r3, r1
    2496:	9806      	ldr	r0, [sp, #24]
    2498:	9907      	ldr	r1, [sp, #28]
    249a:	47b8      	blx	r7
    249c:	47b0      	blx	r6
    249e:	b202      	sxth	r2, r0
    24a0:	9206      	str	r2, [sp, #24]
    24a2:	466b      	mov	r3, sp
    24a4:	2120      	movs	r1, #32
    24a6:	5e5a      	ldrsh	r2, [r3, r1]
    24a8:	2128      	movs	r1, #40	; 0x28
    24aa:	5e59      	ldrsh	r1, [r3, r1]
    24ac:	b228      	sxth	r0, r5
    24ae:	2301      	movs	r3, #1
    24b0:	9300      	str	r3, [sp, #0]
    24b2:	9b06      	ldr	r3, [sp, #24]
    24b4:	4d19      	ldr	r5, [pc, #100]	; (251c <display_gauge_number_large+0x110>)
    24b6:	47a8      	blx	r5
	
	// Set up the actual number display
	FT8_cmd_dl(DL_COLOR_RGB | BLUE);
    24b8:	4819      	ldr	r0, [pc, #100]	; (2520 <display_gauge_number_large+0x114>)
    24ba:	47d8      	blx	fp
	FT8_cmd_number((int)(x0+(0.2*radius)), (int)(y0+(0.625*radius)), font, FT8_OPT_RIGHTX, val);
    24bc:	4a19      	ldr	r2, [pc, #100]	; (2524 <display_gauge_number_large+0x118>)
    24be:	4b1a      	ldr	r3, [pc, #104]	; (2528 <display_gauge_number_large+0x11c>)
    24c0:	9804      	ldr	r0, [sp, #16]
    24c2:	9905      	ldr	r1, [sp, #20]
    24c4:	47a0      	blx	r4
    24c6:	0002      	movs	r2, r0
    24c8:	000b      	movs	r3, r1
    24ca:	9802      	ldr	r0, [sp, #8]
    24cc:	9903      	ldr	r1, [sp, #12]
    24ce:	47b8      	blx	r7
    24d0:	47b0      	blx	r6
    24d2:	466b      	mov	r3, sp
    24d4:	222c      	movs	r2, #44	; 0x2c
    24d6:	5e9a      	ldrsh	r2, [r3, r2]
    24d8:	b200      	sxth	r0, r0
    24da:	9b12      	ldr	r3, [sp, #72]	; 0x48
    24dc:	9300      	str	r3, [sp, #0]
    24de:	2380      	movs	r3, #128	; 0x80
    24e0:	011b      	lsls	r3, r3, #4
    24e2:	9906      	ldr	r1, [sp, #24]
    24e4:	4c11      	ldr	r4, [pc, #68]	; (252c <display_gauge_number_large+0x120>)
    24e6:	47a0      	blx	r4
	
}
    24e8:	b00c      	add	sp, #48	; 0x30
    24ea:	bc04      	pop	{r2}
    24ec:	4693      	mov	fp, r2
    24ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24f0:	04ffffff 	.word	0x04ffffff
    24f4:	00000411 	.word	0x00000411
    24f8:	00003b41 	.word	0x00003b41
    24fc:	00002fad 	.word	0x00002fad
    2500:	3fd80000 	.word	0x3fd80000
    2504:	000034ad 	.word	0x000034ad
    2508:	00003ad9 	.word	0x00003ad9
    250c:	cccccccd 	.word	0xcccccccd
    2510:	3ff0cccc 	.word	0x3ff0cccc
    2514:	0000298d 	.word	0x0000298d
    2518:	3fe40000 	.word	0x3fe40000
    251c:	00000829 	.word	0x00000829
    2520:	040000ff 	.word	0x040000ff
    2524:	9999999a 	.word	0x9999999a
    2528:	3fc99999 	.word	0x3fc99999
    252c:	00000691 	.word	0x00000691

00002530 <display_gauge>:

void display_gauge(int val)
{
    2530:	b530      	push	{r4, r5, lr}
    2532:	b085      	sub	sp, #20
    2534:	0004      	movs	r4, r0
	FT8_cmd_dl(DL_COLOR_RGB | WHITE);
    2536:	4817      	ldr	r0, [pc, #92]	; (2594 <display_gauge+0x64>)
    2538:	4b17      	ldr	r3, [pc, #92]	; (2598 <display_gauge+0x68>)
    253a:	4798      	blx	r3
	
	// Check the speed and match COLOUR
	if (val <= (int)(gauge_range*0.5))
    253c:	2c1e      	cmp	r4, #30
    253e:	dd21      	ble.n	2584 <display_gauge+0x54>
	{
		FT8_cmd_bgcolor(DL_COLOR_RGB | GREENG);
	} 
	else if (val <= (int)(gauge_range*0.75))
    2540:	2c2d      	cmp	r4, #45	; 0x2d
    2542:	dd23      	ble.n	258c <display_gauge+0x5c>
	{
		FT8_cmd_bgcolor(DL_COLOR_RGB | YELLOWG);
	}
	else
	{
		FT8_cmd_bgcolor(DL_COLOR_RGB | REDG);
    2544:	4815      	ldr	r0, [pc, #84]	; (259c <display_gauge+0x6c>)
    2546:	4b16      	ldr	r3, [pc, #88]	; (25a0 <display_gauge+0x70>)
    2548:	4798      	blx	r3
	}

	FT8_cmd_gauge(gauge_x0, gauge_y0, gauge_radius, 0, gauge_major_increm, gauge_minor_increm, val, gauge_range); // major = 6 (6 increments of 60 is sections of 10) and minor is increments of 5 (so sections of 2)
    254a:	233c      	movs	r3, #60	; 0x3c
    254c:	9303      	str	r3, [sp, #12]
    254e:	b2a3      	uxth	r3, r4
    2550:	9302      	str	r3, [sp, #8]
    2552:	2305      	movs	r3, #5
    2554:	9301      	str	r3, [sp, #4]
    2556:	3301      	adds	r3, #1
    2558:	9300      	str	r3, [sp, #0]
    255a:	2300      	movs	r3, #0
    255c:	225f      	movs	r2, #95	; 0x5f
    255e:	219b      	movs	r1, #155	; 0x9b
    2560:	2090      	movs	r0, #144	; 0x90
    2562:	4d10      	ldr	r5, [pc, #64]	; (25a4 <display_gauge+0x74>)
    2564:	47a8      	blx	r5
	
	display_numbers_around_gauge(gauge_x0, gauge_y0, gauge_radius, gauge_big_number-2);
    2566:	2317      	movs	r3, #23
    2568:	225f      	movs	r2, #95	; 0x5f
    256a:	219b      	movs	r1, #155	; 0x9b
    256c:	2090      	movs	r0, #144	; 0x90
    256e:	4d0e      	ldr	r5, [pc, #56]	; (25a8 <display_gauge+0x78>)
    2570:	47a8      	blx	r5
	display_gauge_number_large(gauge_x0, gauge_y0, gauge_radius, gauge_big_number, val);
    2572:	9400      	str	r4, [sp, #0]
    2574:	2319      	movs	r3, #25
    2576:	225f      	movs	r2, #95	; 0x5f
    2578:	219b      	movs	r1, #155	; 0x9b
    257a:	2090      	movs	r0, #144	; 0x90
    257c:	4c0b      	ldr	r4, [pc, #44]	; (25ac <display_gauge+0x7c>)
    257e:	47a0      	blx	r4
}
    2580:	b005      	add	sp, #20
    2582:	bd30      	pop	{r4, r5, pc}
		FT8_cmd_bgcolor(DL_COLOR_RGB | GREENG);
    2584:	480a      	ldr	r0, [pc, #40]	; (25b0 <display_gauge+0x80>)
    2586:	4b06      	ldr	r3, [pc, #24]	; (25a0 <display_gauge+0x70>)
    2588:	4798      	blx	r3
    258a:	e7de      	b.n	254a <display_gauge+0x1a>
		FT8_cmd_bgcolor(DL_COLOR_RGB | YELLOWG);
    258c:	4809      	ldr	r0, [pc, #36]	; (25b4 <display_gauge+0x84>)
    258e:	4b04      	ldr	r3, [pc, #16]	; (25a0 <display_gauge+0x70>)
    2590:	4798      	blx	r3
    2592:	e7da      	b.n	254a <display_gauge+0x1a>
    2594:	04ffffff 	.word	0x04ffffff
    2598:	00000411 	.word	0x00000411
    259c:	04b51616 	.word	0x04b51616
    25a0:	000004d1 	.word	0x000004d1
    25a4:	00000511 	.word	0x00000511
    25a8:	00002245 	.word	0x00002245
    25ac:	0000240d 	.word	0x0000240d
    25b0:	04047004 	.word	0x04047004
    25b4:	04e3a70e 	.word	0x04e3a70e

000025b8 <display_line>:

void display_line(int x0, int y0, int x1, int y1, int w0)
{
    25b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25ba:	b083      	sub	sp, #12
    25bc:	0004      	movs	r4, r0
    25be:	000d      	movs	r5, r1
    25c0:	0016      	movs	r6, r2
    25c2:	001f      	movs	r7, r3
	FT8_cmd_dl(DL_COLOR_RGB | WHITE);
    25c4:	4806      	ldr	r0, [pc, #24]	; (25e0 <display_line+0x28>)
    25c6:	4b07      	ldr	r3, [pc, #28]	; (25e4 <display_line+0x2c>)
    25c8:	4798      	blx	r3
	FT8_cmd_line(x0,y0,x1,y1,w0);
    25ca:	b23b      	sxth	r3, r7
    25cc:	b232      	sxth	r2, r6
    25ce:	b229      	sxth	r1, r5
    25d0:	b220      	sxth	r0, r4
    25d2:	466c      	mov	r4, sp
    25d4:	8c24      	ldrh	r4, [r4, #32]
    25d6:	9400      	str	r4, [sp, #0]
    25d8:	4c03      	ldr	r4, [pc, #12]	; (25e8 <display_line+0x30>)
    25da:	47a0      	blx	r4
}
    25dc:	b003      	add	sp, #12
    25de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25e0:	04ffffff 	.word	0x04ffffff
    25e4:	00000411 	.word	0x00000411
    25e8:	00000759 	.word	0x00000759

000025ec <display_progress>:


void display_progress(int val)
{
    25ec:	b510      	push	{r4, lr}
    25ee:	b084      	sub	sp, #16
    25f0:	0004      	movs	r4, r0
	
	// Check the battery value and match the colour
	if (val <= (int)(battery_range*0.3333))
    25f2:	2821      	cmp	r0, #33	; 0x21
    25f4:	dd16      	ble.n	2624 <display_progress+0x38>
	{
		FT8_cmd_dl(DL_COLOR_RGB | REDG);
	}
	else if (val <= (int)(battery_range*0.6667))
    25f6:	2842      	cmp	r0, #66	; 0x42
    25f8:	dd18      	ble.n	262c <display_progress+0x40>
	{
		FT8_cmd_dl(DL_COLOR_RGB | YELLOWG);
	}
	else
	{
		FT8_cmd_dl(DL_COLOR_RGB | GREENG);
    25fa:	480e      	ldr	r0, [pc, #56]	; (2634 <display_progress+0x48>)
    25fc:	4b0e      	ldr	r3, [pc, #56]	; (2638 <display_progress+0x4c>)
    25fe:	4798      	blx	r3
	}
	
	
	FT8_cmd_bgcolor(DL_COLOR_RGB | GRAY);
    2600:	480e      	ldr	r0, [pc, #56]	; (263c <display_progress+0x50>)
    2602:	4b0f      	ldr	r3, [pc, #60]	; (2640 <display_progress+0x54>)
    2604:	4798      	blx	r3

	FT8_cmd_progress(VERT_X+(int)(0.1*WIDTH), (int)(HEIGHT*0.13), (int)(((1-VERT_X_PROPORTION-0.1)*0.7)*WIDTH), (int)(HEIGHT*0.1667), 0, val, battery_range); //range 100
    2606:	2364      	movs	r3, #100	; 0x64
    2608:	9302      	str	r3, [sp, #8]
    260a:	b2a4      	uxth	r4, r4
    260c:	9401      	str	r4, [sp, #4]
    260e:	2300      	movs	r3, #0
    2610:	9300      	str	r3, [sp, #0]
    2612:	332d      	adds	r3, #45	; 0x2d
    2614:	2264      	movs	r2, #100	; 0x64
    2616:	2123      	movs	r1, #35	; 0x23
    2618:	20a8      	movs	r0, #168	; 0xa8
    261a:	0040      	lsls	r0, r0, #1
    261c:	4c09      	ldr	r4, [pc, #36]	; (2644 <display_progress+0x58>)
    261e:	47a0      	blx	r4
	

}
    2620:	b004      	add	sp, #16
    2622:	bd10      	pop	{r4, pc}
		FT8_cmd_dl(DL_COLOR_RGB | REDG);
    2624:	4808      	ldr	r0, [pc, #32]	; (2648 <display_progress+0x5c>)
    2626:	4b04      	ldr	r3, [pc, #16]	; (2638 <display_progress+0x4c>)
    2628:	4798      	blx	r3
    262a:	e7e9      	b.n	2600 <display_progress+0x14>
		FT8_cmd_dl(DL_COLOR_RGB | YELLOWG);
    262c:	4807      	ldr	r0, [pc, #28]	; (264c <display_progress+0x60>)
    262e:	4b02      	ldr	r3, [pc, #8]	; (2638 <display_progress+0x4c>)
    2630:	4798      	blx	r3
    2632:	e7e5      	b.n	2600 <display_progress+0x14>
    2634:	04047004 	.word	0x04047004
    2638:	00000411 	.word	0x00000411
    263c:	04c0c0c0 	.word	0x04c0c0c0
    2640:	000004d1 	.word	0x000004d1
    2644:	000005d9 	.word	0x000005d9
    2648:	04b51616 	.word	0x04b51616
    264c:	04e3a70e 	.word	0x04e3a70e

00002650 <display_handler>:
	display_numberRight((int)(WIDTH-(0.03*WIDTH)),(int)((HEIGHT*0.3333)+(0.03*HEIGHT)),1,battery_v);
	endFrame();
}

void display_handler()
{
    2650:	b5f0      	push	{r4, r5, r6, r7, lr}
    2652:	46de      	mov	lr, fp
    2654:	b500      	push	{lr}
    2656:	b082      	sub	sp, #8
	static int framenum = 0;
	// Everything must happen within the Start and End frame placeholders
	startFrame();
    2658:	4b43      	ldr	r3, [pc, #268]	; (2768 <display_handler+0x118>)
    265a:	4798      	blx	r3
	
	// Screen Display
	
	// SPEEDOMETER
	display_gauge((framenum%gauge_range)); // sPEEDOMETER GAUGE
    265c:	4e43      	ldr	r6, [pc, #268]	; (276c <display_handler+0x11c>)
    265e:	213c      	movs	r1, #60	; 0x3c
    2660:	6b70      	ldr	r0, [r6, #52]	; 0x34
    2662:	4b43      	ldr	r3, [pc, #268]	; (2770 <display_handler+0x120>)
    2664:	4798      	blx	r3
    2666:	0008      	movs	r0, r1
    2668:	4b42      	ldr	r3, [pc, #264]	; (2774 <display_handler+0x124>)
    266a:	4798      	blx	r3
	display_text((int)(gauge_x0-(gauge_radius*0.7)),10,22,"SPEEDOMETER"); // TITLE
    266c:	4b42      	ldr	r3, [pc, #264]	; (2778 <display_handler+0x128>)
    266e:	2216      	movs	r2, #22
    2670:	210a      	movs	r1, #10
    2672:	204d      	movs	r0, #77	; 0x4d
    2674:	4c41      	ldr	r4, [pc, #260]	; (277c <display_handler+0x12c>)
    2676:	47a0      	blx	r4
	display_text((int)(gauge_x0-(gauge_radius*0.1)),(int)(HEIGHT-(0.05*HEIGHT)),20,"KM/H"); // UNIT
    2678:	4b41      	ldr	r3, [pc, #260]	; (2780 <display_handler+0x130>)
    267a:	2214      	movs	r2, #20
    267c:	2181      	movs	r1, #129	; 0x81
    267e:	0049      	lsls	r1, r1, #1
    2680:	2086      	movs	r0, #134	; 0x86
    2682:	47a0      	blx	r4
	
	// SEPARATOR LINE (SECTION, SPEEDOMETER)
	display_line(VERT_X,0, VERT_X, HEIGHT, 3);
    2684:	2503      	movs	r5, #3
    2686:	9500      	str	r5, [sp, #0]
    2688:	2388      	movs	r3, #136	; 0x88
    268a:	005b      	lsls	r3, r3, #1
    268c:	2290      	movs	r2, #144	; 0x90
    268e:	0052      	lsls	r2, r2, #1
    2690:	2100      	movs	r1, #0
    2692:	0010      	movs	r0, r2
    2694:	4f3b      	ldr	r7, [pc, #236]	; (2784 <display_handler+0x134>)
    2696:	47b8      	blx	r7
	
	// SERPARATOR LINES, RIGHT HAND SIDE SECTIONS
	display_line(VERT_X,(int)(HEIGHT*(0.3333)),WIDTH,(int)(HEIGHT*(0.3333)),3);
    2698:	9500      	str	r5, [sp, #0]
    269a:	235a      	movs	r3, #90	; 0x5a
    269c:	22f0      	movs	r2, #240	; 0xf0
    269e:	0052      	lsls	r2, r2, #1
    26a0:	215a      	movs	r1, #90	; 0x5a
    26a2:	2090      	movs	r0, #144	; 0x90
    26a4:	0040      	lsls	r0, r0, #1
    26a6:	47b8      	blx	r7
	display_line(VERT_X,(int)(HEIGHT*(0.6667)),WIDTH,(int)(HEIGHT*(0.6667)),3);
    26a8:	9500      	str	r5, [sp, #0]
    26aa:	23b5      	movs	r3, #181	; 0xb5
    26ac:	22f0      	movs	r2, #240	; 0xf0
    26ae:	0052      	lsls	r2, r2, #1
    26b0:	21b5      	movs	r1, #181	; 0xb5
    26b2:	2090      	movs	r0, #144	; 0x90
    26b4:	0040      	lsls	r0, r0, #1
    26b6:	47b8      	blx	r7
	
	// BATTERY CHARGE - read it from the buffer - third byte
	display_progress((CAN_battery_charge_and_temp_buffer[CAN_battery_charge_and_temp_buffer_head-1][3])/2);
    26b8:	4d33      	ldr	r5, [pc, #204]	; (2788 <display_handler+0x138>)
    26ba:	7b2b      	ldrb	r3, [r5, #12]
    26bc:	3b01      	subs	r3, #1
    26be:	00db      	lsls	r3, r3, #3
    26c0:	18eb      	adds	r3, r5, r3
    26c2:	7cd8      	ldrb	r0, [r3, #19]
    26c4:	0840      	lsrs	r0, r0, #1
    26c6:	4b31      	ldr	r3, [pc, #196]	; (278c <display_handler+0x13c>)
    26c8:	4798      	blx	r3
	display_text((int)(VERT_X+(0.05*WIDTH)),10,22,"BATTERY CHARGE"); // TITLE
    26ca:	4b31      	ldr	r3, [pc, #196]	; (2790 <display_handler+0x140>)
    26cc:	2216      	movs	r2, #22
    26ce:	210a      	movs	r1, #10
    26d0:	209c      	movs	r0, #156	; 0x9c
    26d2:	0040      	lsls	r0, r0, #1
    26d4:	47a0      	blx	r4
	
	// reset the buffer (later as i need to do the second part of the message)
	
	// BATTERY TEMP
	display_text((int)(VERT_X+(0.05*WIDTH)),(int)((HEIGHT*0.3333)+(0.03*HEIGHT)),22,"BATTERY"); // TITLE
    26d6:	4b2f      	ldr	r3, [pc, #188]	; (2794 <display_handler+0x144>)
    26d8:	2216      	movs	r2, #22
    26da:	2162      	movs	r1, #98	; 0x62
    26dc:	209c      	movs	r0, #156	; 0x9c
    26de:	0040      	lsls	r0, r0, #1
    26e0:	47a0      	blx	r4
	display_text((int)(VERT_X+(0.05*WIDTH)),(int)((HEIGHT*0.3333)+(0.13*HEIGHT)),22,"TEMP"); // TITLE
    26e2:	4b2d      	ldr	r3, [pc, #180]	; (2798 <display_handler+0x148>)
    26e4:	2216      	movs	r2, #22
    26e6:	217e      	movs	r1, #126	; 0x7e
    26e8:	209c      	movs	r0, #156	; 0x9c
    26ea:	0040      	lsls	r0, r0, #1
    26ec:	47a0      	blx	r4
	display_text((int)(VERT_X+(0.05*WIDTH)),(int)((HEIGHT*0.3333)+(0.23*HEIGHT)),22,"(degC)"); // TITLE
    26ee:	4b2b      	ldr	r3, [pc, #172]	; (279c <display_handler+0x14c>)
    26f0:	2216      	movs	r2, #22
    26f2:	2199      	movs	r1, #153	; 0x99
    26f4:	209c      	movs	r0, #156	; 0x9c
    26f6:	0040      	lsls	r0, r0, #1
    26f8:	47a0      	blx	r4
	// TO SET A FONT HIGHER THAN 31:
	FT8_cmd_romfont(1,33);
    26fa:	2121      	movs	r1, #33	; 0x21
    26fc:	2001      	movs	r0, #1
    26fe:	4b28      	ldr	r3, [pc, #160]	; (27a0 <display_handler+0x150>)
    2700:	469b      	mov	fp, r3
    2702:	4798      	blx	r3
	//display_numberRight((int)(WIDTH-(0.03*WIDTH)),(int)((HEIGHT*0.3333)+(0.03*HEIGHT)),1,30); // The last argument is the value
	// the actual
	display_numberRight((int)(WIDTH-(0.03*WIDTH)),(int)((HEIGHT*0.3333)+(0.03*HEIGHT)),1,CAN_battery_charge_and_temp_buffer[CAN_battery_charge_and_temp_buffer_head-1][1]); // The last argument is the value
    2704:	7b2b      	ldrb	r3, [r5, #12]
    2706:	3b01      	subs	r3, #1
    2708:	00db      	lsls	r3, r3, #3
    270a:	18eb      	adds	r3, r5, r3
    270c:	7c5b      	ldrb	r3, [r3, #17]
    270e:	2201      	movs	r2, #1
    2710:	2162      	movs	r1, #98	; 0x62
    2712:	20d2      	movs	r0, #210	; 0xd2
    2714:	30ff      	adds	r0, #255	; 0xff
    2716:	4f23      	ldr	r7, [pc, #140]	; (27a4 <display_handler+0x154>)
    2718:	47b8      	blx	r7
	// jack testing
	//display_numberRight((int)(WIDTH-(0.03*WIDTH)),(int)((HEIGHT*0.3333)+(0.03*HEIGHT)),1,(int)discharge_state); // The last argument is the value
	
	// reset the buffer
	CAN_battery_charge_and_temp_buffer_head = 0;
    271a:	2300      	movs	r3, #0
    271c:	732b      	strb	r3, [r5, #12]
	
	// MOTOR TEMP @@ NOT YET IMPLEMENTED - WILL BE SENT FROM VCU
	display_text((int)(VERT_X+(0.05*WIDTH)),(int)((HEIGHT*0.6667)+(0.03*HEIGHT)),22,"MOTOR"); // TITLE
    271e:	4b22      	ldr	r3, [pc, #136]	; (27a8 <display_handler+0x158>)
    2720:	2216      	movs	r2, #22
    2722:	21bd      	movs	r1, #189	; 0xbd
    2724:	209c      	movs	r0, #156	; 0x9c
    2726:	0040      	lsls	r0, r0, #1
    2728:	47a0      	blx	r4
	display_text((int)(VERT_X+(0.05*WIDTH)),(int)((HEIGHT*0.6667)+(0.13*HEIGHT)),22,"TEMP"); // TITLE
    272a:	4b1b      	ldr	r3, [pc, #108]	; (2798 <display_handler+0x148>)
    272c:	2216      	movs	r2, #22
    272e:	21d8      	movs	r1, #216	; 0xd8
    2730:	209c      	movs	r0, #156	; 0x9c
    2732:	0040      	lsls	r0, r0, #1
    2734:	47a0      	blx	r4
	display_text((int)(VERT_X+(0.05*WIDTH)),(int)((HEIGHT*0.6667)+(0.23*HEIGHT)),22,"(degC)"); // TITLE
    2736:	4b19      	ldr	r3, [pc, #100]	; (279c <display_handler+0x14c>)
    2738:	2216      	movs	r2, #22
    273a:	21f3      	movs	r1, #243	; 0xf3
    273c:	209c      	movs	r0, #156	; 0x9c
    273e:	0040      	lsls	r0, r0, #1
    2740:	47a0      	blx	r4
	// TO SET A FONT HIGHER THAN 31:
	FT8_cmd_romfont(1,33);
    2742:	2121      	movs	r1, #33	; 0x21
    2744:	2001      	movs	r0, #1
    2746:	47d8      	blx	fp
	// the actual
	display_numberRight((int)(WIDTH-(0.03*WIDTH)),(int)((HEIGHT*0.6667)+(0.03*HEIGHT)),1,47); // The last argument is the value
    2748:	232f      	movs	r3, #47	; 0x2f
    274a:	2201      	movs	r2, #1
    274c:	21bd      	movs	r1, #189	; 0xbd
    274e:	20d2      	movs	r0, #210	; 0xd2
    2750:	30ff      	adds	r0, #255	; 0xff
    2752:	47b8      	blx	r7
	// jack testing
	//display_numberRight((int)(WIDTH-(0.03*WIDTH)),(int)((HEIGHT*0.6667)+(0.03*HEIGHT)),1,(int)charge_safety);
	
	framenum = framenum+1;
    2754:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2756:	3301      	adds	r3, #1
    2758:	6373      	str	r3, [r6, #52]	; 0x34
	
	endFrame();
    275a:	4b14      	ldr	r3, [pc, #80]	; (27ac <display_handler+0x15c>)
    275c:	4798      	blx	r3
}
    275e:	b002      	add	sp, #8
    2760:	bc04      	pop	{r2}
    2762:	4693      	mov	fp, r2
    2764:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2766:	46c0      	nop			; (mov r8, r8)
    2768:	000021a1 	.word	0x000021a1
    276c:	20000150 	.word	0x20000150
    2770:	000018c5 	.word	0x000018c5
    2774:	00002531 	.word	0x00002531
    2778:	00004560 	.word	0x00004560
    277c:	00002215 	.word	0x00002215
    2780:	0000456c 	.word	0x0000456c
    2784:	000025b9 	.word	0x000025b9
    2788:	200000d0 	.word	0x200000d0
    278c:	000025ed 	.word	0x000025ed
    2790:	00004574 	.word	0x00004574
    2794:	00004584 	.word	0x00004584
    2798:	0000458c 	.word	0x0000458c
    279c:	00004594 	.word	0x00004594
    27a0:	00000709 	.word	0x00000709
    27a4:	000021e1 	.word	0x000021e1
    27a8:	0000459c 	.word	0x0000459c
    27ac:	000021c5 	.word	0x000021c5

000027b0 <main>:


int main(void)
{
    27b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    27b2:	b083      	sub	sp, #12
	/* Initializers */
	atmel_start_init();
    27b4:	4b21      	ldr	r3, [pc, #132]	; (283c <main+0x8c>)
    27b6:	4798      	blx	r3
	create_spi_descriptor();
    27b8:	4b21      	ldr	r3, [pc, #132]	; (2840 <main+0x90>)
    27ba:	4798      	blx	r3
	FT8_init();
    27bc:	4b21      	ldr	r3, [pc, #132]	; (2844 <main+0x94>)
    27be:	4798      	blx	r3
	
	struct can_message msg;
	struct can_filter  filter;
	// can receive
	can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_0_tx_callback); // do not anger the god
    27c0:	4c21      	ldr	r4, [pc, #132]	; (2848 <main+0x98>)
    27c2:	4a22      	ldr	r2, [pc, #136]	; (284c <main+0x9c>)
    27c4:	2101      	movs	r1, #1
    27c6:	0020      	movs	r0, r4
    27c8:	4d21      	ldr	r5, [pc, #132]	; (2850 <main+0xa0>)
    27ca:	47a8      	blx	r5
	can_async_register_callback(&CAN_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_0_rx_callback);
    27cc:	4a21      	ldr	r2, [pc, #132]	; (2854 <main+0xa4>)
    27ce:	2100      	movs	r1, #0
    27d0:	0020      	movs	r0, r4
    27d2:	47a8      	blx	r5
	
	filter.id   = 0; // receive all messaged
    27d4:	2500      	movs	r5, #0
    27d6:	9500      	str	r5, [sp, #0]
	filter.mask = 0;
    27d8:	9501      	str	r5, [sp, #4]
	can_async_set_filter(&CAN_0, 0, CAN_FMT_STDID, &filter);
    27da:	466b      	mov	r3, sp
    27dc:	2200      	movs	r2, #0
    27de:	2100      	movs	r1, #0
    27e0:	0020      	movs	r0, r4
    27e2:	4c1d      	ldr	r4, [pc, #116]	; (2858 <main+0xa8>)
    27e4:	47a0      	blx	r4
	
	// timer set up
	
	TIMER_0_task1.interval = 1; // 1 ms interrupt
    27e6:	4c1d      	ldr	r4, [pc, #116]	; (285c <main+0xac>)
    27e8:	2701      	movs	r7, #1
    27ea:	6427      	str	r7, [r4, #64]	; 0x40
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
    27ec:	4b1c      	ldr	r3, [pc, #112]	; (2860 <main+0xb0>)
    27ee:	6463      	str	r3, [r4, #68]	; 0x44
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    27f0:	0021      	movs	r1, r4
    27f2:	3138      	adds	r1, #56	; 0x38
    27f4:	740f      	strb	r7, [r1, #16]
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    27f6:	481b      	ldr	r0, [pc, #108]	; (2864 <main+0xb4>)
    27f8:	4e1b      	ldr	r6, [pc, #108]	; (2868 <main+0xb8>)
    27fa:	47b0      	blx	r6
	
	TIMER_AMS_task.interval = 3000; // Interrupt after three seconds
    27fc:	4b1b      	ldr	r3, [pc, #108]	; (286c <main+0xbc>)
    27fe:	6563      	str	r3, [r4, #84]	; 0x54
	TIMER_AMS_task.cb       = TIMER_ams_task_cb;
    2800:	4b1b      	ldr	r3, [pc, #108]	; (2870 <main+0xc0>)
    2802:	65a3      	str	r3, [r4, #88]	; 0x58
	TIMER_AMS_task.mode     = TIMER_TASK_ONE_SHOT;
    2804:	0021      	movs	r1, r4
    2806:	314c      	adds	r1, #76	; 0x4c
    2808:	740d      	strb	r5, [r1, #16]
	timer_add_task(&TIMER_0, &TIMER_AMS_task);
    280a:	4816      	ldr	r0, [pc, #88]	; (2864 <main+0xb4>)
    280c:	47b0      	blx	r6
	
	
	TIMER_KEEP_ALIVE_AMS.interval = 100; // Interrupt after three seconds
    280e:	2364      	movs	r3, #100	; 0x64
    2810:	66a3      	str	r3, [r4, #104]	; 0x68
	TIMER_KEEP_ALIVE_AMS.cb       = TIMER_keep_alive_ams_cb;
    2812:	4b18      	ldr	r3, [pc, #96]	; (2874 <main+0xc4>)
    2814:	66e3      	str	r3, [r4, #108]	; 0x6c
	TIMER_KEEP_ALIVE_AMS.mode     = TIMER_TASK_REPEAT;
    2816:	0021      	movs	r1, r4
    2818:	3160      	adds	r1, #96	; 0x60
    281a:	740f      	strb	r7, [r1, #16]
	timer_add_task(&TIMER_0, &TIMER_KEEP_ALIVE_AMS);
    281c:	4811      	ldr	r0, [pc, #68]	; (2864 <main+0xb4>)
    281e:	47b0      	blx	r6
	
	timer_start(&TIMER_0);
    2820:	4810      	ldr	r0, [pc, #64]	; (2864 <main+0xb4>)
    2822:	4b15      	ldr	r3, [pc, #84]	; (2878 <main+0xc8>)
    2824:	4798      	blx	r3
	/* Functionality Loop */
	
	
	while (1) {
		
		if (display_ms_counter > 100) // Display every 100 ms
    2826:	4b15      	ldr	r3, [pc, #84]	; (287c <main+0xcc>)
    2828:	681b      	ldr	r3, [r3, #0]
    282a:	2b64      	cmp	r3, #100	; 0x64
    282c:	ddfb      	ble.n	2826 <main+0x76>
		{
			display_handler();
    282e:	4b14      	ldr	r3, [pc, #80]	; (2880 <main+0xd0>)
    2830:	4798      	blx	r3
			//create_log();
			display_ms_counter = 0;
    2832:	2200      	movs	r2, #0
    2834:	4b11      	ldr	r3, [pc, #68]	; (287c <main+0xcc>)
    2836:	601a      	str	r2, [r3, #0]
    2838:	e7f5      	b.n	2826 <main+0x76>
    283a:	46c0      	nop			; (mov r8, r8)
    283c:	0000011d 	.word	0x0000011d
    2840:	00002969 	.word	0x00002969
    2844:	000008f9 	.word	0x000008f9
    2848:	2000024c 	.word	0x2000024c
    284c:	00002115 	.word	0x00002115
    2850:	00000ec5 	.word	0x00000ec5
    2854:	00002119 	.word	0x00002119
    2858:	00000f15 	.word	0x00000f15
    285c:	20000150 	.word	0x20000150
    2860:	000020d9 	.word	0x000020d9
    2864:	20000280 	.word	0x20000280
    2868:	00001299 	.word	0x00001299
    286c:	00000bb8 	.word	0x00000bb8
    2870:	000020e9 	.word	0x000020e9
    2874:	000020f5 	.word	0x000020f5
    2878:	0000125d 	.word	0x0000125d
    287c:	200000d0 	.word	0x200000d0
    2880:	00002651 	.word	0x00002651

00002884 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    2884:	b510      	push	{r4, lr}
    2886:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    2888:	2800      	cmp	r0, #0
    288a:	d109      	bne.n	28a0 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    288c:	0011      	movs	r1, r2
    288e:	0018      	movs	r0, r3
    2890:	4b05      	ldr	r3, [pc, #20]	; (28a8 <_read+0x24>)
    2892:	4798      	blx	r3
	if (n < 0) {
    2894:	2800      	cmp	r0, #0
    2896:	db00      	blt.n	289a <_read+0x16>
		return -1;
	}

	return n;
}
    2898:	bd10      	pop	{r4, pc}
		return -1;
    289a:	2001      	movs	r0, #1
    289c:	4240      	negs	r0, r0
    289e:	e7fb      	b.n	2898 <_read+0x14>
		return -1;
    28a0:	2001      	movs	r0, #1
    28a2:	4240      	negs	r0, r0
    28a4:	e7f8      	b.n	2898 <_read+0x14>
    28a6:	46c0      	nop			; (mov r8, r8)
    28a8:	00002901 	.word	0x00002901

000028ac <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    28ac:	b510      	push	{r4, lr}
    28ae:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    28b0:	3801      	subs	r0, #1
    28b2:	2802      	cmp	r0, #2
    28b4:	d809      	bhi.n	28ca <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    28b6:	0011      	movs	r1, r2
    28b8:	0018      	movs	r0, r3
    28ba:	4b05      	ldr	r3, [pc, #20]	; (28d0 <_write+0x24>)
    28bc:	4798      	blx	r3
	if (n < 0) {
    28be:	2800      	cmp	r0, #0
    28c0:	db00      	blt.n	28c4 <_write+0x18>
		return -1;
	}

	return n;
}
    28c2:	bd10      	pop	{r4, pc}
		return -1;
    28c4:	2001      	movs	r0, #1
    28c6:	4240      	negs	r0, r0
    28c8:	e7fb      	b.n	28c2 <_write+0x16>
		return -1;
    28ca:	2001      	movs	r0, #1
    28cc:	4240      	negs	r0, r0
    28ce:	e7f8      	b.n	28c2 <_write+0x16>
    28d0:	00002925 	.word	0x00002925

000028d4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    28d4:	b570      	push	{r4, r5, r6, lr}
    28d6:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    28d8:	4d06      	ldr	r5, [pc, #24]	; (28f4 <stdio_io_init+0x20>)
    28da:	682b      	ldr	r3, [r5, #0]
    28dc:	6898      	ldr	r0, [r3, #8]
    28de:	2100      	movs	r1, #0
    28e0:	4c05      	ldr	r4, [pc, #20]	; (28f8 <stdio_io_init+0x24>)
    28e2:	47a0      	blx	r4
	setbuf(stdin, NULL);
    28e4:	682b      	ldr	r3, [r5, #0]
    28e6:	6858      	ldr	r0, [r3, #4]
    28e8:	2100      	movs	r1, #0
    28ea:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    28ec:	4b03      	ldr	r3, [pc, #12]	; (28fc <stdio_io_init+0x28>)
    28ee:	601e      	str	r6, [r3, #0]
}
    28f0:	bd70      	pop	{r4, r5, r6, pc}
    28f2:	46c0      	nop			; (mov r8, r8)
    28f4:	20000014 	.word	0x20000014
    28f8:	00003c6b 	.word	0x00003c6b
    28fc:	20000224 	.word	0x20000224

00002900 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    2900:	b510      	push	{r4, lr}
    2902:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    2904:	4b05      	ldr	r3, [pc, #20]	; (291c <stdio_io_read+0x1c>)
    2906:	6818      	ldr	r0, [r3, #0]
    2908:	2800      	cmp	r0, #0
    290a:	d004      	beq.n	2916 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    290c:	b28a      	uxth	r2, r1
    290e:	0021      	movs	r1, r4
    2910:	4b03      	ldr	r3, [pc, #12]	; (2920 <stdio_io_read+0x20>)
    2912:	4798      	blx	r3
}
    2914:	bd10      	pop	{r4, pc}
		return 0;
    2916:	2000      	movs	r0, #0
    2918:	e7fc      	b.n	2914 <stdio_io_read+0x14>
    291a:	46c0      	nop			; (mov r8, r8)
    291c:	20000224 	.word	0x20000224
    2920:	00000fb5 	.word	0x00000fb5

00002924 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    2924:	b510      	push	{r4, lr}
    2926:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    2928:	4b05      	ldr	r3, [pc, #20]	; (2940 <stdio_io_write+0x1c>)
    292a:	6818      	ldr	r0, [r3, #0]
    292c:	2800      	cmp	r0, #0
    292e:	d004      	beq.n	293a <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    2930:	b28a      	uxth	r2, r1
    2932:	0021      	movs	r1, r4
    2934:	4b03      	ldr	r3, [pc, #12]	; (2944 <stdio_io_write+0x20>)
    2936:	4798      	blx	r3
}
    2938:	bd10      	pop	{r4, pc}
		return 0;
    293a:	2000      	movs	r0, #0
    293c:	e7fc      	b.n	2938 <stdio_io_write+0x14>
    293e:	46c0      	nop			; (mov r8, r8)
    2940:	20000224 	.word	0x20000224
    2944:	00000f7d 	.word	0x00000f7d

00002948 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    2948:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    294a:	4c04      	ldr	r4, [pc, #16]	; (295c <stdio_redirect_init+0x14>)
    294c:	0020      	movs	r0, r4
    294e:	4b04      	ldr	r3, [pc, #16]	; (2960 <stdio_redirect_init+0x18>)
    2950:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    2952:	0020      	movs	r0, r4
    2954:	4b03      	ldr	r3, [pc, #12]	; (2964 <stdio_redirect_init+0x1c>)
    2956:	4798      	blx	r3
}
    2958:	bd10      	pop	{r4, pc}
    295a:	46c0      	nop			; (mov r8, r8)
    295c:	20000274 	.word	0x20000274
    2960:	00001475 	.word	0x00001475
    2964:	000028d5 	.word	0x000028d5

00002968 <create_spi_descriptor>:
 */ 


#include "SPI_io_descriptor.h"

void create_spi_descriptor(){
    2968:	b510      	push	{r4, lr}
	// creating SPI instance
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
    296a:	4c04      	ldr	r4, [pc, #16]	; (297c <create_spi_descriptor+0x14>)
    296c:	4904      	ldr	r1, [pc, #16]	; (2980 <create_spi_descriptor+0x18>)
    296e:	0020      	movs	r0, r4
    2970:	4b04      	ldr	r3, [pc, #16]	; (2984 <create_spi_descriptor+0x1c>)
    2972:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
    2974:	0020      	movs	r0, r4
    2976:	4b04      	ldr	r3, [pc, #16]	; (2988 <create_spi_descriptor+0x20>)
    2978:	4798      	blx	r3

    297a:	bd10      	pop	{r4, pc}
    297c:	20000234 	.word	0x20000234
    2980:	20000230 	.word	0x20000230
    2984:	0000112d 	.word	0x0000112d
    2988:	00001045 	.word	0x00001045

0000298c <__aeabi_dadd>:
    298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    298e:	4645      	mov	r5, r8
    2990:	46de      	mov	lr, fp
    2992:	4657      	mov	r7, sl
    2994:	464e      	mov	r6, r9
    2996:	030c      	lsls	r4, r1, #12
    2998:	b5e0      	push	{r5, r6, r7, lr}
    299a:	004e      	lsls	r6, r1, #1
    299c:	0fc9      	lsrs	r1, r1, #31
    299e:	4688      	mov	r8, r1
    29a0:	000d      	movs	r5, r1
    29a2:	0a61      	lsrs	r1, r4, #9
    29a4:	0f44      	lsrs	r4, r0, #29
    29a6:	430c      	orrs	r4, r1
    29a8:	00c7      	lsls	r7, r0, #3
    29aa:	0319      	lsls	r1, r3, #12
    29ac:	0058      	lsls	r0, r3, #1
    29ae:	0fdb      	lsrs	r3, r3, #31
    29b0:	469b      	mov	fp, r3
    29b2:	0a4b      	lsrs	r3, r1, #9
    29b4:	0f51      	lsrs	r1, r2, #29
    29b6:	430b      	orrs	r3, r1
    29b8:	0d76      	lsrs	r6, r6, #21
    29ba:	0d40      	lsrs	r0, r0, #21
    29bc:	0019      	movs	r1, r3
    29be:	00d2      	lsls	r2, r2, #3
    29c0:	45d8      	cmp	r8, fp
    29c2:	d100      	bne.n	29c6 <__aeabi_dadd+0x3a>
    29c4:	e0ae      	b.n	2b24 <__aeabi_dadd+0x198>
    29c6:	1a35      	subs	r5, r6, r0
    29c8:	2d00      	cmp	r5, #0
    29ca:	dc00      	bgt.n	29ce <__aeabi_dadd+0x42>
    29cc:	e0f6      	b.n	2bbc <__aeabi_dadd+0x230>
    29ce:	2800      	cmp	r0, #0
    29d0:	d10f      	bne.n	29f2 <__aeabi_dadd+0x66>
    29d2:	4313      	orrs	r3, r2
    29d4:	d100      	bne.n	29d8 <__aeabi_dadd+0x4c>
    29d6:	e0db      	b.n	2b90 <__aeabi_dadd+0x204>
    29d8:	1e6b      	subs	r3, r5, #1
    29da:	2b00      	cmp	r3, #0
    29dc:	d000      	beq.n	29e0 <__aeabi_dadd+0x54>
    29de:	e137      	b.n	2c50 <__aeabi_dadd+0x2c4>
    29e0:	1aba      	subs	r2, r7, r2
    29e2:	4297      	cmp	r7, r2
    29e4:	41bf      	sbcs	r7, r7
    29e6:	1a64      	subs	r4, r4, r1
    29e8:	427f      	negs	r7, r7
    29ea:	1be4      	subs	r4, r4, r7
    29ec:	2601      	movs	r6, #1
    29ee:	0017      	movs	r7, r2
    29f0:	e024      	b.n	2a3c <__aeabi_dadd+0xb0>
    29f2:	4bc6      	ldr	r3, [pc, #792]	; (2d0c <__aeabi_dadd+0x380>)
    29f4:	429e      	cmp	r6, r3
    29f6:	d04d      	beq.n	2a94 <__aeabi_dadd+0x108>
    29f8:	2380      	movs	r3, #128	; 0x80
    29fa:	041b      	lsls	r3, r3, #16
    29fc:	4319      	orrs	r1, r3
    29fe:	2d38      	cmp	r5, #56	; 0x38
    2a00:	dd00      	ble.n	2a04 <__aeabi_dadd+0x78>
    2a02:	e107      	b.n	2c14 <__aeabi_dadd+0x288>
    2a04:	2d1f      	cmp	r5, #31
    2a06:	dd00      	ble.n	2a0a <__aeabi_dadd+0x7e>
    2a08:	e138      	b.n	2c7c <__aeabi_dadd+0x2f0>
    2a0a:	2020      	movs	r0, #32
    2a0c:	1b43      	subs	r3, r0, r5
    2a0e:	469a      	mov	sl, r3
    2a10:	000b      	movs	r3, r1
    2a12:	4650      	mov	r0, sl
    2a14:	4083      	lsls	r3, r0
    2a16:	4699      	mov	r9, r3
    2a18:	0013      	movs	r3, r2
    2a1a:	4648      	mov	r0, r9
    2a1c:	40eb      	lsrs	r3, r5
    2a1e:	4318      	orrs	r0, r3
    2a20:	0003      	movs	r3, r0
    2a22:	4650      	mov	r0, sl
    2a24:	4082      	lsls	r2, r0
    2a26:	1e50      	subs	r0, r2, #1
    2a28:	4182      	sbcs	r2, r0
    2a2a:	40e9      	lsrs	r1, r5
    2a2c:	431a      	orrs	r2, r3
    2a2e:	1aba      	subs	r2, r7, r2
    2a30:	1a61      	subs	r1, r4, r1
    2a32:	4297      	cmp	r7, r2
    2a34:	41a4      	sbcs	r4, r4
    2a36:	0017      	movs	r7, r2
    2a38:	4264      	negs	r4, r4
    2a3a:	1b0c      	subs	r4, r1, r4
    2a3c:	0223      	lsls	r3, r4, #8
    2a3e:	d562      	bpl.n	2b06 <__aeabi_dadd+0x17a>
    2a40:	0264      	lsls	r4, r4, #9
    2a42:	0a65      	lsrs	r5, r4, #9
    2a44:	2d00      	cmp	r5, #0
    2a46:	d100      	bne.n	2a4a <__aeabi_dadd+0xbe>
    2a48:	e0df      	b.n	2c0a <__aeabi_dadd+0x27e>
    2a4a:	0028      	movs	r0, r5
    2a4c:	f001 f8ba 	bl	3bc4 <__clzsi2>
    2a50:	0003      	movs	r3, r0
    2a52:	3b08      	subs	r3, #8
    2a54:	2b1f      	cmp	r3, #31
    2a56:	dd00      	ble.n	2a5a <__aeabi_dadd+0xce>
    2a58:	e0d2      	b.n	2c00 <__aeabi_dadd+0x274>
    2a5a:	2220      	movs	r2, #32
    2a5c:	003c      	movs	r4, r7
    2a5e:	1ad2      	subs	r2, r2, r3
    2a60:	409d      	lsls	r5, r3
    2a62:	40d4      	lsrs	r4, r2
    2a64:	409f      	lsls	r7, r3
    2a66:	4325      	orrs	r5, r4
    2a68:	429e      	cmp	r6, r3
    2a6a:	dd00      	ble.n	2a6e <__aeabi_dadd+0xe2>
    2a6c:	e0c4      	b.n	2bf8 <__aeabi_dadd+0x26c>
    2a6e:	1b9e      	subs	r6, r3, r6
    2a70:	1c73      	adds	r3, r6, #1
    2a72:	2b1f      	cmp	r3, #31
    2a74:	dd00      	ble.n	2a78 <__aeabi_dadd+0xec>
    2a76:	e0f1      	b.n	2c5c <__aeabi_dadd+0x2d0>
    2a78:	2220      	movs	r2, #32
    2a7a:	0038      	movs	r0, r7
    2a7c:	0029      	movs	r1, r5
    2a7e:	1ad2      	subs	r2, r2, r3
    2a80:	40d8      	lsrs	r0, r3
    2a82:	4091      	lsls	r1, r2
    2a84:	4097      	lsls	r7, r2
    2a86:	002c      	movs	r4, r5
    2a88:	4301      	orrs	r1, r0
    2a8a:	1e78      	subs	r0, r7, #1
    2a8c:	4187      	sbcs	r7, r0
    2a8e:	40dc      	lsrs	r4, r3
    2a90:	2600      	movs	r6, #0
    2a92:	430f      	orrs	r7, r1
    2a94:	077b      	lsls	r3, r7, #29
    2a96:	d009      	beq.n	2aac <__aeabi_dadd+0x120>
    2a98:	230f      	movs	r3, #15
    2a9a:	403b      	ands	r3, r7
    2a9c:	2b04      	cmp	r3, #4
    2a9e:	d005      	beq.n	2aac <__aeabi_dadd+0x120>
    2aa0:	1d3b      	adds	r3, r7, #4
    2aa2:	42bb      	cmp	r3, r7
    2aa4:	41bf      	sbcs	r7, r7
    2aa6:	427f      	negs	r7, r7
    2aa8:	19e4      	adds	r4, r4, r7
    2aaa:	001f      	movs	r7, r3
    2aac:	0223      	lsls	r3, r4, #8
    2aae:	d52c      	bpl.n	2b0a <__aeabi_dadd+0x17e>
    2ab0:	4b96      	ldr	r3, [pc, #600]	; (2d0c <__aeabi_dadd+0x380>)
    2ab2:	3601      	adds	r6, #1
    2ab4:	429e      	cmp	r6, r3
    2ab6:	d100      	bne.n	2aba <__aeabi_dadd+0x12e>
    2ab8:	e09a      	b.n	2bf0 <__aeabi_dadd+0x264>
    2aba:	4645      	mov	r5, r8
    2abc:	4b94      	ldr	r3, [pc, #592]	; (2d10 <__aeabi_dadd+0x384>)
    2abe:	08ff      	lsrs	r7, r7, #3
    2ac0:	401c      	ands	r4, r3
    2ac2:	0760      	lsls	r0, r4, #29
    2ac4:	0576      	lsls	r6, r6, #21
    2ac6:	0264      	lsls	r4, r4, #9
    2ac8:	4307      	orrs	r7, r0
    2aca:	0b24      	lsrs	r4, r4, #12
    2acc:	0d76      	lsrs	r6, r6, #21
    2ace:	2100      	movs	r1, #0
    2ad0:	0324      	lsls	r4, r4, #12
    2ad2:	0b23      	lsrs	r3, r4, #12
    2ad4:	0d0c      	lsrs	r4, r1, #20
    2ad6:	4a8f      	ldr	r2, [pc, #572]	; (2d14 <__aeabi_dadd+0x388>)
    2ad8:	0524      	lsls	r4, r4, #20
    2ada:	431c      	orrs	r4, r3
    2adc:	4014      	ands	r4, r2
    2ade:	0533      	lsls	r3, r6, #20
    2ae0:	4323      	orrs	r3, r4
    2ae2:	005b      	lsls	r3, r3, #1
    2ae4:	07ed      	lsls	r5, r5, #31
    2ae6:	085b      	lsrs	r3, r3, #1
    2ae8:	432b      	orrs	r3, r5
    2aea:	0038      	movs	r0, r7
    2aec:	0019      	movs	r1, r3
    2aee:	bc3c      	pop	{r2, r3, r4, r5}
    2af0:	4690      	mov	r8, r2
    2af2:	4699      	mov	r9, r3
    2af4:	46a2      	mov	sl, r4
    2af6:	46ab      	mov	fp, r5
    2af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2afa:	4664      	mov	r4, ip
    2afc:	4304      	orrs	r4, r0
    2afe:	d100      	bne.n	2b02 <__aeabi_dadd+0x176>
    2b00:	e211      	b.n	2f26 <__aeabi_dadd+0x59a>
    2b02:	0004      	movs	r4, r0
    2b04:	4667      	mov	r7, ip
    2b06:	077b      	lsls	r3, r7, #29
    2b08:	d1c6      	bne.n	2a98 <__aeabi_dadd+0x10c>
    2b0a:	4645      	mov	r5, r8
    2b0c:	0760      	lsls	r0, r4, #29
    2b0e:	08ff      	lsrs	r7, r7, #3
    2b10:	4307      	orrs	r7, r0
    2b12:	08e4      	lsrs	r4, r4, #3
    2b14:	4b7d      	ldr	r3, [pc, #500]	; (2d0c <__aeabi_dadd+0x380>)
    2b16:	429e      	cmp	r6, r3
    2b18:	d030      	beq.n	2b7c <__aeabi_dadd+0x1f0>
    2b1a:	0324      	lsls	r4, r4, #12
    2b1c:	0576      	lsls	r6, r6, #21
    2b1e:	0b24      	lsrs	r4, r4, #12
    2b20:	0d76      	lsrs	r6, r6, #21
    2b22:	e7d4      	b.n	2ace <__aeabi_dadd+0x142>
    2b24:	1a33      	subs	r3, r6, r0
    2b26:	469a      	mov	sl, r3
    2b28:	2b00      	cmp	r3, #0
    2b2a:	dd78      	ble.n	2c1e <__aeabi_dadd+0x292>
    2b2c:	2800      	cmp	r0, #0
    2b2e:	d031      	beq.n	2b94 <__aeabi_dadd+0x208>
    2b30:	4876      	ldr	r0, [pc, #472]	; (2d0c <__aeabi_dadd+0x380>)
    2b32:	4286      	cmp	r6, r0
    2b34:	d0ae      	beq.n	2a94 <__aeabi_dadd+0x108>
    2b36:	2080      	movs	r0, #128	; 0x80
    2b38:	0400      	lsls	r0, r0, #16
    2b3a:	4301      	orrs	r1, r0
    2b3c:	4653      	mov	r3, sl
    2b3e:	2b38      	cmp	r3, #56	; 0x38
    2b40:	dc00      	bgt.n	2b44 <__aeabi_dadd+0x1b8>
    2b42:	e0e9      	b.n	2d18 <__aeabi_dadd+0x38c>
    2b44:	430a      	orrs	r2, r1
    2b46:	1e51      	subs	r1, r2, #1
    2b48:	418a      	sbcs	r2, r1
    2b4a:	2100      	movs	r1, #0
    2b4c:	19d2      	adds	r2, r2, r7
    2b4e:	42ba      	cmp	r2, r7
    2b50:	41bf      	sbcs	r7, r7
    2b52:	1909      	adds	r1, r1, r4
    2b54:	427c      	negs	r4, r7
    2b56:	0017      	movs	r7, r2
    2b58:	190c      	adds	r4, r1, r4
    2b5a:	0223      	lsls	r3, r4, #8
    2b5c:	d5d3      	bpl.n	2b06 <__aeabi_dadd+0x17a>
    2b5e:	4b6b      	ldr	r3, [pc, #428]	; (2d0c <__aeabi_dadd+0x380>)
    2b60:	3601      	adds	r6, #1
    2b62:	429e      	cmp	r6, r3
    2b64:	d100      	bne.n	2b68 <__aeabi_dadd+0x1dc>
    2b66:	e13a      	b.n	2dde <__aeabi_dadd+0x452>
    2b68:	2001      	movs	r0, #1
    2b6a:	4b69      	ldr	r3, [pc, #420]	; (2d10 <__aeabi_dadd+0x384>)
    2b6c:	401c      	ands	r4, r3
    2b6e:	087b      	lsrs	r3, r7, #1
    2b70:	4007      	ands	r7, r0
    2b72:	431f      	orrs	r7, r3
    2b74:	07e0      	lsls	r0, r4, #31
    2b76:	4307      	orrs	r7, r0
    2b78:	0864      	lsrs	r4, r4, #1
    2b7a:	e78b      	b.n	2a94 <__aeabi_dadd+0x108>
    2b7c:	0023      	movs	r3, r4
    2b7e:	433b      	orrs	r3, r7
    2b80:	d100      	bne.n	2b84 <__aeabi_dadd+0x1f8>
    2b82:	e1cb      	b.n	2f1c <__aeabi_dadd+0x590>
    2b84:	2280      	movs	r2, #128	; 0x80
    2b86:	0312      	lsls	r2, r2, #12
    2b88:	4314      	orrs	r4, r2
    2b8a:	0324      	lsls	r4, r4, #12
    2b8c:	0b24      	lsrs	r4, r4, #12
    2b8e:	e79e      	b.n	2ace <__aeabi_dadd+0x142>
    2b90:	002e      	movs	r6, r5
    2b92:	e77f      	b.n	2a94 <__aeabi_dadd+0x108>
    2b94:	0008      	movs	r0, r1
    2b96:	4310      	orrs	r0, r2
    2b98:	d100      	bne.n	2b9c <__aeabi_dadd+0x210>
    2b9a:	e0b4      	b.n	2d06 <__aeabi_dadd+0x37a>
    2b9c:	1e58      	subs	r0, r3, #1
    2b9e:	2800      	cmp	r0, #0
    2ba0:	d000      	beq.n	2ba4 <__aeabi_dadd+0x218>
    2ba2:	e0de      	b.n	2d62 <__aeabi_dadd+0x3d6>
    2ba4:	18ba      	adds	r2, r7, r2
    2ba6:	42ba      	cmp	r2, r7
    2ba8:	419b      	sbcs	r3, r3
    2baa:	1864      	adds	r4, r4, r1
    2bac:	425b      	negs	r3, r3
    2bae:	18e4      	adds	r4, r4, r3
    2bb0:	0017      	movs	r7, r2
    2bb2:	2601      	movs	r6, #1
    2bb4:	0223      	lsls	r3, r4, #8
    2bb6:	d5a6      	bpl.n	2b06 <__aeabi_dadd+0x17a>
    2bb8:	2602      	movs	r6, #2
    2bba:	e7d5      	b.n	2b68 <__aeabi_dadd+0x1dc>
    2bbc:	2d00      	cmp	r5, #0
    2bbe:	d16e      	bne.n	2c9e <__aeabi_dadd+0x312>
    2bc0:	1c70      	adds	r0, r6, #1
    2bc2:	0540      	lsls	r0, r0, #21
    2bc4:	0d40      	lsrs	r0, r0, #21
    2bc6:	2801      	cmp	r0, #1
    2bc8:	dc00      	bgt.n	2bcc <__aeabi_dadd+0x240>
    2bca:	e0f9      	b.n	2dc0 <__aeabi_dadd+0x434>
    2bcc:	1ab8      	subs	r0, r7, r2
    2bce:	4684      	mov	ip, r0
    2bd0:	4287      	cmp	r7, r0
    2bd2:	4180      	sbcs	r0, r0
    2bd4:	1ae5      	subs	r5, r4, r3
    2bd6:	4240      	negs	r0, r0
    2bd8:	1a2d      	subs	r5, r5, r0
    2bda:	0228      	lsls	r0, r5, #8
    2bdc:	d400      	bmi.n	2be0 <__aeabi_dadd+0x254>
    2bde:	e089      	b.n	2cf4 <__aeabi_dadd+0x368>
    2be0:	1bd7      	subs	r7, r2, r7
    2be2:	42ba      	cmp	r2, r7
    2be4:	4192      	sbcs	r2, r2
    2be6:	1b1c      	subs	r4, r3, r4
    2be8:	4252      	negs	r2, r2
    2bea:	1aa5      	subs	r5, r4, r2
    2bec:	46d8      	mov	r8, fp
    2bee:	e729      	b.n	2a44 <__aeabi_dadd+0xb8>
    2bf0:	4645      	mov	r5, r8
    2bf2:	2400      	movs	r4, #0
    2bf4:	2700      	movs	r7, #0
    2bf6:	e76a      	b.n	2ace <__aeabi_dadd+0x142>
    2bf8:	4c45      	ldr	r4, [pc, #276]	; (2d10 <__aeabi_dadd+0x384>)
    2bfa:	1af6      	subs	r6, r6, r3
    2bfc:	402c      	ands	r4, r5
    2bfe:	e749      	b.n	2a94 <__aeabi_dadd+0x108>
    2c00:	003d      	movs	r5, r7
    2c02:	3828      	subs	r0, #40	; 0x28
    2c04:	4085      	lsls	r5, r0
    2c06:	2700      	movs	r7, #0
    2c08:	e72e      	b.n	2a68 <__aeabi_dadd+0xdc>
    2c0a:	0038      	movs	r0, r7
    2c0c:	f000 ffda 	bl	3bc4 <__clzsi2>
    2c10:	3020      	adds	r0, #32
    2c12:	e71d      	b.n	2a50 <__aeabi_dadd+0xc4>
    2c14:	430a      	orrs	r2, r1
    2c16:	1e51      	subs	r1, r2, #1
    2c18:	418a      	sbcs	r2, r1
    2c1a:	2100      	movs	r1, #0
    2c1c:	e707      	b.n	2a2e <__aeabi_dadd+0xa2>
    2c1e:	2b00      	cmp	r3, #0
    2c20:	d000      	beq.n	2c24 <__aeabi_dadd+0x298>
    2c22:	e0f3      	b.n	2e0c <__aeabi_dadd+0x480>
    2c24:	1c70      	adds	r0, r6, #1
    2c26:	0543      	lsls	r3, r0, #21
    2c28:	0d5b      	lsrs	r3, r3, #21
    2c2a:	2b01      	cmp	r3, #1
    2c2c:	dc00      	bgt.n	2c30 <__aeabi_dadd+0x2a4>
    2c2e:	e0ad      	b.n	2d8c <__aeabi_dadd+0x400>
    2c30:	4b36      	ldr	r3, [pc, #216]	; (2d0c <__aeabi_dadd+0x380>)
    2c32:	4298      	cmp	r0, r3
    2c34:	d100      	bne.n	2c38 <__aeabi_dadd+0x2ac>
    2c36:	e0d1      	b.n	2ddc <__aeabi_dadd+0x450>
    2c38:	18ba      	adds	r2, r7, r2
    2c3a:	42ba      	cmp	r2, r7
    2c3c:	41bf      	sbcs	r7, r7
    2c3e:	1864      	adds	r4, r4, r1
    2c40:	427f      	negs	r7, r7
    2c42:	19e4      	adds	r4, r4, r7
    2c44:	07e7      	lsls	r7, r4, #31
    2c46:	0852      	lsrs	r2, r2, #1
    2c48:	4317      	orrs	r7, r2
    2c4a:	0864      	lsrs	r4, r4, #1
    2c4c:	0006      	movs	r6, r0
    2c4e:	e721      	b.n	2a94 <__aeabi_dadd+0x108>
    2c50:	482e      	ldr	r0, [pc, #184]	; (2d0c <__aeabi_dadd+0x380>)
    2c52:	4285      	cmp	r5, r0
    2c54:	d100      	bne.n	2c58 <__aeabi_dadd+0x2cc>
    2c56:	e093      	b.n	2d80 <__aeabi_dadd+0x3f4>
    2c58:	001d      	movs	r5, r3
    2c5a:	e6d0      	b.n	29fe <__aeabi_dadd+0x72>
    2c5c:	0029      	movs	r1, r5
    2c5e:	3e1f      	subs	r6, #31
    2c60:	40f1      	lsrs	r1, r6
    2c62:	2b20      	cmp	r3, #32
    2c64:	d100      	bne.n	2c68 <__aeabi_dadd+0x2dc>
    2c66:	e08d      	b.n	2d84 <__aeabi_dadd+0x3f8>
    2c68:	2240      	movs	r2, #64	; 0x40
    2c6a:	1ad3      	subs	r3, r2, r3
    2c6c:	409d      	lsls	r5, r3
    2c6e:	432f      	orrs	r7, r5
    2c70:	1e7d      	subs	r5, r7, #1
    2c72:	41af      	sbcs	r7, r5
    2c74:	2400      	movs	r4, #0
    2c76:	430f      	orrs	r7, r1
    2c78:	2600      	movs	r6, #0
    2c7a:	e744      	b.n	2b06 <__aeabi_dadd+0x17a>
    2c7c:	002b      	movs	r3, r5
    2c7e:	0008      	movs	r0, r1
    2c80:	3b20      	subs	r3, #32
    2c82:	40d8      	lsrs	r0, r3
    2c84:	0003      	movs	r3, r0
    2c86:	2d20      	cmp	r5, #32
    2c88:	d100      	bne.n	2c8c <__aeabi_dadd+0x300>
    2c8a:	e07d      	b.n	2d88 <__aeabi_dadd+0x3fc>
    2c8c:	2040      	movs	r0, #64	; 0x40
    2c8e:	1b45      	subs	r5, r0, r5
    2c90:	40a9      	lsls	r1, r5
    2c92:	430a      	orrs	r2, r1
    2c94:	1e51      	subs	r1, r2, #1
    2c96:	418a      	sbcs	r2, r1
    2c98:	2100      	movs	r1, #0
    2c9a:	431a      	orrs	r2, r3
    2c9c:	e6c7      	b.n	2a2e <__aeabi_dadd+0xa2>
    2c9e:	2e00      	cmp	r6, #0
    2ca0:	d050      	beq.n	2d44 <__aeabi_dadd+0x3b8>
    2ca2:	4e1a      	ldr	r6, [pc, #104]	; (2d0c <__aeabi_dadd+0x380>)
    2ca4:	42b0      	cmp	r0, r6
    2ca6:	d057      	beq.n	2d58 <__aeabi_dadd+0x3cc>
    2ca8:	2680      	movs	r6, #128	; 0x80
    2caa:	426b      	negs	r3, r5
    2cac:	4699      	mov	r9, r3
    2cae:	0436      	lsls	r6, r6, #16
    2cb0:	4334      	orrs	r4, r6
    2cb2:	464b      	mov	r3, r9
    2cb4:	2b38      	cmp	r3, #56	; 0x38
    2cb6:	dd00      	ble.n	2cba <__aeabi_dadd+0x32e>
    2cb8:	e0d6      	b.n	2e68 <__aeabi_dadd+0x4dc>
    2cba:	2b1f      	cmp	r3, #31
    2cbc:	dd00      	ble.n	2cc0 <__aeabi_dadd+0x334>
    2cbe:	e135      	b.n	2f2c <__aeabi_dadd+0x5a0>
    2cc0:	2620      	movs	r6, #32
    2cc2:	1af5      	subs	r5, r6, r3
    2cc4:	0026      	movs	r6, r4
    2cc6:	40ae      	lsls	r6, r5
    2cc8:	46b2      	mov	sl, r6
    2cca:	003e      	movs	r6, r7
    2ccc:	40de      	lsrs	r6, r3
    2cce:	46ac      	mov	ip, r5
    2cd0:	0035      	movs	r5, r6
    2cd2:	4656      	mov	r6, sl
    2cd4:	432e      	orrs	r6, r5
    2cd6:	4665      	mov	r5, ip
    2cd8:	40af      	lsls	r7, r5
    2cda:	1e7d      	subs	r5, r7, #1
    2cdc:	41af      	sbcs	r7, r5
    2cde:	40dc      	lsrs	r4, r3
    2ce0:	4337      	orrs	r7, r6
    2ce2:	1bd7      	subs	r7, r2, r7
    2ce4:	42ba      	cmp	r2, r7
    2ce6:	4192      	sbcs	r2, r2
    2ce8:	1b0c      	subs	r4, r1, r4
    2cea:	4252      	negs	r2, r2
    2cec:	1aa4      	subs	r4, r4, r2
    2cee:	0006      	movs	r6, r0
    2cf0:	46d8      	mov	r8, fp
    2cf2:	e6a3      	b.n	2a3c <__aeabi_dadd+0xb0>
    2cf4:	4664      	mov	r4, ip
    2cf6:	4667      	mov	r7, ip
    2cf8:	432c      	orrs	r4, r5
    2cfa:	d000      	beq.n	2cfe <__aeabi_dadd+0x372>
    2cfc:	e6a2      	b.n	2a44 <__aeabi_dadd+0xb8>
    2cfe:	2500      	movs	r5, #0
    2d00:	2600      	movs	r6, #0
    2d02:	2700      	movs	r7, #0
    2d04:	e706      	b.n	2b14 <__aeabi_dadd+0x188>
    2d06:	001e      	movs	r6, r3
    2d08:	e6c4      	b.n	2a94 <__aeabi_dadd+0x108>
    2d0a:	46c0      	nop			; (mov r8, r8)
    2d0c:	000007ff 	.word	0x000007ff
    2d10:	ff7fffff 	.word	0xff7fffff
    2d14:	800fffff 	.word	0x800fffff
    2d18:	2b1f      	cmp	r3, #31
    2d1a:	dc63      	bgt.n	2de4 <__aeabi_dadd+0x458>
    2d1c:	2020      	movs	r0, #32
    2d1e:	1ac3      	subs	r3, r0, r3
    2d20:	0008      	movs	r0, r1
    2d22:	4098      	lsls	r0, r3
    2d24:	469c      	mov	ip, r3
    2d26:	4683      	mov	fp, r0
    2d28:	4653      	mov	r3, sl
    2d2a:	0010      	movs	r0, r2
    2d2c:	40d8      	lsrs	r0, r3
    2d2e:	0003      	movs	r3, r0
    2d30:	4658      	mov	r0, fp
    2d32:	4318      	orrs	r0, r3
    2d34:	4663      	mov	r3, ip
    2d36:	409a      	lsls	r2, r3
    2d38:	1e53      	subs	r3, r2, #1
    2d3a:	419a      	sbcs	r2, r3
    2d3c:	4653      	mov	r3, sl
    2d3e:	4302      	orrs	r2, r0
    2d40:	40d9      	lsrs	r1, r3
    2d42:	e703      	b.n	2b4c <__aeabi_dadd+0x1c0>
    2d44:	0026      	movs	r6, r4
    2d46:	433e      	orrs	r6, r7
    2d48:	d006      	beq.n	2d58 <__aeabi_dadd+0x3cc>
    2d4a:	43eb      	mvns	r3, r5
    2d4c:	4699      	mov	r9, r3
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d0c7      	beq.n	2ce2 <__aeabi_dadd+0x356>
    2d52:	4e94      	ldr	r6, [pc, #592]	; (2fa4 <__aeabi_dadd+0x618>)
    2d54:	42b0      	cmp	r0, r6
    2d56:	d1ac      	bne.n	2cb2 <__aeabi_dadd+0x326>
    2d58:	000c      	movs	r4, r1
    2d5a:	0017      	movs	r7, r2
    2d5c:	0006      	movs	r6, r0
    2d5e:	46d8      	mov	r8, fp
    2d60:	e698      	b.n	2a94 <__aeabi_dadd+0x108>
    2d62:	4b90      	ldr	r3, [pc, #576]	; (2fa4 <__aeabi_dadd+0x618>)
    2d64:	459a      	cmp	sl, r3
    2d66:	d00b      	beq.n	2d80 <__aeabi_dadd+0x3f4>
    2d68:	4682      	mov	sl, r0
    2d6a:	e6e7      	b.n	2b3c <__aeabi_dadd+0x1b0>
    2d6c:	2800      	cmp	r0, #0
    2d6e:	d000      	beq.n	2d72 <__aeabi_dadd+0x3e6>
    2d70:	e09e      	b.n	2eb0 <__aeabi_dadd+0x524>
    2d72:	0018      	movs	r0, r3
    2d74:	4310      	orrs	r0, r2
    2d76:	d100      	bne.n	2d7a <__aeabi_dadd+0x3ee>
    2d78:	e0e9      	b.n	2f4e <__aeabi_dadd+0x5c2>
    2d7a:	001c      	movs	r4, r3
    2d7c:	0017      	movs	r7, r2
    2d7e:	46d8      	mov	r8, fp
    2d80:	4e88      	ldr	r6, [pc, #544]	; (2fa4 <__aeabi_dadd+0x618>)
    2d82:	e687      	b.n	2a94 <__aeabi_dadd+0x108>
    2d84:	2500      	movs	r5, #0
    2d86:	e772      	b.n	2c6e <__aeabi_dadd+0x2e2>
    2d88:	2100      	movs	r1, #0
    2d8a:	e782      	b.n	2c92 <__aeabi_dadd+0x306>
    2d8c:	0023      	movs	r3, r4
    2d8e:	433b      	orrs	r3, r7
    2d90:	2e00      	cmp	r6, #0
    2d92:	d000      	beq.n	2d96 <__aeabi_dadd+0x40a>
    2d94:	e0ab      	b.n	2eee <__aeabi_dadd+0x562>
    2d96:	2b00      	cmp	r3, #0
    2d98:	d100      	bne.n	2d9c <__aeabi_dadd+0x410>
    2d9a:	e0e7      	b.n	2f6c <__aeabi_dadd+0x5e0>
    2d9c:	000b      	movs	r3, r1
    2d9e:	4313      	orrs	r3, r2
    2da0:	d100      	bne.n	2da4 <__aeabi_dadd+0x418>
    2da2:	e677      	b.n	2a94 <__aeabi_dadd+0x108>
    2da4:	18ba      	adds	r2, r7, r2
    2da6:	42ba      	cmp	r2, r7
    2da8:	41bf      	sbcs	r7, r7
    2daa:	1864      	adds	r4, r4, r1
    2dac:	427f      	negs	r7, r7
    2dae:	19e4      	adds	r4, r4, r7
    2db0:	0223      	lsls	r3, r4, #8
    2db2:	d400      	bmi.n	2db6 <__aeabi_dadd+0x42a>
    2db4:	e0f2      	b.n	2f9c <__aeabi_dadd+0x610>
    2db6:	4b7c      	ldr	r3, [pc, #496]	; (2fa8 <__aeabi_dadd+0x61c>)
    2db8:	0017      	movs	r7, r2
    2dba:	401c      	ands	r4, r3
    2dbc:	0006      	movs	r6, r0
    2dbe:	e669      	b.n	2a94 <__aeabi_dadd+0x108>
    2dc0:	0020      	movs	r0, r4
    2dc2:	4338      	orrs	r0, r7
    2dc4:	2e00      	cmp	r6, #0
    2dc6:	d1d1      	bne.n	2d6c <__aeabi_dadd+0x3e0>
    2dc8:	2800      	cmp	r0, #0
    2dca:	d15b      	bne.n	2e84 <__aeabi_dadd+0x4f8>
    2dcc:	001c      	movs	r4, r3
    2dce:	4314      	orrs	r4, r2
    2dd0:	d100      	bne.n	2dd4 <__aeabi_dadd+0x448>
    2dd2:	e0a8      	b.n	2f26 <__aeabi_dadd+0x59a>
    2dd4:	001c      	movs	r4, r3
    2dd6:	0017      	movs	r7, r2
    2dd8:	46d8      	mov	r8, fp
    2dda:	e65b      	b.n	2a94 <__aeabi_dadd+0x108>
    2ddc:	0006      	movs	r6, r0
    2dde:	2400      	movs	r4, #0
    2de0:	2700      	movs	r7, #0
    2de2:	e697      	b.n	2b14 <__aeabi_dadd+0x188>
    2de4:	4650      	mov	r0, sl
    2de6:	000b      	movs	r3, r1
    2de8:	3820      	subs	r0, #32
    2dea:	40c3      	lsrs	r3, r0
    2dec:	4699      	mov	r9, r3
    2dee:	4653      	mov	r3, sl
    2df0:	2b20      	cmp	r3, #32
    2df2:	d100      	bne.n	2df6 <__aeabi_dadd+0x46a>
    2df4:	e095      	b.n	2f22 <__aeabi_dadd+0x596>
    2df6:	2340      	movs	r3, #64	; 0x40
    2df8:	4650      	mov	r0, sl
    2dfa:	1a1b      	subs	r3, r3, r0
    2dfc:	4099      	lsls	r1, r3
    2dfe:	430a      	orrs	r2, r1
    2e00:	1e51      	subs	r1, r2, #1
    2e02:	418a      	sbcs	r2, r1
    2e04:	464b      	mov	r3, r9
    2e06:	2100      	movs	r1, #0
    2e08:	431a      	orrs	r2, r3
    2e0a:	e69f      	b.n	2b4c <__aeabi_dadd+0x1c0>
    2e0c:	2e00      	cmp	r6, #0
    2e0e:	d130      	bne.n	2e72 <__aeabi_dadd+0x4e6>
    2e10:	0026      	movs	r6, r4
    2e12:	433e      	orrs	r6, r7
    2e14:	d067      	beq.n	2ee6 <__aeabi_dadd+0x55a>
    2e16:	43db      	mvns	r3, r3
    2e18:	469a      	mov	sl, r3
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	d01c      	beq.n	2e58 <__aeabi_dadd+0x4cc>
    2e1e:	4e61      	ldr	r6, [pc, #388]	; (2fa4 <__aeabi_dadd+0x618>)
    2e20:	42b0      	cmp	r0, r6
    2e22:	d060      	beq.n	2ee6 <__aeabi_dadd+0x55a>
    2e24:	4653      	mov	r3, sl
    2e26:	2b38      	cmp	r3, #56	; 0x38
    2e28:	dd00      	ble.n	2e2c <__aeabi_dadd+0x4a0>
    2e2a:	e096      	b.n	2f5a <__aeabi_dadd+0x5ce>
    2e2c:	2b1f      	cmp	r3, #31
    2e2e:	dd00      	ble.n	2e32 <__aeabi_dadd+0x4a6>
    2e30:	e09f      	b.n	2f72 <__aeabi_dadd+0x5e6>
    2e32:	2620      	movs	r6, #32
    2e34:	1af3      	subs	r3, r6, r3
    2e36:	0026      	movs	r6, r4
    2e38:	409e      	lsls	r6, r3
    2e3a:	469c      	mov	ip, r3
    2e3c:	46b3      	mov	fp, r6
    2e3e:	4653      	mov	r3, sl
    2e40:	003e      	movs	r6, r7
    2e42:	40de      	lsrs	r6, r3
    2e44:	0033      	movs	r3, r6
    2e46:	465e      	mov	r6, fp
    2e48:	431e      	orrs	r6, r3
    2e4a:	4663      	mov	r3, ip
    2e4c:	409f      	lsls	r7, r3
    2e4e:	1e7b      	subs	r3, r7, #1
    2e50:	419f      	sbcs	r7, r3
    2e52:	4653      	mov	r3, sl
    2e54:	40dc      	lsrs	r4, r3
    2e56:	4337      	orrs	r7, r6
    2e58:	18bf      	adds	r7, r7, r2
    2e5a:	4297      	cmp	r7, r2
    2e5c:	4192      	sbcs	r2, r2
    2e5e:	1864      	adds	r4, r4, r1
    2e60:	4252      	negs	r2, r2
    2e62:	18a4      	adds	r4, r4, r2
    2e64:	0006      	movs	r6, r0
    2e66:	e678      	b.n	2b5a <__aeabi_dadd+0x1ce>
    2e68:	4327      	orrs	r7, r4
    2e6a:	1e7c      	subs	r4, r7, #1
    2e6c:	41a7      	sbcs	r7, r4
    2e6e:	2400      	movs	r4, #0
    2e70:	e737      	b.n	2ce2 <__aeabi_dadd+0x356>
    2e72:	4e4c      	ldr	r6, [pc, #304]	; (2fa4 <__aeabi_dadd+0x618>)
    2e74:	42b0      	cmp	r0, r6
    2e76:	d036      	beq.n	2ee6 <__aeabi_dadd+0x55a>
    2e78:	2680      	movs	r6, #128	; 0x80
    2e7a:	425b      	negs	r3, r3
    2e7c:	0436      	lsls	r6, r6, #16
    2e7e:	469a      	mov	sl, r3
    2e80:	4334      	orrs	r4, r6
    2e82:	e7cf      	b.n	2e24 <__aeabi_dadd+0x498>
    2e84:	0018      	movs	r0, r3
    2e86:	4310      	orrs	r0, r2
    2e88:	d100      	bne.n	2e8c <__aeabi_dadd+0x500>
    2e8a:	e603      	b.n	2a94 <__aeabi_dadd+0x108>
    2e8c:	1ab8      	subs	r0, r7, r2
    2e8e:	4684      	mov	ip, r0
    2e90:	4567      	cmp	r7, ip
    2e92:	41ad      	sbcs	r5, r5
    2e94:	1ae0      	subs	r0, r4, r3
    2e96:	426d      	negs	r5, r5
    2e98:	1b40      	subs	r0, r0, r5
    2e9a:	0205      	lsls	r5, r0, #8
    2e9c:	d400      	bmi.n	2ea0 <__aeabi_dadd+0x514>
    2e9e:	e62c      	b.n	2afa <__aeabi_dadd+0x16e>
    2ea0:	1bd7      	subs	r7, r2, r7
    2ea2:	42ba      	cmp	r2, r7
    2ea4:	4192      	sbcs	r2, r2
    2ea6:	1b1c      	subs	r4, r3, r4
    2ea8:	4252      	negs	r2, r2
    2eaa:	1aa4      	subs	r4, r4, r2
    2eac:	46d8      	mov	r8, fp
    2eae:	e5f1      	b.n	2a94 <__aeabi_dadd+0x108>
    2eb0:	0018      	movs	r0, r3
    2eb2:	4310      	orrs	r0, r2
    2eb4:	d100      	bne.n	2eb8 <__aeabi_dadd+0x52c>
    2eb6:	e763      	b.n	2d80 <__aeabi_dadd+0x3f4>
    2eb8:	08f8      	lsrs	r0, r7, #3
    2eba:	0767      	lsls	r7, r4, #29
    2ebc:	4307      	orrs	r7, r0
    2ebe:	2080      	movs	r0, #128	; 0x80
    2ec0:	08e4      	lsrs	r4, r4, #3
    2ec2:	0300      	lsls	r0, r0, #12
    2ec4:	4204      	tst	r4, r0
    2ec6:	d008      	beq.n	2eda <__aeabi_dadd+0x54e>
    2ec8:	08dd      	lsrs	r5, r3, #3
    2eca:	4205      	tst	r5, r0
    2ecc:	d105      	bne.n	2eda <__aeabi_dadd+0x54e>
    2ece:	08d2      	lsrs	r2, r2, #3
    2ed0:	0759      	lsls	r1, r3, #29
    2ed2:	4311      	orrs	r1, r2
    2ed4:	000f      	movs	r7, r1
    2ed6:	002c      	movs	r4, r5
    2ed8:	46d8      	mov	r8, fp
    2eda:	0f7b      	lsrs	r3, r7, #29
    2edc:	00e4      	lsls	r4, r4, #3
    2ede:	431c      	orrs	r4, r3
    2ee0:	00ff      	lsls	r7, r7, #3
    2ee2:	4e30      	ldr	r6, [pc, #192]	; (2fa4 <__aeabi_dadd+0x618>)
    2ee4:	e5d6      	b.n	2a94 <__aeabi_dadd+0x108>
    2ee6:	000c      	movs	r4, r1
    2ee8:	0017      	movs	r7, r2
    2eea:	0006      	movs	r6, r0
    2eec:	e5d2      	b.n	2a94 <__aeabi_dadd+0x108>
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d038      	beq.n	2f64 <__aeabi_dadd+0x5d8>
    2ef2:	000b      	movs	r3, r1
    2ef4:	4313      	orrs	r3, r2
    2ef6:	d100      	bne.n	2efa <__aeabi_dadd+0x56e>
    2ef8:	e742      	b.n	2d80 <__aeabi_dadd+0x3f4>
    2efa:	08f8      	lsrs	r0, r7, #3
    2efc:	0767      	lsls	r7, r4, #29
    2efe:	4307      	orrs	r7, r0
    2f00:	2080      	movs	r0, #128	; 0x80
    2f02:	08e4      	lsrs	r4, r4, #3
    2f04:	0300      	lsls	r0, r0, #12
    2f06:	4204      	tst	r4, r0
    2f08:	d0e7      	beq.n	2eda <__aeabi_dadd+0x54e>
    2f0a:	08cb      	lsrs	r3, r1, #3
    2f0c:	4203      	tst	r3, r0
    2f0e:	d1e4      	bne.n	2eda <__aeabi_dadd+0x54e>
    2f10:	08d2      	lsrs	r2, r2, #3
    2f12:	0749      	lsls	r1, r1, #29
    2f14:	4311      	orrs	r1, r2
    2f16:	000f      	movs	r7, r1
    2f18:	001c      	movs	r4, r3
    2f1a:	e7de      	b.n	2eda <__aeabi_dadd+0x54e>
    2f1c:	2700      	movs	r7, #0
    2f1e:	2400      	movs	r4, #0
    2f20:	e5d5      	b.n	2ace <__aeabi_dadd+0x142>
    2f22:	2100      	movs	r1, #0
    2f24:	e76b      	b.n	2dfe <__aeabi_dadd+0x472>
    2f26:	2500      	movs	r5, #0
    2f28:	2700      	movs	r7, #0
    2f2a:	e5f3      	b.n	2b14 <__aeabi_dadd+0x188>
    2f2c:	464e      	mov	r6, r9
    2f2e:	0025      	movs	r5, r4
    2f30:	3e20      	subs	r6, #32
    2f32:	40f5      	lsrs	r5, r6
    2f34:	464b      	mov	r3, r9
    2f36:	002e      	movs	r6, r5
    2f38:	2b20      	cmp	r3, #32
    2f3a:	d02d      	beq.n	2f98 <__aeabi_dadd+0x60c>
    2f3c:	2540      	movs	r5, #64	; 0x40
    2f3e:	1aed      	subs	r5, r5, r3
    2f40:	40ac      	lsls	r4, r5
    2f42:	4327      	orrs	r7, r4
    2f44:	1e7c      	subs	r4, r7, #1
    2f46:	41a7      	sbcs	r7, r4
    2f48:	2400      	movs	r4, #0
    2f4a:	4337      	orrs	r7, r6
    2f4c:	e6c9      	b.n	2ce2 <__aeabi_dadd+0x356>
    2f4e:	2480      	movs	r4, #128	; 0x80
    2f50:	2500      	movs	r5, #0
    2f52:	0324      	lsls	r4, r4, #12
    2f54:	4e13      	ldr	r6, [pc, #76]	; (2fa4 <__aeabi_dadd+0x618>)
    2f56:	2700      	movs	r7, #0
    2f58:	e5dc      	b.n	2b14 <__aeabi_dadd+0x188>
    2f5a:	4327      	orrs	r7, r4
    2f5c:	1e7c      	subs	r4, r7, #1
    2f5e:	41a7      	sbcs	r7, r4
    2f60:	2400      	movs	r4, #0
    2f62:	e779      	b.n	2e58 <__aeabi_dadd+0x4cc>
    2f64:	000c      	movs	r4, r1
    2f66:	0017      	movs	r7, r2
    2f68:	4e0e      	ldr	r6, [pc, #56]	; (2fa4 <__aeabi_dadd+0x618>)
    2f6a:	e593      	b.n	2a94 <__aeabi_dadd+0x108>
    2f6c:	000c      	movs	r4, r1
    2f6e:	0017      	movs	r7, r2
    2f70:	e590      	b.n	2a94 <__aeabi_dadd+0x108>
    2f72:	4656      	mov	r6, sl
    2f74:	0023      	movs	r3, r4
    2f76:	3e20      	subs	r6, #32
    2f78:	40f3      	lsrs	r3, r6
    2f7a:	4699      	mov	r9, r3
    2f7c:	4653      	mov	r3, sl
    2f7e:	2b20      	cmp	r3, #32
    2f80:	d00e      	beq.n	2fa0 <__aeabi_dadd+0x614>
    2f82:	2340      	movs	r3, #64	; 0x40
    2f84:	4656      	mov	r6, sl
    2f86:	1b9b      	subs	r3, r3, r6
    2f88:	409c      	lsls	r4, r3
    2f8a:	4327      	orrs	r7, r4
    2f8c:	1e7c      	subs	r4, r7, #1
    2f8e:	41a7      	sbcs	r7, r4
    2f90:	464b      	mov	r3, r9
    2f92:	2400      	movs	r4, #0
    2f94:	431f      	orrs	r7, r3
    2f96:	e75f      	b.n	2e58 <__aeabi_dadd+0x4cc>
    2f98:	2400      	movs	r4, #0
    2f9a:	e7d2      	b.n	2f42 <__aeabi_dadd+0x5b6>
    2f9c:	0017      	movs	r7, r2
    2f9e:	e5b2      	b.n	2b06 <__aeabi_dadd+0x17a>
    2fa0:	2400      	movs	r4, #0
    2fa2:	e7f2      	b.n	2f8a <__aeabi_dadd+0x5fe>
    2fa4:	000007ff 	.word	0x000007ff
    2fa8:	ff7fffff 	.word	0xff7fffff

00002fac <__aeabi_dmul>:
    2fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fae:	4657      	mov	r7, sl
    2fb0:	4645      	mov	r5, r8
    2fb2:	46de      	mov	lr, fp
    2fb4:	464e      	mov	r6, r9
    2fb6:	b5e0      	push	{r5, r6, r7, lr}
    2fb8:	030c      	lsls	r4, r1, #12
    2fba:	4698      	mov	r8, r3
    2fbc:	004e      	lsls	r6, r1, #1
    2fbe:	0b23      	lsrs	r3, r4, #12
    2fc0:	b087      	sub	sp, #28
    2fc2:	0007      	movs	r7, r0
    2fc4:	4692      	mov	sl, r2
    2fc6:	469b      	mov	fp, r3
    2fc8:	0d76      	lsrs	r6, r6, #21
    2fca:	0fcd      	lsrs	r5, r1, #31
    2fcc:	2e00      	cmp	r6, #0
    2fce:	d06b      	beq.n	30a8 <__aeabi_dmul+0xfc>
    2fd0:	4b6d      	ldr	r3, [pc, #436]	; (3188 <__aeabi_dmul+0x1dc>)
    2fd2:	429e      	cmp	r6, r3
    2fd4:	d035      	beq.n	3042 <__aeabi_dmul+0x96>
    2fd6:	2480      	movs	r4, #128	; 0x80
    2fd8:	465b      	mov	r3, fp
    2fda:	0f42      	lsrs	r2, r0, #29
    2fdc:	0424      	lsls	r4, r4, #16
    2fde:	00db      	lsls	r3, r3, #3
    2fe0:	4314      	orrs	r4, r2
    2fe2:	431c      	orrs	r4, r3
    2fe4:	00c3      	lsls	r3, r0, #3
    2fe6:	4699      	mov	r9, r3
    2fe8:	4b68      	ldr	r3, [pc, #416]	; (318c <__aeabi_dmul+0x1e0>)
    2fea:	46a3      	mov	fp, r4
    2fec:	469c      	mov	ip, r3
    2fee:	2300      	movs	r3, #0
    2ff0:	2700      	movs	r7, #0
    2ff2:	4466      	add	r6, ip
    2ff4:	9302      	str	r3, [sp, #8]
    2ff6:	4643      	mov	r3, r8
    2ff8:	031c      	lsls	r4, r3, #12
    2ffa:	005a      	lsls	r2, r3, #1
    2ffc:	0fdb      	lsrs	r3, r3, #31
    2ffe:	4650      	mov	r0, sl
    3000:	0b24      	lsrs	r4, r4, #12
    3002:	0d52      	lsrs	r2, r2, #21
    3004:	4698      	mov	r8, r3
    3006:	d100      	bne.n	300a <__aeabi_dmul+0x5e>
    3008:	e076      	b.n	30f8 <__aeabi_dmul+0x14c>
    300a:	4b5f      	ldr	r3, [pc, #380]	; (3188 <__aeabi_dmul+0x1dc>)
    300c:	429a      	cmp	r2, r3
    300e:	d06d      	beq.n	30ec <__aeabi_dmul+0x140>
    3010:	2380      	movs	r3, #128	; 0x80
    3012:	0f41      	lsrs	r1, r0, #29
    3014:	041b      	lsls	r3, r3, #16
    3016:	430b      	orrs	r3, r1
    3018:	495c      	ldr	r1, [pc, #368]	; (318c <__aeabi_dmul+0x1e0>)
    301a:	00e4      	lsls	r4, r4, #3
    301c:	468c      	mov	ip, r1
    301e:	431c      	orrs	r4, r3
    3020:	00c3      	lsls	r3, r0, #3
    3022:	2000      	movs	r0, #0
    3024:	4462      	add	r2, ip
    3026:	4641      	mov	r1, r8
    3028:	18b6      	adds	r6, r6, r2
    302a:	4069      	eors	r1, r5
    302c:	1c72      	adds	r2, r6, #1
    302e:	9101      	str	r1, [sp, #4]
    3030:	4694      	mov	ip, r2
    3032:	4307      	orrs	r7, r0
    3034:	2f0f      	cmp	r7, #15
    3036:	d900      	bls.n	303a <__aeabi_dmul+0x8e>
    3038:	e0b0      	b.n	319c <__aeabi_dmul+0x1f0>
    303a:	4a55      	ldr	r2, [pc, #340]	; (3190 <__aeabi_dmul+0x1e4>)
    303c:	00bf      	lsls	r7, r7, #2
    303e:	59d2      	ldr	r2, [r2, r7]
    3040:	4697      	mov	pc, r2
    3042:	465b      	mov	r3, fp
    3044:	4303      	orrs	r3, r0
    3046:	4699      	mov	r9, r3
    3048:	d000      	beq.n	304c <__aeabi_dmul+0xa0>
    304a:	e087      	b.n	315c <__aeabi_dmul+0x1b0>
    304c:	2300      	movs	r3, #0
    304e:	469b      	mov	fp, r3
    3050:	3302      	adds	r3, #2
    3052:	2708      	movs	r7, #8
    3054:	9302      	str	r3, [sp, #8]
    3056:	e7ce      	b.n	2ff6 <__aeabi_dmul+0x4a>
    3058:	4642      	mov	r2, r8
    305a:	9201      	str	r2, [sp, #4]
    305c:	2802      	cmp	r0, #2
    305e:	d067      	beq.n	3130 <__aeabi_dmul+0x184>
    3060:	2803      	cmp	r0, #3
    3062:	d100      	bne.n	3066 <__aeabi_dmul+0xba>
    3064:	e20e      	b.n	3484 <__aeabi_dmul+0x4d8>
    3066:	2801      	cmp	r0, #1
    3068:	d000      	beq.n	306c <__aeabi_dmul+0xc0>
    306a:	e162      	b.n	3332 <__aeabi_dmul+0x386>
    306c:	2300      	movs	r3, #0
    306e:	2400      	movs	r4, #0
    3070:	2200      	movs	r2, #0
    3072:	4699      	mov	r9, r3
    3074:	9901      	ldr	r1, [sp, #4]
    3076:	4001      	ands	r1, r0
    3078:	b2cd      	uxtb	r5, r1
    307a:	2100      	movs	r1, #0
    307c:	0312      	lsls	r2, r2, #12
    307e:	0d0b      	lsrs	r3, r1, #20
    3080:	0b12      	lsrs	r2, r2, #12
    3082:	051b      	lsls	r3, r3, #20
    3084:	4313      	orrs	r3, r2
    3086:	4a43      	ldr	r2, [pc, #268]	; (3194 <__aeabi_dmul+0x1e8>)
    3088:	0524      	lsls	r4, r4, #20
    308a:	4013      	ands	r3, r2
    308c:	431c      	orrs	r4, r3
    308e:	0064      	lsls	r4, r4, #1
    3090:	07ed      	lsls	r5, r5, #31
    3092:	0864      	lsrs	r4, r4, #1
    3094:	432c      	orrs	r4, r5
    3096:	4648      	mov	r0, r9
    3098:	0021      	movs	r1, r4
    309a:	b007      	add	sp, #28
    309c:	bc3c      	pop	{r2, r3, r4, r5}
    309e:	4690      	mov	r8, r2
    30a0:	4699      	mov	r9, r3
    30a2:	46a2      	mov	sl, r4
    30a4:	46ab      	mov	fp, r5
    30a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30a8:	4303      	orrs	r3, r0
    30aa:	4699      	mov	r9, r3
    30ac:	d04f      	beq.n	314e <__aeabi_dmul+0x1a2>
    30ae:	465b      	mov	r3, fp
    30b0:	2b00      	cmp	r3, #0
    30b2:	d100      	bne.n	30b6 <__aeabi_dmul+0x10a>
    30b4:	e189      	b.n	33ca <__aeabi_dmul+0x41e>
    30b6:	4658      	mov	r0, fp
    30b8:	f000 fd84 	bl	3bc4 <__clzsi2>
    30bc:	0003      	movs	r3, r0
    30be:	3b0b      	subs	r3, #11
    30c0:	2b1c      	cmp	r3, #28
    30c2:	dd00      	ble.n	30c6 <__aeabi_dmul+0x11a>
    30c4:	e17a      	b.n	33bc <__aeabi_dmul+0x410>
    30c6:	221d      	movs	r2, #29
    30c8:	1ad3      	subs	r3, r2, r3
    30ca:	003a      	movs	r2, r7
    30cc:	0001      	movs	r1, r0
    30ce:	465c      	mov	r4, fp
    30d0:	40da      	lsrs	r2, r3
    30d2:	3908      	subs	r1, #8
    30d4:	408c      	lsls	r4, r1
    30d6:	0013      	movs	r3, r2
    30d8:	408f      	lsls	r7, r1
    30da:	4323      	orrs	r3, r4
    30dc:	469b      	mov	fp, r3
    30de:	46b9      	mov	r9, r7
    30e0:	2300      	movs	r3, #0
    30e2:	4e2d      	ldr	r6, [pc, #180]	; (3198 <__aeabi_dmul+0x1ec>)
    30e4:	2700      	movs	r7, #0
    30e6:	1a36      	subs	r6, r6, r0
    30e8:	9302      	str	r3, [sp, #8]
    30ea:	e784      	b.n	2ff6 <__aeabi_dmul+0x4a>
    30ec:	4653      	mov	r3, sl
    30ee:	4323      	orrs	r3, r4
    30f0:	d12a      	bne.n	3148 <__aeabi_dmul+0x19c>
    30f2:	2400      	movs	r4, #0
    30f4:	2002      	movs	r0, #2
    30f6:	e796      	b.n	3026 <__aeabi_dmul+0x7a>
    30f8:	4653      	mov	r3, sl
    30fa:	4323      	orrs	r3, r4
    30fc:	d020      	beq.n	3140 <__aeabi_dmul+0x194>
    30fe:	2c00      	cmp	r4, #0
    3100:	d100      	bne.n	3104 <__aeabi_dmul+0x158>
    3102:	e157      	b.n	33b4 <__aeabi_dmul+0x408>
    3104:	0020      	movs	r0, r4
    3106:	f000 fd5d 	bl	3bc4 <__clzsi2>
    310a:	0003      	movs	r3, r0
    310c:	3b0b      	subs	r3, #11
    310e:	2b1c      	cmp	r3, #28
    3110:	dd00      	ble.n	3114 <__aeabi_dmul+0x168>
    3112:	e149      	b.n	33a8 <__aeabi_dmul+0x3fc>
    3114:	211d      	movs	r1, #29
    3116:	1acb      	subs	r3, r1, r3
    3118:	4651      	mov	r1, sl
    311a:	0002      	movs	r2, r0
    311c:	40d9      	lsrs	r1, r3
    311e:	4653      	mov	r3, sl
    3120:	3a08      	subs	r2, #8
    3122:	4094      	lsls	r4, r2
    3124:	4093      	lsls	r3, r2
    3126:	430c      	orrs	r4, r1
    3128:	4a1b      	ldr	r2, [pc, #108]	; (3198 <__aeabi_dmul+0x1ec>)
    312a:	1a12      	subs	r2, r2, r0
    312c:	2000      	movs	r0, #0
    312e:	e77a      	b.n	3026 <__aeabi_dmul+0x7a>
    3130:	2501      	movs	r5, #1
    3132:	9b01      	ldr	r3, [sp, #4]
    3134:	4c14      	ldr	r4, [pc, #80]	; (3188 <__aeabi_dmul+0x1dc>)
    3136:	401d      	ands	r5, r3
    3138:	2300      	movs	r3, #0
    313a:	2200      	movs	r2, #0
    313c:	4699      	mov	r9, r3
    313e:	e79c      	b.n	307a <__aeabi_dmul+0xce>
    3140:	2400      	movs	r4, #0
    3142:	2200      	movs	r2, #0
    3144:	2001      	movs	r0, #1
    3146:	e76e      	b.n	3026 <__aeabi_dmul+0x7a>
    3148:	4653      	mov	r3, sl
    314a:	2003      	movs	r0, #3
    314c:	e76b      	b.n	3026 <__aeabi_dmul+0x7a>
    314e:	2300      	movs	r3, #0
    3150:	469b      	mov	fp, r3
    3152:	3301      	adds	r3, #1
    3154:	2704      	movs	r7, #4
    3156:	2600      	movs	r6, #0
    3158:	9302      	str	r3, [sp, #8]
    315a:	e74c      	b.n	2ff6 <__aeabi_dmul+0x4a>
    315c:	2303      	movs	r3, #3
    315e:	4681      	mov	r9, r0
    3160:	270c      	movs	r7, #12
    3162:	9302      	str	r3, [sp, #8]
    3164:	e747      	b.n	2ff6 <__aeabi_dmul+0x4a>
    3166:	2280      	movs	r2, #128	; 0x80
    3168:	2300      	movs	r3, #0
    316a:	2500      	movs	r5, #0
    316c:	0312      	lsls	r2, r2, #12
    316e:	4699      	mov	r9, r3
    3170:	4c05      	ldr	r4, [pc, #20]	; (3188 <__aeabi_dmul+0x1dc>)
    3172:	e782      	b.n	307a <__aeabi_dmul+0xce>
    3174:	465c      	mov	r4, fp
    3176:	464b      	mov	r3, r9
    3178:	9802      	ldr	r0, [sp, #8]
    317a:	e76f      	b.n	305c <__aeabi_dmul+0xb0>
    317c:	465c      	mov	r4, fp
    317e:	464b      	mov	r3, r9
    3180:	9501      	str	r5, [sp, #4]
    3182:	9802      	ldr	r0, [sp, #8]
    3184:	e76a      	b.n	305c <__aeabi_dmul+0xb0>
    3186:	46c0      	nop			; (mov r8, r8)
    3188:	000007ff 	.word	0x000007ff
    318c:	fffffc01 	.word	0xfffffc01
    3190:	000045a4 	.word	0x000045a4
    3194:	800fffff 	.word	0x800fffff
    3198:	fffffc0d 	.word	0xfffffc0d
    319c:	464a      	mov	r2, r9
    319e:	4649      	mov	r1, r9
    31a0:	0c17      	lsrs	r7, r2, #16
    31a2:	0c1a      	lsrs	r2, r3, #16
    31a4:	041b      	lsls	r3, r3, #16
    31a6:	0c1b      	lsrs	r3, r3, #16
    31a8:	0408      	lsls	r0, r1, #16
    31aa:	0019      	movs	r1, r3
    31ac:	0c00      	lsrs	r0, r0, #16
    31ae:	4341      	muls	r1, r0
    31b0:	0015      	movs	r5, r2
    31b2:	4688      	mov	r8, r1
    31b4:	0019      	movs	r1, r3
    31b6:	437d      	muls	r5, r7
    31b8:	4379      	muls	r1, r7
    31ba:	9503      	str	r5, [sp, #12]
    31bc:	4689      	mov	r9, r1
    31be:	0029      	movs	r1, r5
    31c0:	0015      	movs	r5, r2
    31c2:	4345      	muls	r5, r0
    31c4:	444d      	add	r5, r9
    31c6:	9502      	str	r5, [sp, #8]
    31c8:	4645      	mov	r5, r8
    31ca:	0c2d      	lsrs	r5, r5, #16
    31cc:	46aa      	mov	sl, r5
    31ce:	9d02      	ldr	r5, [sp, #8]
    31d0:	4455      	add	r5, sl
    31d2:	45a9      	cmp	r9, r5
    31d4:	d906      	bls.n	31e4 <__aeabi_dmul+0x238>
    31d6:	468a      	mov	sl, r1
    31d8:	2180      	movs	r1, #128	; 0x80
    31da:	0249      	lsls	r1, r1, #9
    31dc:	4689      	mov	r9, r1
    31de:	44ca      	add	sl, r9
    31e0:	4651      	mov	r1, sl
    31e2:	9103      	str	r1, [sp, #12]
    31e4:	0c29      	lsrs	r1, r5, #16
    31e6:	9104      	str	r1, [sp, #16]
    31e8:	4641      	mov	r1, r8
    31ea:	0409      	lsls	r1, r1, #16
    31ec:	042d      	lsls	r5, r5, #16
    31ee:	0c09      	lsrs	r1, r1, #16
    31f0:	4688      	mov	r8, r1
    31f2:	0029      	movs	r1, r5
    31f4:	0c25      	lsrs	r5, r4, #16
    31f6:	0424      	lsls	r4, r4, #16
    31f8:	4441      	add	r1, r8
    31fa:	0c24      	lsrs	r4, r4, #16
    31fc:	9105      	str	r1, [sp, #20]
    31fe:	0021      	movs	r1, r4
    3200:	4341      	muls	r1, r0
    3202:	4688      	mov	r8, r1
    3204:	0021      	movs	r1, r4
    3206:	4379      	muls	r1, r7
    3208:	468a      	mov	sl, r1
    320a:	4368      	muls	r0, r5
    320c:	4641      	mov	r1, r8
    320e:	4450      	add	r0, sl
    3210:	4681      	mov	r9, r0
    3212:	0c08      	lsrs	r0, r1, #16
    3214:	4448      	add	r0, r9
    3216:	436f      	muls	r7, r5
    3218:	4582      	cmp	sl, r0
    321a:	d903      	bls.n	3224 <__aeabi_dmul+0x278>
    321c:	2180      	movs	r1, #128	; 0x80
    321e:	0249      	lsls	r1, r1, #9
    3220:	4689      	mov	r9, r1
    3222:	444f      	add	r7, r9
    3224:	0c01      	lsrs	r1, r0, #16
    3226:	4689      	mov	r9, r1
    3228:	0039      	movs	r1, r7
    322a:	4449      	add	r1, r9
    322c:	9102      	str	r1, [sp, #8]
    322e:	4641      	mov	r1, r8
    3230:	040f      	lsls	r7, r1, #16
    3232:	9904      	ldr	r1, [sp, #16]
    3234:	0c3f      	lsrs	r7, r7, #16
    3236:	4688      	mov	r8, r1
    3238:	0400      	lsls	r0, r0, #16
    323a:	19c0      	adds	r0, r0, r7
    323c:	4480      	add	r8, r0
    323e:	4641      	mov	r1, r8
    3240:	9104      	str	r1, [sp, #16]
    3242:	4659      	mov	r1, fp
    3244:	0c0f      	lsrs	r7, r1, #16
    3246:	0409      	lsls	r1, r1, #16
    3248:	0c09      	lsrs	r1, r1, #16
    324a:	4688      	mov	r8, r1
    324c:	4359      	muls	r1, r3
    324e:	468a      	mov	sl, r1
    3250:	0039      	movs	r1, r7
    3252:	4351      	muls	r1, r2
    3254:	4689      	mov	r9, r1
    3256:	4641      	mov	r1, r8
    3258:	434a      	muls	r2, r1
    325a:	4651      	mov	r1, sl
    325c:	0c09      	lsrs	r1, r1, #16
    325e:	468b      	mov	fp, r1
    3260:	437b      	muls	r3, r7
    3262:	18d2      	adds	r2, r2, r3
    3264:	445a      	add	r2, fp
    3266:	4293      	cmp	r3, r2
    3268:	d903      	bls.n	3272 <__aeabi_dmul+0x2c6>
    326a:	2380      	movs	r3, #128	; 0x80
    326c:	025b      	lsls	r3, r3, #9
    326e:	469b      	mov	fp, r3
    3270:	44d9      	add	r9, fp
    3272:	4651      	mov	r1, sl
    3274:	0409      	lsls	r1, r1, #16
    3276:	0c09      	lsrs	r1, r1, #16
    3278:	468a      	mov	sl, r1
    327a:	4641      	mov	r1, r8
    327c:	4361      	muls	r1, r4
    327e:	437c      	muls	r4, r7
    3280:	0c13      	lsrs	r3, r2, #16
    3282:	0412      	lsls	r2, r2, #16
    3284:	444b      	add	r3, r9
    3286:	4452      	add	r2, sl
    3288:	46a1      	mov	r9, r4
    328a:	468a      	mov	sl, r1
    328c:	003c      	movs	r4, r7
    328e:	4641      	mov	r1, r8
    3290:	436c      	muls	r4, r5
    3292:	434d      	muls	r5, r1
    3294:	4651      	mov	r1, sl
    3296:	444d      	add	r5, r9
    3298:	0c0f      	lsrs	r7, r1, #16
    329a:	197d      	adds	r5, r7, r5
    329c:	45a9      	cmp	r9, r5
    329e:	d903      	bls.n	32a8 <__aeabi_dmul+0x2fc>
    32a0:	2180      	movs	r1, #128	; 0x80
    32a2:	0249      	lsls	r1, r1, #9
    32a4:	4688      	mov	r8, r1
    32a6:	4444      	add	r4, r8
    32a8:	9f04      	ldr	r7, [sp, #16]
    32aa:	9903      	ldr	r1, [sp, #12]
    32ac:	46b8      	mov	r8, r7
    32ae:	4441      	add	r1, r8
    32b0:	468b      	mov	fp, r1
    32b2:	4583      	cmp	fp, r0
    32b4:	4180      	sbcs	r0, r0
    32b6:	4241      	negs	r1, r0
    32b8:	4688      	mov	r8, r1
    32ba:	4651      	mov	r1, sl
    32bc:	0408      	lsls	r0, r1, #16
    32be:	042f      	lsls	r7, r5, #16
    32c0:	0c00      	lsrs	r0, r0, #16
    32c2:	183f      	adds	r7, r7, r0
    32c4:	4658      	mov	r0, fp
    32c6:	9902      	ldr	r1, [sp, #8]
    32c8:	1810      	adds	r0, r2, r0
    32ca:	4689      	mov	r9, r1
    32cc:	4290      	cmp	r0, r2
    32ce:	4192      	sbcs	r2, r2
    32d0:	444f      	add	r7, r9
    32d2:	46ba      	mov	sl, r7
    32d4:	4252      	negs	r2, r2
    32d6:	4699      	mov	r9, r3
    32d8:	4693      	mov	fp, r2
    32da:	44c2      	add	sl, r8
    32dc:	44d1      	add	r9, sl
    32de:	44cb      	add	fp, r9
    32e0:	428f      	cmp	r7, r1
    32e2:	41bf      	sbcs	r7, r7
    32e4:	45c2      	cmp	sl, r8
    32e6:	4189      	sbcs	r1, r1
    32e8:	4599      	cmp	r9, r3
    32ea:	419b      	sbcs	r3, r3
    32ec:	4593      	cmp	fp, r2
    32ee:	4192      	sbcs	r2, r2
    32f0:	427f      	negs	r7, r7
    32f2:	4249      	negs	r1, r1
    32f4:	0c2d      	lsrs	r5, r5, #16
    32f6:	4252      	negs	r2, r2
    32f8:	430f      	orrs	r7, r1
    32fa:	425b      	negs	r3, r3
    32fc:	4313      	orrs	r3, r2
    32fe:	197f      	adds	r7, r7, r5
    3300:	18ff      	adds	r7, r7, r3
    3302:	465b      	mov	r3, fp
    3304:	193c      	adds	r4, r7, r4
    3306:	0ddb      	lsrs	r3, r3, #23
    3308:	9a05      	ldr	r2, [sp, #20]
    330a:	0264      	lsls	r4, r4, #9
    330c:	431c      	orrs	r4, r3
    330e:	0243      	lsls	r3, r0, #9
    3310:	4313      	orrs	r3, r2
    3312:	1e5d      	subs	r5, r3, #1
    3314:	41ab      	sbcs	r3, r5
    3316:	465a      	mov	r2, fp
    3318:	0dc0      	lsrs	r0, r0, #23
    331a:	4303      	orrs	r3, r0
    331c:	0252      	lsls	r2, r2, #9
    331e:	4313      	orrs	r3, r2
    3320:	01e2      	lsls	r2, r4, #7
    3322:	d556      	bpl.n	33d2 <__aeabi_dmul+0x426>
    3324:	2001      	movs	r0, #1
    3326:	085a      	lsrs	r2, r3, #1
    3328:	4003      	ands	r3, r0
    332a:	4313      	orrs	r3, r2
    332c:	07e2      	lsls	r2, r4, #31
    332e:	4313      	orrs	r3, r2
    3330:	0864      	lsrs	r4, r4, #1
    3332:	485a      	ldr	r0, [pc, #360]	; (349c <__aeabi_dmul+0x4f0>)
    3334:	4460      	add	r0, ip
    3336:	2800      	cmp	r0, #0
    3338:	dd4d      	ble.n	33d6 <__aeabi_dmul+0x42a>
    333a:	075a      	lsls	r2, r3, #29
    333c:	d009      	beq.n	3352 <__aeabi_dmul+0x3a6>
    333e:	220f      	movs	r2, #15
    3340:	401a      	ands	r2, r3
    3342:	2a04      	cmp	r2, #4
    3344:	d005      	beq.n	3352 <__aeabi_dmul+0x3a6>
    3346:	1d1a      	adds	r2, r3, #4
    3348:	429a      	cmp	r2, r3
    334a:	419b      	sbcs	r3, r3
    334c:	425b      	negs	r3, r3
    334e:	18e4      	adds	r4, r4, r3
    3350:	0013      	movs	r3, r2
    3352:	01e2      	lsls	r2, r4, #7
    3354:	d504      	bpl.n	3360 <__aeabi_dmul+0x3b4>
    3356:	2080      	movs	r0, #128	; 0x80
    3358:	4a51      	ldr	r2, [pc, #324]	; (34a0 <__aeabi_dmul+0x4f4>)
    335a:	00c0      	lsls	r0, r0, #3
    335c:	4014      	ands	r4, r2
    335e:	4460      	add	r0, ip
    3360:	4a50      	ldr	r2, [pc, #320]	; (34a4 <__aeabi_dmul+0x4f8>)
    3362:	4290      	cmp	r0, r2
    3364:	dd00      	ble.n	3368 <__aeabi_dmul+0x3bc>
    3366:	e6e3      	b.n	3130 <__aeabi_dmul+0x184>
    3368:	2501      	movs	r5, #1
    336a:	08db      	lsrs	r3, r3, #3
    336c:	0762      	lsls	r2, r4, #29
    336e:	431a      	orrs	r2, r3
    3370:	0264      	lsls	r4, r4, #9
    3372:	9b01      	ldr	r3, [sp, #4]
    3374:	4691      	mov	r9, r2
    3376:	0b22      	lsrs	r2, r4, #12
    3378:	0544      	lsls	r4, r0, #21
    337a:	0d64      	lsrs	r4, r4, #21
    337c:	401d      	ands	r5, r3
    337e:	e67c      	b.n	307a <__aeabi_dmul+0xce>
    3380:	2280      	movs	r2, #128	; 0x80
    3382:	4659      	mov	r1, fp
    3384:	0312      	lsls	r2, r2, #12
    3386:	4211      	tst	r1, r2
    3388:	d008      	beq.n	339c <__aeabi_dmul+0x3f0>
    338a:	4214      	tst	r4, r2
    338c:	d106      	bne.n	339c <__aeabi_dmul+0x3f0>
    338e:	4322      	orrs	r2, r4
    3390:	0312      	lsls	r2, r2, #12
    3392:	0b12      	lsrs	r2, r2, #12
    3394:	4645      	mov	r5, r8
    3396:	4699      	mov	r9, r3
    3398:	4c43      	ldr	r4, [pc, #268]	; (34a8 <__aeabi_dmul+0x4fc>)
    339a:	e66e      	b.n	307a <__aeabi_dmul+0xce>
    339c:	465b      	mov	r3, fp
    339e:	431a      	orrs	r2, r3
    33a0:	0312      	lsls	r2, r2, #12
    33a2:	0b12      	lsrs	r2, r2, #12
    33a4:	4c40      	ldr	r4, [pc, #256]	; (34a8 <__aeabi_dmul+0x4fc>)
    33a6:	e668      	b.n	307a <__aeabi_dmul+0xce>
    33a8:	0003      	movs	r3, r0
    33aa:	4654      	mov	r4, sl
    33ac:	3b28      	subs	r3, #40	; 0x28
    33ae:	409c      	lsls	r4, r3
    33b0:	2300      	movs	r3, #0
    33b2:	e6b9      	b.n	3128 <__aeabi_dmul+0x17c>
    33b4:	f000 fc06 	bl	3bc4 <__clzsi2>
    33b8:	3020      	adds	r0, #32
    33ba:	e6a6      	b.n	310a <__aeabi_dmul+0x15e>
    33bc:	0003      	movs	r3, r0
    33be:	3b28      	subs	r3, #40	; 0x28
    33c0:	409f      	lsls	r7, r3
    33c2:	2300      	movs	r3, #0
    33c4:	46bb      	mov	fp, r7
    33c6:	4699      	mov	r9, r3
    33c8:	e68a      	b.n	30e0 <__aeabi_dmul+0x134>
    33ca:	f000 fbfb 	bl	3bc4 <__clzsi2>
    33ce:	3020      	adds	r0, #32
    33d0:	e674      	b.n	30bc <__aeabi_dmul+0x110>
    33d2:	46b4      	mov	ip, r6
    33d4:	e7ad      	b.n	3332 <__aeabi_dmul+0x386>
    33d6:	2501      	movs	r5, #1
    33d8:	1a2a      	subs	r2, r5, r0
    33da:	2a38      	cmp	r2, #56	; 0x38
    33dc:	dd06      	ble.n	33ec <__aeabi_dmul+0x440>
    33de:	9b01      	ldr	r3, [sp, #4]
    33e0:	2400      	movs	r4, #0
    33e2:	401d      	ands	r5, r3
    33e4:	2300      	movs	r3, #0
    33e6:	2200      	movs	r2, #0
    33e8:	4699      	mov	r9, r3
    33ea:	e646      	b.n	307a <__aeabi_dmul+0xce>
    33ec:	2a1f      	cmp	r2, #31
    33ee:	dc21      	bgt.n	3434 <__aeabi_dmul+0x488>
    33f0:	2520      	movs	r5, #32
    33f2:	0020      	movs	r0, r4
    33f4:	1aad      	subs	r5, r5, r2
    33f6:	001e      	movs	r6, r3
    33f8:	40ab      	lsls	r3, r5
    33fa:	40a8      	lsls	r0, r5
    33fc:	40d6      	lsrs	r6, r2
    33fe:	1e5d      	subs	r5, r3, #1
    3400:	41ab      	sbcs	r3, r5
    3402:	4330      	orrs	r0, r6
    3404:	4318      	orrs	r0, r3
    3406:	40d4      	lsrs	r4, r2
    3408:	0743      	lsls	r3, r0, #29
    340a:	d009      	beq.n	3420 <__aeabi_dmul+0x474>
    340c:	230f      	movs	r3, #15
    340e:	4003      	ands	r3, r0
    3410:	2b04      	cmp	r3, #4
    3412:	d005      	beq.n	3420 <__aeabi_dmul+0x474>
    3414:	0003      	movs	r3, r0
    3416:	1d18      	adds	r0, r3, #4
    3418:	4298      	cmp	r0, r3
    341a:	419b      	sbcs	r3, r3
    341c:	425b      	negs	r3, r3
    341e:	18e4      	adds	r4, r4, r3
    3420:	0223      	lsls	r3, r4, #8
    3422:	d521      	bpl.n	3468 <__aeabi_dmul+0x4bc>
    3424:	2501      	movs	r5, #1
    3426:	9b01      	ldr	r3, [sp, #4]
    3428:	2401      	movs	r4, #1
    342a:	401d      	ands	r5, r3
    342c:	2300      	movs	r3, #0
    342e:	2200      	movs	r2, #0
    3430:	4699      	mov	r9, r3
    3432:	e622      	b.n	307a <__aeabi_dmul+0xce>
    3434:	251f      	movs	r5, #31
    3436:	0021      	movs	r1, r4
    3438:	426d      	negs	r5, r5
    343a:	1a28      	subs	r0, r5, r0
    343c:	40c1      	lsrs	r1, r0
    343e:	0008      	movs	r0, r1
    3440:	2a20      	cmp	r2, #32
    3442:	d01d      	beq.n	3480 <__aeabi_dmul+0x4d4>
    3444:	355f      	adds	r5, #95	; 0x5f
    3446:	1aaa      	subs	r2, r5, r2
    3448:	4094      	lsls	r4, r2
    344a:	4323      	orrs	r3, r4
    344c:	1e5c      	subs	r4, r3, #1
    344e:	41a3      	sbcs	r3, r4
    3450:	2507      	movs	r5, #7
    3452:	4303      	orrs	r3, r0
    3454:	401d      	ands	r5, r3
    3456:	2200      	movs	r2, #0
    3458:	2d00      	cmp	r5, #0
    345a:	d009      	beq.n	3470 <__aeabi_dmul+0x4c4>
    345c:	220f      	movs	r2, #15
    345e:	2400      	movs	r4, #0
    3460:	401a      	ands	r2, r3
    3462:	0018      	movs	r0, r3
    3464:	2a04      	cmp	r2, #4
    3466:	d1d6      	bne.n	3416 <__aeabi_dmul+0x46a>
    3468:	0003      	movs	r3, r0
    346a:	0765      	lsls	r5, r4, #29
    346c:	0264      	lsls	r4, r4, #9
    346e:	0b22      	lsrs	r2, r4, #12
    3470:	08db      	lsrs	r3, r3, #3
    3472:	432b      	orrs	r3, r5
    3474:	2501      	movs	r5, #1
    3476:	4699      	mov	r9, r3
    3478:	9b01      	ldr	r3, [sp, #4]
    347a:	2400      	movs	r4, #0
    347c:	401d      	ands	r5, r3
    347e:	e5fc      	b.n	307a <__aeabi_dmul+0xce>
    3480:	2400      	movs	r4, #0
    3482:	e7e2      	b.n	344a <__aeabi_dmul+0x49e>
    3484:	2280      	movs	r2, #128	; 0x80
    3486:	2501      	movs	r5, #1
    3488:	0312      	lsls	r2, r2, #12
    348a:	4322      	orrs	r2, r4
    348c:	9901      	ldr	r1, [sp, #4]
    348e:	0312      	lsls	r2, r2, #12
    3490:	0b12      	lsrs	r2, r2, #12
    3492:	400d      	ands	r5, r1
    3494:	4699      	mov	r9, r3
    3496:	4c04      	ldr	r4, [pc, #16]	; (34a8 <__aeabi_dmul+0x4fc>)
    3498:	e5ef      	b.n	307a <__aeabi_dmul+0xce>
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	000003ff 	.word	0x000003ff
    34a0:	feffffff 	.word	0xfeffffff
    34a4:	000007fe 	.word	0x000007fe
    34a8:	000007ff 	.word	0x000007ff

000034ac <__aeabi_dsub>:
    34ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ae:	4646      	mov	r6, r8
    34b0:	46d6      	mov	lr, sl
    34b2:	464f      	mov	r7, r9
    34b4:	030c      	lsls	r4, r1, #12
    34b6:	b5c0      	push	{r6, r7, lr}
    34b8:	0fcd      	lsrs	r5, r1, #31
    34ba:	004e      	lsls	r6, r1, #1
    34bc:	0a61      	lsrs	r1, r4, #9
    34be:	0f44      	lsrs	r4, r0, #29
    34c0:	430c      	orrs	r4, r1
    34c2:	00c1      	lsls	r1, r0, #3
    34c4:	0058      	lsls	r0, r3, #1
    34c6:	0d40      	lsrs	r0, r0, #21
    34c8:	4684      	mov	ip, r0
    34ca:	468a      	mov	sl, r1
    34cc:	000f      	movs	r7, r1
    34ce:	0319      	lsls	r1, r3, #12
    34d0:	0f50      	lsrs	r0, r2, #29
    34d2:	0a49      	lsrs	r1, r1, #9
    34d4:	4301      	orrs	r1, r0
    34d6:	48c6      	ldr	r0, [pc, #792]	; (37f0 <__aeabi_dsub+0x344>)
    34d8:	0d76      	lsrs	r6, r6, #21
    34da:	46a8      	mov	r8, r5
    34dc:	0fdb      	lsrs	r3, r3, #31
    34de:	00d2      	lsls	r2, r2, #3
    34e0:	4584      	cmp	ip, r0
    34e2:	d100      	bne.n	34e6 <__aeabi_dsub+0x3a>
    34e4:	e0d8      	b.n	3698 <__aeabi_dsub+0x1ec>
    34e6:	2001      	movs	r0, #1
    34e8:	4043      	eors	r3, r0
    34ea:	42ab      	cmp	r3, r5
    34ec:	d100      	bne.n	34f0 <__aeabi_dsub+0x44>
    34ee:	e0a6      	b.n	363e <__aeabi_dsub+0x192>
    34f0:	4660      	mov	r0, ip
    34f2:	1a35      	subs	r5, r6, r0
    34f4:	2d00      	cmp	r5, #0
    34f6:	dc00      	bgt.n	34fa <__aeabi_dsub+0x4e>
    34f8:	e105      	b.n	3706 <__aeabi_dsub+0x25a>
    34fa:	2800      	cmp	r0, #0
    34fc:	d110      	bne.n	3520 <__aeabi_dsub+0x74>
    34fe:	000b      	movs	r3, r1
    3500:	4313      	orrs	r3, r2
    3502:	d100      	bne.n	3506 <__aeabi_dsub+0x5a>
    3504:	e0d7      	b.n	36b6 <__aeabi_dsub+0x20a>
    3506:	1e6b      	subs	r3, r5, #1
    3508:	2b00      	cmp	r3, #0
    350a:	d000      	beq.n	350e <__aeabi_dsub+0x62>
    350c:	e14b      	b.n	37a6 <__aeabi_dsub+0x2fa>
    350e:	4653      	mov	r3, sl
    3510:	1a9f      	subs	r7, r3, r2
    3512:	45ba      	cmp	sl, r7
    3514:	4180      	sbcs	r0, r0
    3516:	1a64      	subs	r4, r4, r1
    3518:	4240      	negs	r0, r0
    351a:	1a24      	subs	r4, r4, r0
    351c:	2601      	movs	r6, #1
    351e:	e01e      	b.n	355e <__aeabi_dsub+0xb2>
    3520:	4bb3      	ldr	r3, [pc, #716]	; (37f0 <__aeabi_dsub+0x344>)
    3522:	429e      	cmp	r6, r3
    3524:	d048      	beq.n	35b8 <__aeabi_dsub+0x10c>
    3526:	2380      	movs	r3, #128	; 0x80
    3528:	041b      	lsls	r3, r3, #16
    352a:	4319      	orrs	r1, r3
    352c:	2d38      	cmp	r5, #56	; 0x38
    352e:	dd00      	ble.n	3532 <__aeabi_dsub+0x86>
    3530:	e119      	b.n	3766 <__aeabi_dsub+0x2ba>
    3532:	2d1f      	cmp	r5, #31
    3534:	dd00      	ble.n	3538 <__aeabi_dsub+0x8c>
    3536:	e14c      	b.n	37d2 <__aeabi_dsub+0x326>
    3538:	2320      	movs	r3, #32
    353a:	000f      	movs	r7, r1
    353c:	1b5b      	subs	r3, r3, r5
    353e:	0010      	movs	r0, r2
    3540:	409a      	lsls	r2, r3
    3542:	409f      	lsls	r7, r3
    3544:	40e8      	lsrs	r0, r5
    3546:	1e53      	subs	r3, r2, #1
    3548:	419a      	sbcs	r2, r3
    354a:	40e9      	lsrs	r1, r5
    354c:	4307      	orrs	r7, r0
    354e:	4317      	orrs	r7, r2
    3550:	4653      	mov	r3, sl
    3552:	1bdf      	subs	r7, r3, r7
    3554:	1a61      	subs	r1, r4, r1
    3556:	45ba      	cmp	sl, r7
    3558:	41a4      	sbcs	r4, r4
    355a:	4264      	negs	r4, r4
    355c:	1b0c      	subs	r4, r1, r4
    355e:	0223      	lsls	r3, r4, #8
    3560:	d400      	bmi.n	3564 <__aeabi_dsub+0xb8>
    3562:	e0c5      	b.n	36f0 <__aeabi_dsub+0x244>
    3564:	0264      	lsls	r4, r4, #9
    3566:	0a65      	lsrs	r5, r4, #9
    3568:	2d00      	cmp	r5, #0
    356a:	d100      	bne.n	356e <__aeabi_dsub+0xc2>
    356c:	e0f6      	b.n	375c <__aeabi_dsub+0x2b0>
    356e:	0028      	movs	r0, r5
    3570:	f000 fb28 	bl	3bc4 <__clzsi2>
    3574:	0003      	movs	r3, r0
    3576:	3b08      	subs	r3, #8
    3578:	2b1f      	cmp	r3, #31
    357a:	dd00      	ble.n	357e <__aeabi_dsub+0xd2>
    357c:	e0e9      	b.n	3752 <__aeabi_dsub+0x2a6>
    357e:	2220      	movs	r2, #32
    3580:	003c      	movs	r4, r7
    3582:	1ad2      	subs	r2, r2, r3
    3584:	409d      	lsls	r5, r3
    3586:	40d4      	lsrs	r4, r2
    3588:	409f      	lsls	r7, r3
    358a:	4325      	orrs	r5, r4
    358c:	429e      	cmp	r6, r3
    358e:	dd00      	ble.n	3592 <__aeabi_dsub+0xe6>
    3590:	e0db      	b.n	374a <__aeabi_dsub+0x29e>
    3592:	1b9e      	subs	r6, r3, r6
    3594:	1c73      	adds	r3, r6, #1
    3596:	2b1f      	cmp	r3, #31
    3598:	dd00      	ble.n	359c <__aeabi_dsub+0xf0>
    359a:	e10a      	b.n	37b2 <__aeabi_dsub+0x306>
    359c:	2220      	movs	r2, #32
    359e:	0038      	movs	r0, r7
    35a0:	1ad2      	subs	r2, r2, r3
    35a2:	0029      	movs	r1, r5
    35a4:	4097      	lsls	r7, r2
    35a6:	002c      	movs	r4, r5
    35a8:	4091      	lsls	r1, r2
    35aa:	40d8      	lsrs	r0, r3
    35ac:	1e7a      	subs	r2, r7, #1
    35ae:	4197      	sbcs	r7, r2
    35b0:	40dc      	lsrs	r4, r3
    35b2:	2600      	movs	r6, #0
    35b4:	4301      	orrs	r1, r0
    35b6:	430f      	orrs	r7, r1
    35b8:	077b      	lsls	r3, r7, #29
    35ba:	d009      	beq.n	35d0 <__aeabi_dsub+0x124>
    35bc:	230f      	movs	r3, #15
    35be:	403b      	ands	r3, r7
    35c0:	2b04      	cmp	r3, #4
    35c2:	d005      	beq.n	35d0 <__aeabi_dsub+0x124>
    35c4:	1d3b      	adds	r3, r7, #4
    35c6:	42bb      	cmp	r3, r7
    35c8:	41bf      	sbcs	r7, r7
    35ca:	427f      	negs	r7, r7
    35cc:	19e4      	adds	r4, r4, r7
    35ce:	001f      	movs	r7, r3
    35d0:	0223      	lsls	r3, r4, #8
    35d2:	d525      	bpl.n	3620 <__aeabi_dsub+0x174>
    35d4:	4b86      	ldr	r3, [pc, #536]	; (37f0 <__aeabi_dsub+0x344>)
    35d6:	3601      	adds	r6, #1
    35d8:	429e      	cmp	r6, r3
    35da:	d100      	bne.n	35de <__aeabi_dsub+0x132>
    35dc:	e0af      	b.n	373e <__aeabi_dsub+0x292>
    35de:	4b85      	ldr	r3, [pc, #532]	; (37f4 <__aeabi_dsub+0x348>)
    35e0:	2501      	movs	r5, #1
    35e2:	401c      	ands	r4, r3
    35e4:	4643      	mov	r3, r8
    35e6:	0762      	lsls	r2, r4, #29
    35e8:	08ff      	lsrs	r7, r7, #3
    35ea:	0264      	lsls	r4, r4, #9
    35ec:	0576      	lsls	r6, r6, #21
    35ee:	4317      	orrs	r7, r2
    35f0:	0b24      	lsrs	r4, r4, #12
    35f2:	0d76      	lsrs	r6, r6, #21
    35f4:	401d      	ands	r5, r3
    35f6:	2100      	movs	r1, #0
    35f8:	0324      	lsls	r4, r4, #12
    35fa:	0b23      	lsrs	r3, r4, #12
    35fc:	0d0c      	lsrs	r4, r1, #20
    35fe:	4a7e      	ldr	r2, [pc, #504]	; (37f8 <__aeabi_dsub+0x34c>)
    3600:	0524      	lsls	r4, r4, #20
    3602:	431c      	orrs	r4, r3
    3604:	4014      	ands	r4, r2
    3606:	0533      	lsls	r3, r6, #20
    3608:	4323      	orrs	r3, r4
    360a:	005b      	lsls	r3, r3, #1
    360c:	07ed      	lsls	r5, r5, #31
    360e:	085b      	lsrs	r3, r3, #1
    3610:	432b      	orrs	r3, r5
    3612:	0038      	movs	r0, r7
    3614:	0019      	movs	r1, r3
    3616:	bc1c      	pop	{r2, r3, r4}
    3618:	4690      	mov	r8, r2
    361a:	4699      	mov	r9, r3
    361c:	46a2      	mov	sl, r4
    361e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3620:	2501      	movs	r5, #1
    3622:	4643      	mov	r3, r8
    3624:	0762      	lsls	r2, r4, #29
    3626:	08ff      	lsrs	r7, r7, #3
    3628:	4317      	orrs	r7, r2
    362a:	08e4      	lsrs	r4, r4, #3
    362c:	401d      	ands	r5, r3
    362e:	4b70      	ldr	r3, [pc, #448]	; (37f0 <__aeabi_dsub+0x344>)
    3630:	429e      	cmp	r6, r3
    3632:	d036      	beq.n	36a2 <__aeabi_dsub+0x1f6>
    3634:	0324      	lsls	r4, r4, #12
    3636:	0576      	lsls	r6, r6, #21
    3638:	0b24      	lsrs	r4, r4, #12
    363a:	0d76      	lsrs	r6, r6, #21
    363c:	e7db      	b.n	35f6 <__aeabi_dsub+0x14a>
    363e:	4663      	mov	r3, ip
    3640:	1af3      	subs	r3, r6, r3
    3642:	2b00      	cmp	r3, #0
    3644:	dc00      	bgt.n	3648 <__aeabi_dsub+0x19c>
    3646:	e094      	b.n	3772 <__aeabi_dsub+0x2c6>
    3648:	4660      	mov	r0, ip
    364a:	2800      	cmp	r0, #0
    364c:	d035      	beq.n	36ba <__aeabi_dsub+0x20e>
    364e:	4868      	ldr	r0, [pc, #416]	; (37f0 <__aeabi_dsub+0x344>)
    3650:	4286      	cmp	r6, r0
    3652:	d0b1      	beq.n	35b8 <__aeabi_dsub+0x10c>
    3654:	2780      	movs	r7, #128	; 0x80
    3656:	043f      	lsls	r7, r7, #16
    3658:	4339      	orrs	r1, r7
    365a:	2b38      	cmp	r3, #56	; 0x38
    365c:	dc00      	bgt.n	3660 <__aeabi_dsub+0x1b4>
    365e:	e0fd      	b.n	385c <__aeabi_dsub+0x3b0>
    3660:	430a      	orrs	r2, r1
    3662:	0017      	movs	r7, r2
    3664:	2100      	movs	r1, #0
    3666:	1e7a      	subs	r2, r7, #1
    3668:	4197      	sbcs	r7, r2
    366a:	4457      	add	r7, sl
    366c:	4557      	cmp	r7, sl
    366e:	4180      	sbcs	r0, r0
    3670:	1909      	adds	r1, r1, r4
    3672:	4244      	negs	r4, r0
    3674:	190c      	adds	r4, r1, r4
    3676:	0223      	lsls	r3, r4, #8
    3678:	d53a      	bpl.n	36f0 <__aeabi_dsub+0x244>
    367a:	4b5d      	ldr	r3, [pc, #372]	; (37f0 <__aeabi_dsub+0x344>)
    367c:	3601      	adds	r6, #1
    367e:	429e      	cmp	r6, r3
    3680:	d100      	bne.n	3684 <__aeabi_dsub+0x1d8>
    3682:	e14b      	b.n	391c <__aeabi_dsub+0x470>
    3684:	2201      	movs	r2, #1
    3686:	4b5b      	ldr	r3, [pc, #364]	; (37f4 <__aeabi_dsub+0x348>)
    3688:	401c      	ands	r4, r3
    368a:	087b      	lsrs	r3, r7, #1
    368c:	4017      	ands	r7, r2
    368e:	431f      	orrs	r7, r3
    3690:	07e2      	lsls	r2, r4, #31
    3692:	4317      	orrs	r7, r2
    3694:	0864      	lsrs	r4, r4, #1
    3696:	e78f      	b.n	35b8 <__aeabi_dsub+0x10c>
    3698:	0008      	movs	r0, r1
    369a:	4310      	orrs	r0, r2
    369c:	d000      	beq.n	36a0 <__aeabi_dsub+0x1f4>
    369e:	e724      	b.n	34ea <__aeabi_dsub+0x3e>
    36a0:	e721      	b.n	34e6 <__aeabi_dsub+0x3a>
    36a2:	0023      	movs	r3, r4
    36a4:	433b      	orrs	r3, r7
    36a6:	d100      	bne.n	36aa <__aeabi_dsub+0x1fe>
    36a8:	e1b9      	b.n	3a1e <__aeabi_dsub+0x572>
    36aa:	2280      	movs	r2, #128	; 0x80
    36ac:	0312      	lsls	r2, r2, #12
    36ae:	4314      	orrs	r4, r2
    36b0:	0324      	lsls	r4, r4, #12
    36b2:	0b24      	lsrs	r4, r4, #12
    36b4:	e79f      	b.n	35f6 <__aeabi_dsub+0x14a>
    36b6:	002e      	movs	r6, r5
    36b8:	e77e      	b.n	35b8 <__aeabi_dsub+0x10c>
    36ba:	0008      	movs	r0, r1
    36bc:	4310      	orrs	r0, r2
    36be:	d100      	bne.n	36c2 <__aeabi_dsub+0x216>
    36c0:	e0ca      	b.n	3858 <__aeabi_dsub+0x3ac>
    36c2:	1e58      	subs	r0, r3, #1
    36c4:	4684      	mov	ip, r0
    36c6:	2800      	cmp	r0, #0
    36c8:	d000      	beq.n	36cc <__aeabi_dsub+0x220>
    36ca:	e0e7      	b.n	389c <__aeabi_dsub+0x3f0>
    36cc:	4452      	add	r2, sl
    36ce:	4552      	cmp	r2, sl
    36d0:	4180      	sbcs	r0, r0
    36d2:	1864      	adds	r4, r4, r1
    36d4:	4240      	negs	r0, r0
    36d6:	1824      	adds	r4, r4, r0
    36d8:	0017      	movs	r7, r2
    36da:	2601      	movs	r6, #1
    36dc:	0223      	lsls	r3, r4, #8
    36de:	d507      	bpl.n	36f0 <__aeabi_dsub+0x244>
    36e0:	2602      	movs	r6, #2
    36e2:	e7cf      	b.n	3684 <__aeabi_dsub+0x1d8>
    36e4:	4664      	mov	r4, ip
    36e6:	432c      	orrs	r4, r5
    36e8:	d100      	bne.n	36ec <__aeabi_dsub+0x240>
    36ea:	e1b3      	b.n	3a54 <__aeabi_dsub+0x5a8>
    36ec:	002c      	movs	r4, r5
    36ee:	4667      	mov	r7, ip
    36f0:	077b      	lsls	r3, r7, #29
    36f2:	d000      	beq.n	36f6 <__aeabi_dsub+0x24a>
    36f4:	e762      	b.n	35bc <__aeabi_dsub+0x110>
    36f6:	0763      	lsls	r3, r4, #29
    36f8:	08ff      	lsrs	r7, r7, #3
    36fa:	431f      	orrs	r7, r3
    36fc:	2501      	movs	r5, #1
    36fe:	4643      	mov	r3, r8
    3700:	08e4      	lsrs	r4, r4, #3
    3702:	401d      	ands	r5, r3
    3704:	e793      	b.n	362e <__aeabi_dsub+0x182>
    3706:	2d00      	cmp	r5, #0
    3708:	d178      	bne.n	37fc <__aeabi_dsub+0x350>
    370a:	1c75      	adds	r5, r6, #1
    370c:	056d      	lsls	r5, r5, #21
    370e:	0d6d      	lsrs	r5, r5, #21
    3710:	2d01      	cmp	r5, #1
    3712:	dc00      	bgt.n	3716 <__aeabi_dsub+0x26a>
    3714:	e0f2      	b.n	38fc <__aeabi_dsub+0x450>
    3716:	4650      	mov	r0, sl
    3718:	1a80      	subs	r0, r0, r2
    371a:	4582      	cmp	sl, r0
    371c:	41bf      	sbcs	r7, r7
    371e:	1a65      	subs	r5, r4, r1
    3720:	427f      	negs	r7, r7
    3722:	1bed      	subs	r5, r5, r7
    3724:	4684      	mov	ip, r0
    3726:	0228      	lsls	r0, r5, #8
    3728:	d400      	bmi.n	372c <__aeabi_dsub+0x280>
    372a:	e08c      	b.n	3846 <__aeabi_dsub+0x39a>
    372c:	4650      	mov	r0, sl
    372e:	1a17      	subs	r7, r2, r0
    3730:	42ba      	cmp	r2, r7
    3732:	4192      	sbcs	r2, r2
    3734:	1b0c      	subs	r4, r1, r4
    3736:	4255      	negs	r5, r2
    3738:	1b65      	subs	r5, r4, r5
    373a:	4698      	mov	r8, r3
    373c:	e714      	b.n	3568 <__aeabi_dsub+0xbc>
    373e:	2501      	movs	r5, #1
    3740:	4643      	mov	r3, r8
    3742:	2400      	movs	r4, #0
    3744:	401d      	ands	r5, r3
    3746:	2700      	movs	r7, #0
    3748:	e755      	b.n	35f6 <__aeabi_dsub+0x14a>
    374a:	4c2a      	ldr	r4, [pc, #168]	; (37f4 <__aeabi_dsub+0x348>)
    374c:	1af6      	subs	r6, r6, r3
    374e:	402c      	ands	r4, r5
    3750:	e732      	b.n	35b8 <__aeabi_dsub+0x10c>
    3752:	003d      	movs	r5, r7
    3754:	3828      	subs	r0, #40	; 0x28
    3756:	4085      	lsls	r5, r0
    3758:	2700      	movs	r7, #0
    375a:	e717      	b.n	358c <__aeabi_dsub+0xe0>
    375c:	0038      	movs	r0, r7
    375e:	f000 fa31 	bl	3bc4 <__clzsi2>
    3762:	3020      	adds	r0, #32
    3764:	e706      	b.n	3574 <__aeabi_dsub+0xc8>
    3766:	430a      	orrs	r2, r1
    3768:	0017      	movs	r7, r2
    376a:	2100      	movs	r1, #0
    376c:	1e7a      	subs	r2, r7, #1
    376e:	4197      	sbcs	r7, r2
    3770:	e6ee      	b.n	3550 <__aeabi_dsub+0xa4>
    3772:	2b00      	cmp	r3, #0
    3774:	d000      	beq.n	3778 <__aeabi_dsub+0x2cc>
    3776:	e0e5      	b.n	3944 <__aeabi_dsub+0x498>
    3778:	1c73      	adds	r3, r6, #1
    377a:	469c      	mov	ip, r3
    377c:	055b      	lsls	r3, r3, #21
    377e:	0d5b      	lsrs	r3, r3, #21
    3780:	2b01      	cmp	r3, #1
    3782:	dc00      	bgt.n	3786 <__aeabi_dsub+0x2da>
    3784:	e09f      	b.n	38c6 <__aeabi_dsub+0x41a>
    3786:	4b1a      	ldr	r3, [pc, #104]	; (37f0 <__aeabi_dsub+0x344>)
    3788:	459c      	cmp	ip, r3
    378a:	d100      	bne.n	378e <__aeabi_dsub+0x2e2>
    378c:	e0c5      	b.n	391a <__aeabi_dsub+0x46e>
    378e:	4452      	add	r2, sl
    3790:	4552      	cmp	r2, sl
    3792:	4180      	sbcs	r0, r0
    3794:	1864      	adds	r4, r4, r1
    3796:	4240      	negs	r0, r0
    3798:	1824      	adds	r4, r4, r0
    379a:	07e7      	lsls	r7, r4, #31
    379c:	0852      	lsrs	r2, r2, #1
    379e:	4317      	orrs	r7, r2
    37a0:	0864      	lsrs	r4, r4, #1
    37a2:	4666      	mov	r6, ip
    37a4:	e708      	b.n	35b8 <__aeabi_dsub+0x10c>
    37a6:	4812      	ldr	r0, [pc, #72]	; (37f0 <__aeabi_dsub+0x344>)
    37a8:	4285      	cmp	r5, r0
    37aa:	d100      	bne.n	37ae <__aeabi_dsub+0x302>
    37ac:	e085      	b.n	38ba <__aeabi_dsub+0x40e>
    37ae:	001d      	movs	r5, r3
    37b0:	e6bc      	b.n	352c <__aeabi_dsub+0x80>
    37b2:	0029      	movs	r1, r5
    37b4:	3e1f      	subs	r6, #31
    37b6:	40f1      	lsrs	r1, r6
    37b8:	2b20      	cmp	r3, #32
    37ba:	d100      	bne.n	37be <__aeabi_dsub+0x312>
    37bc:	e07f      	b.n	38be <__aeabi_dsub+0x412>
    37be:	2240      	movs	r2, #64	; 0x40
    37c0:	1ad3      	subs	r3, r2, r3
    37c2:	409d      	lsls	r5, r3
    37c4:	432f      	orrs	r7, r5
    37c6:	1e7d      	subs	r5, r7, #1
    37c8:	41af      	sbcs	r7, r5
    37ca:	2400      	movs	r4, #0
    37cc:	430f      	orrs	r7, r1
    37ce:	2600      	movs	r6, #0
    37d0:	e78e      	b.n	36f0 <__aeabi_dsub+0x244>
    37d2:	002b      	movs	r3, r5
    37d4:	000f      	movs	r7, r1
    37d6:	3b20      	subs	r3, #32
    37d8:	40df      	lsrs	r7, r3
    37da:	2d20      	cmp	r5, #32
    37dc:	d071      	beq.n	38c2 <__aeabi_dsub+0x416>
    37de:	2340      	movs	r3, #64	; 0x40
    37e0:	1b5d      	subs	r5, r3, r5
    37e2:	40a9      	lsls	r1, r5
    37e4:	430a      	orrs	r2, r1
    37e6:	1e51      	subs	r1, r2, #1
    37e8:	418a      	sbcs	r2, r1
    37ea:	2100      	movs	r1, #0
    37ec:	4317      	orrs	r7, r2
    37ee:	e6af      	b.n	3550 <__aeabi_dsub+0xa4>
    37f0:	000007ff 	.word	0x000007ff
    37f4:	ff7fffff 	.word	0xff7fffff
    37f8:	800fffff 	.word	0x800fffff
    37fc:	2e00      	cmp	r6, #0
    37fe:	d03e      	beq.n	387e <__aeabi_dsub+0x3d2>
    3800:	4eb3      	ldr	r6, [pc, #716]	; (3ad0 <__aeabi_dsub+0x624>)
    3802:	45b4      	cmp	ip, r6
    3804:	d045      	beq.n	3892 <__aeabi_dsub+0x3e6>
    3806:	2680      	movs	r6, #128	; 0x80
    3808:	0436      	lsls	r6, r6, #16
    380a:	426d      	negs	r5, r5
    380c:	4334      	orrs	r4, r6
    380e:	2d38      	cmp	r5, #56	; 0x38
    3810:	dd00      	ble.n	3814 <__aeabi_dsub+0x368>
    3812:	e0a8      	b.n	3966 <__aeabi_dsub+0x4ba>
    3814:	2d1f      	cmp	r5, #31
    3816:	dd00      	ble.n	381a <__aeabi_dsub+0x36e>
    3818:	e11f      	b.n	3a5a <__aeabi_dsub+0x5ae>
    381a:	2620      	movs	r6, #32
    381c:	0027      	movs	r7, r4
    381e:	4650      	mov	r0, sl
    3820:	1b76      	subs	r6, r6, r5
    3822:	40b7      	lsls	r7, r6
    3824:	40e8      	lsrs	r0, r5
    3826:	4307      	orrs	r7, r0
    3828:	4650      	mov	r0, sl
    382a:	40b0      	lsls	r0, r6
    382c:	1e46      	subs	r6, r0, #1
    382e:	41b0      	sbcs	r0, r6
    3830:	40ec      	lsrs	r4, r5
    3832:	4338      	orrs	r0, r7
    3834:	1a17      	subs	r7, r2, r0
    3836:	42ba      	cmp	r2, r7
    3838:	4192      	sbcs	r2, r2
    383a:	1b0c      	subs	r4, r1, r4
    383c:	4252      	negs	r2, r2
    383e:	1aa4      	subs	r4, r4, r2
    3840:	4666      	mov	r6, ip
    3842:	4698      	mov	r8, r3
    3844:	e68b      	b.n	355e <__aeabi_dsub+0xb2>
    3846:	4664      	mov	r4, ip
    3848:	4667      	mov	r7, ip
    384a:	432c      	orrs	r4, r5
    384c:	d000      	beq.n	3850 <__aeabi_dsub+0x3a4>
    384e:	e68b      	b.n	3568 <__aeabi_dsub+0xbc>
    3850:	2500      	movs	r5, #0
    3852:	2600      	movs	r6, #0
    3854:	2700      	movs	r7, #0
    3856:	e6ea      	b.n	362e <__aeabi_dsub+0x182>
    3858:	001e      	movs	r6, r3
    385a:	e6ad      	b.n	35b8 <__aeabi_dsub+0x10c>
    385c:	2b1f      	cmp	r3, #31
    385e:	dc60      	bgt.n	3922 <__aeabi_dsub+0x476>
    3860:	2720      	movs	r7, #32
    3862:	1af8      	subs	r0, r7, r3
    3864:	000f      	movs	r7, r1
    3866:	4684      	mov	ip, r0
    3868:	4087      	lsls	r7, r0
    386a:	0010      	movs	r0, r2
    386c:	40d8      	lsrs	r0, r3
    386e:	4307      	orrs	r7, r0
    3870:	4660      	mov	r0, ip
    3872:	4082      	lsls	r2, r0
    3874:	1e50      	subs	r0, r2, #1
    3876:	4182      	sbcs	r2, r0
    3878:	40d9      	lsrs	r1, r3
    387a:	4317      	orrs	r7, r2
    387c:	e6f5      	b.n	366a <__aeabi_dsub+0x1be>
    387e:	0026      	movs	r6, r4
    3880:	4650      	mov	r0, sl
    3882:	4306      	orrs	r6, r0
    3884:	d005      	beq.n	3892 <__aeabi_dsub+0x3e6>
    3886:	43ed      	mvns	r5, r5
    3888:	2d00      	cmp	r5, #0
    388a:	d0d3      	beq.n	3834 <__aeabi_dsub+0x388>
    388c:	4e90      	ldr	r6, [pc, #576]	; (3ad0 <__aeabi_dsub+0x624>)
    388e:	45b4      	cmp	ip, r6
    3890:	d1bd      	bne.n	380e <__aeabi_dsub+0x362>
    3892:	000c      	movs	r4, r1
    3894:	0017      	movs	r7, r2
    3896:	4666      	mov	r6, ip
    3898:	4698      	mov	r8, r3
    389a:	e68d      	b.n	35b8 <__aeabi_dsub+0x10c>
    389c:	488c      	ldr	r0, [pc, #560]	; (3ad0 <__aeabi_dsub+0x624>)
    389e:	4283      	cmp	r3, r0
    38a0:	d00b      	beq.n	38ba <__aeabi_dsub+0x40e>
    38a2:	4663      	mov	r3, ip
    38a4:	e6d9      	b.n	365a <__aeabi_dsub+0x1ae>
    38a6:	2d00      	cmp	r5, #0
    38a8:	d000      	beq.n	38ac <__aeabi_dsub+0x400>
    38aa:	e096      	b.n	39da <__aeabi_dsub+0x52e>
    38ac:	0008      	movs	r0, r1
    38ae:	4310      	orrs	r0, r2
    38b0:	d100      	bne.n	38b4 <__aeabi_dsub+0x408>
    38b2:	e0e2      	b.n	3a7a <__aeabi_dsub+0x5ce>
    38b4:	000c      	movs	r4, r1
    38b6:	0017      	movs	r7, r2
    38b8:	4698      	mov	r8, r3
    38ba:	4e85      	ldr	r6, [pc, #532]	; (3ad0 <__aeabi_dsub+0x624>)
    38bc:	e67c      	b.n	35b8 <__aeabi_dsub+0x10c>
    38be:	2500      	movs	r5, #0
    38c0:	e780      	b.n	37c4 <__aeabi_dsub+0x318>
    38c2:	2100      	movs	r1, #0
    38c4:	e78e      	b.n	37e4 <__aeabi_dsub+0x338>
    38c6:	0023      	movs	r3, r4
    38c8:	4650      	mov	r0, sl
    38ca:	4303      	orrs	r3, r0
    38cc:	2e00      	cmp	r6, #0
    38ce:	d000      	beq.n	38d2 <__aeabi_dsub+0x426>
    38d0:	e0a8      	b.n	3a24 <__aeabi_dsub+0x578>
    38d2:	2b00      	cmp	r3, #0
    38d4:	d100      	bne.n	38d8 <__aeabi_dsub+0x42c>
    38d6:	e0de      	b.n	3a96 <__aeabi_dsub+0x5ea>
    38d8:	000b      	movs	r3, r1
    38da:	4313      	orrs	r3, r2
    38dc:	d100      	bne.n	38e0 <__aeabi_dsub+0x434>
    38de:	e66b      	b.n	35b8 <__aeabi_dsub+0x10c>
    38e0:	4452      	add	r2, sl
    38e2:	4552      	cmp	r2, sl
    38e4:	4180      	sbcs	r0, r0
    38e6:	1864      	adds	r4, r4, r1
    38e8:	4240      	negs	r0, r0
    38ea:	1824      	adds	r4, r4, r0
    38ec:	0017      	movs	r7, r2
    38ee:	0223      	lsls	r3, r4, #8
    38f0:	d400      	bmi.n	38f4 <__aeabi_dsub+0x448>
    38f2:	e6fd      	b.n	36f0 <__aeabi_dsub+0x244>
    38f4:	4b77      	ldr	r3, [pc, #476]	; (3ad4 <__aeabi_dsub+0x628>)
    38f6:	4666      	mov	r6, ip
    38f8:	401c      	ands	r4, r3
    38fa:	e65d      	b.n	35b8 <__aeabi_dsub+0x10c>
    38fc:	0025      	movs	r5, r4
    38fe:	4650      	mov	r0, sl
    3900:	4305      	orrs	r5, r0
    3902:	2e00      	cmp	r6, #0
    3904:	d1cf      	bne.n	38a6 <__aeabi_dsub+0x3fa>
    3906:	2d00      	cmp	r5, #0
    3908:	d14f      	bne.n	39aa <__aeabi_dsub+0x4fe>
    390a:	000c      	movs	r4, r1
    390c:	4314      	orrs	r4, r2
    390e:	d100      	bne.n	3912 <__aeabi_dsub+0x466>
    3910:	e0a0      	b.n	3a54 <__aeabi_dsub+0x5a8>
    3912:	000c      	movs	r4, r1
    3914:	0017      	movs	r7, r2
    3916:	4698      	mov	r8, r3
    3918:	e64e      	b.n	35b8 <__aeabi_dsub+0x10c>
    391a:	4666      	mov	r6, ip
    391c:	2400      	movs	r4, #0
    391e:	2700      	movs	r7, #0
    3920:	e685      	b.n	362e <__aeabi_dsub+0x182>
    3922:	001f      	movs	r7, r3
    3924:	0008      	movs	r0, r1
    3926:	3f20      	subs	r7, #32
    3928:	40f8      	lsrs	r0, r7
    392a:	0007      	movs	r7, r0
    392c:	2b20      	cmp	r3, #32
    392e:	d100      	bne.n	3932 <__aeabi_dsub+0x486>
    3930:	e08e      	b.n	3a50 <__aeabi_dsub+0x5a4>
    3932:	2040      	movs	r0, #64	; 0x40
    3934:	1ac3      	subs	r3, r0, r3
    3936:	4099      	lsls	r1, r3
    3938:	430a      	orrs	r2, r1
    393a:	1e51      	subs	r1, r2, #1
    393c:	418a      	sbcs	r2, r1
    393e:	2100      	movs	r1, #0
    3940:	4317      	orrs	r7, r2
    3942:	e692      	b.n	366a <__aeabi_dsub+0x1be>
    3944:	2e00      	cmp	r6, #0
    3946:	d114      	bne.n	3972 <__aeabi_dsub+0x4c6>
    3948:	0026      	movs	r6, r4
    394a:	4650      	mov	r0, sl
    394c:	4306      	orrs	r6, r0
    394e:	d062      	beq.n	3a16 <__aeabi_dsub+0x56a>
    3950:	43db      	mvns	r3, r3
    3952:	2b00      	cmp	r3, #0
    3954:	d15c      	bne.n	3a10 <__aeabi_dsub+0x564>
    3956:	1887      	adds	r7, r0, r2
    3958:	4297      	cmp	r7, r2
    395a:	4192      	sbcs	r2, r2
    395c:	1864      	adds	r4, r4, r1
    395e:	4252      	negs	r2, r2
    3960:	18a4      	adds	r4, r4, r2
    3962:	4666      	mov	r6, ip
    3964:	e687      	b.n	3676 <__aeabi_dsub+0x1ca>
    3966:	4650      	mov	r0, sl
    3968:	4320      	orrs	r0, r4
    396a:	1e44      	subs	r4, r0, #1
    396c:	41a0      	sbcs	r0, r4
    396e:	2400      	movs	r4, #0
    3970:	e760      	b.n	3834 <__aeabi_dsub+0x388>
    3972:	4e57      	ldr	r6, [pc, #348]	; (3ad0 <__aeabi_dsub+0x624>)
    3974:	45b4      	cmp	ip, r6
    3976:	d04e      	beq.n	3a16 <__aeabi_dsub+0x56a>
    3978:	2680      	movs	r6, #128	; 0x80
    397a:	0436      	lsls	r6, r6, #16
    397c:	425b      	negs	r3, r3
    397e:	4334      	orrs	r4, r6
    3980:	2b38      	cmp	r3, #56	; 0x38
    3982:	dd00      	ble.n	3986 <__aeabi_dsub+0x4da>
    3984:	e07f      	b.n	3a86 <__aeabi_dsub+0x5da>
    3986:	2b1f      	cmp	r3, #31
    3988:	dd00      	ble.n	398c <__aeabi_dsub+0x4e0>
    398a:	e08b      	b.n	3aa4 <__aeabi_dsub+0x5f8>
    398c:	2620      	movs	r6, #32
    398e:	0027      	movs	r7, r4
    3990:	4650      	mov	r0, sl
    3992:	1af6      	subs	r6, r6, r3
    3994:	40b7      	lsls	r7, r6
    3996:	40d8      	lsrs	r0, r3
    3998:	4307      	orrs	r7, r0
    399a:	4650      	mov	r0, sl
    399c:	40b0      	lsls	r0, r6
    399e:	1e46      	subs	r6, r0, #1
    39a0:	41b0      	sbcs	r0, r6
    39a2:	4307      	orrs	r7, r0
    39a4:	40dc      	lsrs	r4, r3
    39a6:	18bf      	adds	r7, r7, r2
    39a8:	e7d6      	b.n	3958 <__aeabi_dsub+0x4ac>
    39aa:	000d      	movs	r5, r1
    39ac:	4315      	orrs	r5, r2
    39ae:	d100      	bne.n	39b2 <__aeabi_dsub+0x506>
    39b0:	e602      	b.n	35b8 <__aeabi_dsub+0x10c>
    39b2:	4650      	mov	r0, sl
    39b4:	1a80      	subs	r0, r0, r2
    39b6:	4582      	cmp	sl, r0
    39b8:	41bf      	sbcs	r7, r7
    39ba:	1a65      	subs	r5, r4, r1
    39bc:	427f      	negs	r7, r7
    39be:	1bed      	subs	r5, r5, r7
    39c0:	4684      	mov	ip, r0
    39c2:	0228      	lsls	r0, r5, #8
    39c4:	d400      	bmi.n	39c8 <__aeabi_dsub+0x51c>
    39c6:	e68d      	b.n	36e4 <__aeabi_dsub+0x238>
    39c8:	4650      	mov	r0, sl
    39ca:	1a17      	subs	r7, r2, r0
    39cc:	42ba      	cmp	r2, r7
    39ce:	4192      	sbcs	r2, r2
    39d0:	1b0c      	subs	r4, r1, r4
    39d2:	4252      	negs	r2, r2
    39d4:	1aa4      	subs	r4, r4, r2
    39d6:	4698      	mov	r8, r3
    39d8:	e5ee      	b.n	35b8 <__aeabi_dsub+0x10c>
    39da:	000d      	movs	r5, r1
    39dc:	4315      	orrs	r5, r2
    39de:	d100      	bne.n	39e2 <__aeabi_dsub+0x536>
    39e0:	e76b      	b.n	38ba <__aeabi_dsub+0x40e>
    39e2:	4650      	mov	r0, sl
    39e4:	0767      	lsls	r7, r4, #29
    39e6:	08c0      	lsrs	r0, r0, #3
    39e8:	4307      	orrs	r7, r0
    39ea:	2080      	movs	r0, #128	; 0x80
    39ec:	08e4      	lsrs	r4, r4, #3
    39ee:	0300      	lsls	r0, r0, #12
    39f0:	4204      	tst	r4, r0
    39f2:	d007      	beq.n	3a04 <__aeabi_dsub+0x558>
    39f4:	08cd      	lsrs	r5, r1, #3
    39f6:	4205      	tst	r5, r0
    39f8:	d104      	bne.n	3a04 <__aeabi_dsub+0x558>
    39fa:	002c      	movs	r4, r5
    39fc:	4698      	mov	r8, r3
    39fe:	08d7      	lsrs	r7, r2, #3
    3a00:	0749      	lsls	r1, r1, #29
    3a02:	430f      	orrs	r7, r1
    3a04:	0f7b      	lsrs	r3, r7, #29
    3a06:	00e4      	lsls	r4, r4, #3
    3a08:	431c      	orrs	r4, r3
    3a0a:	00ff      	lsls	r7, r7, #3
    3a0c:	4e30      	ldr	r6, [pc, #192]	; (3ad0 <__aeabi_dsub+0x624>)
    3a0e:	e5d3      	b.n	35b8 <__aeabi_dsub+0x10c>
    3a10:	4e2f      	ldr	r6, [pc, #188]	; (3ad0 <__aeabi_dsub+0x624>)
    3a12:	45b4      	cmp	ip, r6
    3a14:	d1b4      	bne.n	3980 <__aeabi_dsub+0x4d4>
    3a16:	000c      	movs	r4, r1
    3a18:	0017      	movs	r7, r2
    3a1a:	4666      	mov	r6, ip
    3a1c:	e5cc      	b.n	35b8 <__aeabi_dsub+0x10c>
    3a1e:	2700      	movs	r7, #0
    3a20:	2400      	movs	r4, #0
    3a22:	e5e8      	b.n	35f6 <__aeabi_dsub+0x14a>
    3a24:	2b00      	cmp	r3, #0
    3a26:	d039      	beq.n	3a9c <__aeabi_dsub+0x5f0>
    3a28:	000b      	movs	r3, r1
    3a2a:	4313      	orrs	r3, r2
    3a2c:	d100      	bne.n	3a30 <__aeabi_dsub+0x584>
    3a2e:	e744      	b.n	38ba <__aeabi_dsub+0x40e>
    3a30:	08c0      	lsrs	r0, r0, #3
    3a32:	0767      	lsls	r7, r4, #29
    3a34:	4307      	orrs	r7, r0
    3a36:	2080      	movs	r0, #128	; 0x80
    3a38:	08e4      	lsrs	r4, r4, #3
    3a3a:	0300      	lsls	r0, r0, #12
    3a3c:	4204      	tst	r4, r0
    3a3e:	d0e1      	beq.n	3a04 <__aeabi_dsub+0x558>
    3a40:	08cb      	lsrs	r3, r1, #3
    3a42:	4203      	tst	r3, r0
    3a44:	d1de      	bne.n	3a04 <__aeabi_dsub+0x558>
    3a46:	08d7      	lsrs	r7, r2, #3
    3a48:	0749      	lsls	r1, r1, #29
    3a4a:	430f      	orrs	r7, r1
    3a4c:	001c      	movs	r4, r3
    3a4e:	e7d9      	b.n	3a04 <__aeabi_dsub+0x558>
    3a50:	2100      	movs	r1, #0
    3a52:	e771      	b.n	3938 <__aeabi_dsub+0x48c>
    3a54:	2500      	movs	r5, #0
    3a56:	2700      	movs	r7, #0
    3a58:	e5e9      	b.n	362e <__aeabi_dsub+0x182>
    3a5a:	002e      	movs	r6, r5
    3a5c:	0027      	movs	r7, r4
    3a5e:	3e20      	subs	r6, #32
    3a60:	40f7      	lsrs	r7, r6
    3a62:	2d20      	cmp	r5, #32
    3a64:	d02f      	beq.n	3ac6 <__aeabi_dsub+0x61a>
    3a66:	2640      	movs	r6, #64	; 0x40
    3a68:	1b75      	subs	r5, r6, r5
    3a6a:	40ac      	lsls	r4, r5
    3a6c:	4650      	mov	r0, sl
    3a6e:	4320      	orrs	r0, r4
    3a70:	1e44      	subs	r4, r0, #1
    3a72:	41a0      	sbcs	r0, r4
    3a74:	2400      	movs	r4, #0
    3a76:	4338      	orrs	r0, r7
    3a78:	e6dc      	b.n	3834 <__aeabi_dsub+0x388>
    3a7a:	2480      	movs	r4, #128	; 0x80
    3a7c:	2500      	movs	r5, #0
    3a7e:	0324      	lsls	r4, r4, #12
    3a80:	4e13      	ldr	r6, [pc, #76]	; (3ad0 <__aeabi_dsub+0x624>)
    3a82:	2700      	movs	r7, #0
    3a84:	e5d3      	b.n	362e <__aeabi_dsub+0x182>
    3a86:	4650      	mov	r0, sl
    3a88:	4320      	orrs	r0, r4
    3a8a:	0007      	movs	r7, r0
    3a8c:	1e78      	subs	r0, r7, #1
    3a8e:	4187      	sbcs	r7, r0
    3a90:	2400      	movs	r4, #0
    3a92:	18bf      	adds	r7, r7, r2
    3a94:	e760      	b.n	3958 <__aeabi_dsub+0x4ac>
    3a96:	000c      	movs	r4, r1
    3a98:	0017      	movs	r7, r2
    3a9a:	e58d      	b.n	35b8 <__aeabi_dsub+0x10c>
    3a9c:	000c      	movs	r4, r1
    3a9e:	0017      	movs	r7, r2
    3aa0:	4e0b      	ldr	r6, [pc, #44]	; (3ad0 <__aeabi_dsub+0x624>)
    3aa2:	e589      	b.n	35b8 <__aeabi_dsub+0x10c>
    3aa4:	001e      	movs	r6, r3
    3aa6:	0027      	movs	r7, r4
    3aa8:	3e20      	subs	r6, #32
    3aaa:	40f7      	lsrs	r7, r6
    3aac:	2b20      	cmp	r3, #32
    3aae:	d00c      	beq.n	3aca <__aeabi_dsub+0x61e>
    3ab0:	2640      	movs	r6, #64	; 0x40
    3ab2:	1af3      	subs	r3, r6, r3
    3ab4:	409c      	lsls	r4, r3
    3ab6:	4650      	mov	r0, sl
    3ab8:	4320      	orrs	r0, r4
    3aba:	1e44      	subs	r4, r0, #1
    3abc:	41a0      	sbcs	r0, r4
    3abe:	4307      	orrs	r7, r0
    3ac0:	2400      	movs	r4, #0
    3ac2:	18bf      	adds	r7, r7, r2
    3ac4:	e748      	b.n	3958 <__aeabi_dsub+0x4ac>
    3ac6:	2400      	movs	r4, #0
    3ac8:	e7d0      	b.n	3a6c <__aeabi_dsub+0x5c0>
    3aca:	2400      	movs	r4, #0
    3acc:	e7f3      	b.n	3ab6 <__aeabi_dsub+0x60a>
    3ace:	46c0      	nop			; (mov r8, r8)
    3ad0:	000007ff 	.word	0x000007ff
    3ad4:	ff7fffff 	.word	0xff7fffff

00003ad8 <__aeabi_d2iz>:
    3ad8:	b530      	push	{r4, r5, lr}
    3ada:	4d13      	ldr	r5, [pc, #76]	; (3b28 <__aeabi_d2iz+0x50>)
    3adc:	030a      	lsls	r2, r1, #12
    3ade:	004b      	lsls	r3, r1, #1
    3ae0:	0b12      	lsrs	r2, r2, #12
    3ae2:	0d5b      	lsrs	r3, r3, #21
    3ae4:	0fc9      	lsrs	r1, r1, #31
    3ae6:	2400      	movs	r4, #0
    3ae8:	42ab      	cmp	r3, r5
    3aea:	dd10      	ble.n	3b0e <__aeabi_d2iz+0x36>
    3aec:	4c0f      	ldr	r4, [pc, #60]	; (3b2c <__aeabi_d2iz+0x54>)
    3aee:	42a3      	cmp	r3, r4
    3af0:	dc0f      	bgt.n	3b12 <__aeabi_d2iz+0x3a>
    3af2:	2480      	movs	r4, #128	; 0x80
    3af4:	4d0e      	ldr	r5, [pc, #56]	; (3b30 <__aeabi_d2iz+0x58>)
    3af6:	0364      	lsls	r4, r4, #13
    3af8:	4322      	orrs	r2, r4
    3afa:	1aed      	subs	r5, r5, r3
    3afc:	2d1f      	cmp	r5, #31
    3afe:	dd0b      	ble.n	3b18 <__aeabi_d2iz+0x40>
    3b00:	480c      	ldr	r0, [pc, #48]	; (3b34 <__aeabi_d2iz+0x5c>)
    3b02:	1ac3      	subs	r3, r0, r3
    3b04:	40da      	lsrs	r2, r3
    3b06:	4254      	negs	r4, r2
    3b08:	2900      	cmp	r1, #0
    3b0a:	d100      	bne.n	3b0e <__aeabi_d2iz+0x36>
    3b0c:	0014      	movs	r4, r2
    3b0e:	0020      	movs	r0, r4
    3b10:	bd30      	pop	{r4, r5, pc}
    3b12:	4b09      	ldr	r3, [pc, #36]	; (3b38 <__aeabi_d2iz+0x60>)
    3b14:	18cc      	adds	r4, r1, r3
    3b16:	e7fa      	b.n	3b0e <__aeabi_d2iz+0x36>
    3b18:	4c08      	ldr	r4, [pc, #32]	; (3b3c <__aeabi_d2iz+0x64>)
    3b1a:	40e8      	lsrs	r0, r5
    3b1c:	46a4      	mov	ip, r4
    3b1e:	4463      	add	r3, ip
    3b20:	409a      	lsls	r2, r3
    3b22:	4302      	orrs	r2, r0
    3b24:	e7ef      	b.n	3b06 <__aeabi_d2iz+0x2e>
    3b26:	46c0      	nop			; (mov r8, r8)
    3b28:	000003fe 	.word	0x000003fe
    3b2c:	0000041d 	.word	0x0000041d
    3b30:	00000433 	.word	0x00000433
    3b34:	00000413 	.word	0x00000413
    3b38:	7fffffff 	.word	0x7fffffff
    3b3c:	fffffbed 	.word	0xfffffbed

00003b40 <__aeabi_i2d>:
    3b40:	b570      	push	{r4, r5, r6, lr}
    3b42:	2800      	cmp	r0, #0
    3b44:	d030      	beq.n	3ba8 <__aeabi_i2d+0x68>
    3b46:	17c3      	asrs	r3, r0, #31
    3b48:	18c4      	adds	r4, r0, r3
    3b4a:	405c      	eors	r4, r3
    3b4c:	0fc5      	lsrs	r5, r0, #31
    3b4e:	0020      	movs	r0, r4
    3b50:	f000 f838 	bl	3bc4 <__clzsi2>
    3b54:	4b17      	ldr	r3, [pc, #92]	; (3bb4 <__aeabi_i2d+0x74>)
    3b56:	4a18      	ldr	r2, [pc, #96]	; (3bb8 <__aeabi_i2d+0x78>)
    3b58:	1a1b      	subs	r3, r3, r0
    3b5a:	1ad2      	subs	r2, r2, r3
    3b5c:	2a1f      	cmp	r2, #31
    3b5e:	dd18      	ble.n	3b92 <__aeabi_i2d+0x52>
    3b60:	4a16      	ldr	r2, [pc, #88]	; (3bbc <__aeabi_i2d+0x7c>)
    3b62:	1ad2      	subs	r2, r2, r3
    3b64:	4094      	lsls	r4, r2
    3b66:	2200      	movs	r2, #0
    3b68:	0324      	lsls	r4, r4, #12
    3b6a:	055b      	lsls	r3, r3, #21
    3b6c:	0b24      	lsrs	r4, r4, #12
    3b6e:	0d5b      	lsrs	r3, r3, #21
    3b70:	2100      	movs	r1, #0
    3b72:	0010      	movs	r0, r2
    3b74:	0324      	lsls	r4, r4, #12
    3b76:	0d0a      	lsrs	r2, r1, #20
    3b78:	0b24      	lsrs	r4, r4, #12
    3b7a:	0512      	lsls	r2, r2, #20
    3b7c:	4322      	orrs	r2, r4
    3b7e:	4c10      	ldr	r4, [pc, #64]	; (3bc0 <__aeabi_i2d+0x80>)
    3b80:	051b      	lsls	r3, r3, #20
    3b82:	4022      	ands	r2, r4
    3b84:	4313      	orrs	r3, r2
    3b86:	005b      	lsls	r3, r3, #1
    3b88:	07ed      	lsls	r5, r5, #31
    3b8a:	085b      	lsrs	r3, r3, #1
    3b8c:	432b      	orrs	r3, r5
    3b8e:	0019      	movs	r1, r3
    3b90:	bd70      	pop	{r4, r5, r6, pc}
    3b92:	0021      	movs	r1, r4
    3b94:	4091      	lsls	r1, r2
    3b96:	000a      	movs	r2, r1
    3b98:	210b      	movs	r1, #11
    3b9a:	1a08      	subs	r0, r1, r0
    3b9c:	40c4      	lsrs	r4, r0
    3b9e:	055b      	lsls	r3, r3, #21
    3ba0:	0324      	lsls	r4, r4, #12
    3ba2:	0b24      	lsrs	r4, r4, #12
    3ba4:	0d5b      	lsrs	r3, r3, #21
    3ba6:	e7e3      	b.n	3b70 <__aeabi_i2d+0x30>
    3ba8:	2500      	movs	r5, #0
    3baa:	2300      	movs	r3, #0
    3bac:	2400      	movs	r4, #0
    3bae:	2200      	movs	r2, #0
    3bb0:	e7de      	b.n	3b70 <__aeabi_i2d+0x30>
    3bb2:	46c0      	nop			; (mov r8, r8)
    3bb4:	0000041e 	.word	0x0000041e
    3bb8:	00000433 	.word	0x00000433
    3bbc:	00000413 	.word	0x00000413
    3bc0:	800fffff 	.word	0x800fffff

00003bc4 <__clzsi2>:
    3bc4:	211c      	movs	r1, #28
    3bc6:	2301      	movs	r3, #1
    3bc8:	041b      	lsls	r3, r3, #16
    3bca:	4298      	cmp	r0, r3
    3bcc:	d301      	bcc.n	3bd2 <__clzsi2+0xe>
    3bce:	0c00      	lsrs	r0, r0, #16
    3bd0:	3910      	subs	r1, #16
    3bd2:	0a1b      	lsrs	r3, r3, #8
    3bd4:	4298      	cmp	r0, r3
    3bd6:	d301      	bcc.n	3bdc <__clzsi2+0x18>
    3bd8:	0a00      	lsrs	r0, r0, #8
    3bda:	3908      	subs	r1, #8
    3bdc:	091b      	lsrs	r3, r3, #4
    3bde:	4298      	cmp	r0, r3
    3be0:	d301      	bcc.n	3be6 <__clzsi2+0x22>
    3be2:	0900      	lsrs	r0, r0, #4
    3be4:	3904      	subs	r1, #4
    3be6:	a202      	add	r2, pc, #8	; (adr r2, 3bf0 <__clzsi2+0x2c>)
    3be8:	5c10      	ldrb	r0, [r2, r0]
    3bea:	1840      	adds	r0, r0, r1
    3bec:	4770      	bx	lr
    3bee:	46c0      	nop			; (mov r8, r8)
    3bf0:	02020304 	.word	0x02020304
    3bf4:	01010101 	.word	0x01010101
	...

00003c00 <__libc_init_array>:
    3c00:	b570      	push	{r4, r5, r6, lr}
    3c02:	2600      	movs	r6, #0
    3c04:	4d0c      	ldr	r5, [pc, #48]	; (3c38 <__libc_init_array+0x38>)
    3c06:	4c0d      	ldr	r4, [pc, #52]	; (3c3c <__libc_init_array+0x3c>)
    3c08:	1b64      	subs	r4, r4, r5
    3c0a:	10a4      	asrs	r4, r4, #2
    3c0c:	42a6      	cmp	r6, r4
    3c0e:	d109      	bne.n	3c24 <__libc_init_array+0x24>
    3c10:	2600      	movs	r6, #0
    3c12:	f000 fd19 	bl	4648 <_init>
    3c16:	4d0a      	ldr	r5, [pc, #40]	; (3c40 <__libc_init_array+0x40>)
    3c18:	4c0a      	ldr	r4, [pc, #40]	; (3c44 <__libc_init_array+0x44>)
    3c1a:	1b64      	subs	r4, r4, r5
    3c1c:	10a4      	asrs	r4, r4, #2
    3c1e:	42a6      	cmp	r6, r4
    3c20:	d105      	bne.n	3c2e <__libc_init_array+0x2e>
    3c22:	bd70      	pop	{r4, r5, r6, pc}
    3c24:	00b3      	lsls	r3, r6, #2
    3c26:	58eb      	ldr	r3, [r5, r3]
    3c28:	4798      	blx	r3
    3c2a:	3601      	adds	r6, #1
    3c2c:	e7ee      	b.n	3c0c <__libc_init_array+0xc>
    3c2e:	00b3      	lsls	r3, r6, #2
    3c30:	58eb      	ldr	r3, [r5, r3]
    3c32:	4798      	blx	r3
    3c34:	3601      	adds	r6, #1
    3c36:	e7f2      	b.n	3c1e <__libc_init_array+0x1e>
    3c38:	00004654 	.word	0x00004654
    3c3c:	00004654 	.word	0x00004654
    3c40:	00004654 	.word	0x00004654
    3c44:	00004658 	.word	0x00004658

00003c48 <memcpy>:
    3c48:	2300      	movs	r3, #0
    3c4a:	b510      	push	{r4, lr}
    3c4c:	429a      	cmp	r2, r3
    3c4e:	d100      	bne.n	3c52 <memcpy+0xa>
    3c50:	bd10      	pop	{r4, pc}
    3c52:	5ccc      	ldrb	r4, [r1, r3]
    3c54:	54c4      	strb	r4, [r0, r3]
    3c56:	3301      	adds	r3, #1
    3c58:	e7f8      	b.n	3c4c <memcpy+0x4>

00003c5a <memset>:
    3c5a:	0003      	movs	r3, r0
    3c5c:	1882      	adds	r2, r0, r2
    3c5e:	4293      	cmp	r3, r2
    3c60:	d100      	bne.n	3c64 <memset+0xa>
    3c62:	4770      	bx	lr
    3c64:	7019      	strb	r1, [r3, #0]
    3c66:	3301      	adds	r3, #1
    3c68:	e7f9      	b.n	3c5e <memset+0x4>

00003c6a <setbuf>:
    3c6a:	424a      	negs	r2, r1
    3c6c:	414a      	adcs	r2, r1
    3c6e:	2380      	movs	r3, #128	; 0x80
    3c70:	b510      	push	{r4, lr}
    3c72:	0052      	lsls	r2, r2, #1
    3c74:	00db      	lsls	r3, r3, #3
    3c76:	f000 f801 	bl	3c7c <setvbuf>
    3c7a:	bd10      	pop	{r4, pc}

00003c7c <setvbuf>:
    3c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c7e:	001d      	movs	r5, r3
    3c80:	4b4f      	ldr	r3, [pc, #316]	; (3dc0 <setvbuf+0x144>)
    3c82:	b085      	sub	sp, #20
    3c84:	681e      	ldr	r6, [r3, #0]
    3c86:	0004      	movs	r4, r0
    3c88:	000f      	movs	r7, r1
    3c8a:	9200      	str	r2, [sp, #0]
    3c8c:	2e00      	cmp	r6, #0
    3c8e:	d005      	beq.n	3c9c <setvbuf+0x20>
    3c90:	69b3      	ldr	r3, [r6, #24]
    3c92:	2b00      	cmp	r3, #0
    3c94:	d102      	bne.n	3c9c <setvbuf+0x20>
    3c96:	0030      	movs	r0, r6
    3c98:	f000 f994 	bl	3fc4 <__sinit>
    3c9c:	4b49      	ldr	r3, [pc, #292]	; (3dc4 <setvbuf+0x148>)
    3c9e:	429c      	cmp	r4, r3
    3ca0:	d150      	bne.n	3d44 <setvbuf+0xc8>
    3ca2:	6874      	ldr	r4, [r6, #4]
    3ca4:	9b00      	ldr	r3, [sp, #0]
    3ca6:	2b02      	cmp	r3, #2
    3ca8:	d005      	beq.n	3cb6 <setvbuf+0x3a>
    3caa:	2b01      	cmp	r3, #1
    3cac:	d900      	bls.n	3cb0 <setvbuf+0x34>
    3cae:	e084      	b.n	3dba <setvbuf+0x13e>
    3cb0:	2d00      	cmp	r5, #0
    3cb2:	da00      	bge.n	3cb6 <setvbuf+0x3a>
    3cb4:	e081      	b.n	3dba <setvbuf+0x13e>
    3cb6:	0021      	movs	r1, r4
    3cb8:	0030      	movs	r0, r6
    3cba:	f000 f915 	bl	3ee8 <_fflush_r>
    3cbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3cc0:	2900      	cmp	r1, #0
    3cc2:	d008      	beq.n	3cd6 <setvbuf+0x5a>
    3cc4:	0023      	movs	r3, r4
    3cc6:	3344      	adds	r3, #68	; 0x44
    3cc8:	4299      	cmp	r1, r3
    3cca:	d002      	beq.n	3cd2 <setvbuf+0x56>
    3ccc:	0030      	movs	r0, r6
    3cce:	f000 fa41 	bl	4154 <_free_r>
    3cd2:	2300      	movs	r3, #0
    3cd4:	6363      	str	r3, [r4, #52]	; 0x34
    3cd6:	2300      	movs	r3, #0
    3cd8:	61a3      	str	r3, [r4, #24]
    3cda:	6063      	str	r3, [r4, #4]
    3cdc:	89a3      	ldrh	r3, [r4, #12]
    3cde:	061b      	lsls	r3, r3, #24
    3ce0:	d503      	bpl.n	3cea <setvbuf+0x6e>
    3ce2:	6921      	ldr	r1, [r4, #16]
    3ce4:	0030      	movs	r0, r6
    3ce6:	f000 fa35 	bl	4154 <_free_r>
    3cea:	89a3      	ldrh	r3, [r4, #12]
    3cec:	4a36      	ldr	r2, [pc, #216]	; (3dc8 <setvbuf+0x14c>)
    3cee:	4013      	ands	r3, r2
    3cf0:	81a3      	strh	r3, [r4, #12]
    3cf2:	9b00      	ldr	r3, [sp, #0]
    3cf4:	2b02      	cmp	r3, #2
    3cf6:	d05a      	beq.n	3dae <setvbuf+0x132>
    3cf8:	ab03      	add	r3, sp, #12
    3cfa:	aa02      	add	r2, sp, #8
    3cfc:	0021      	movs	r1, r4
    3cfe:	0030      	movs	r0, r6
    3d00:	f000 f9f6 	bl	40f0 <__swhatbuf_r>
    3d04:	89a3      	ldrh	r3, [r4, #12]
    3d06:	4318      	orrs	r0, r3
    3d08:	81a0      	strh	r0, [r4, #12]
    3d0a:	2d00      	cmp	r5, #0
    3d0c:	d124      	bne.n	3d58 <setvbuf+0xdc>
    3d0e:	9d02      	ldr	r5, [sp, #8]
    3d10:	0028      	movs	r0, r5
    3d12:	f000 fa15 	bl	4140 <malloc>
    3d16:	9501      	str	r5, [sp, #4]
    3d18:	1e07      	subs	r7, r0, #0
    3d1a:	d142      	bne.n	3da2 <setvbuf+0x126>
    3d1c:	9b02      	ldr	r3, [sp, #8]
    3d1e:	9301      	str	r3, [sp, #4]
    3d20:	42ab      	cmp	r3, r5
    3d22:	d139      	bne.n	3d98 <setvbuf+0x11c>
    3d24:	2001      	movs	r0, #1
    3d26:	4240      	negs	r0, r0
    3d28:	2302      	movs	r3, #2
    3d2a:	89a2      	ldrh	r2, [r4, #12]
    3d2c:	4313      	orrs	r3, r2
    3d2e:	81a3      	strh	r3, [r4, #12]
    3d30:	2300      	movs	r3, #0
    3d32:	60a3      	str	r3, [r4, #8]
    3d34:	0023      	movs	r3, r4
    3d36:	3347      	adds	r3, #71	; 0x47
    3d38:	6023      	str	r3, [r4, #0]
    3d3a:	6123      	str	r3, [r4, #16]
    3d3c:	2301      	movs	r3, #1
    3d3e:	6163      	str	r3, [r4, #20]
    3d40:	b005      	add	sp, #20
    3d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d44:	4b21      	ldr	r3, [pc, #132]	; (3dcc <setvbuf+0x150>)
    3d46:	429c      	cmp	r4, r3
    3d48:	d101      	bne.n	3d4e <setvbuf+0xd2>
    3d4a:	68b4      	ldr	r4, [r6, #8]
    3d4c:	e7aa      	b.n	3ca4 <setvbuf+0x28>
    3d4e:	4b20      	ldr	r3, [pc, #128]	; (3dd0 <setvbuf+0x154>)
    3d50:	429c      	cmp	r4, r3
    3d52:	d1a7      	bne.n	3ca4 <setvbuf+0x28>
    3d54:	68f4      	ldr	r4, [r6, #12]
    3d56:	e7a5      	b.n	3ca4 <setvbuf+0x28>
    3d58:	2f00      	cmp	r7, #0
    3d5a:	d0d9      	beq.n	3d10 <setvbuf+0x94>
    3d5c:	69b3      	ldr	r3, [r6, #24]
    3d5e:	2b00      	cmp	r3, #0
    3d60:	d102      	bne.n	3d68 <setvbuf+0xec>
    3d62:	0030      	movs	r0, r6
    3d64:	f000 f92e 	bl	3fc4 <__sinit>
    3d68:	9b00      	ldr	r3, [sp, #0]
    3d6a:	2b01      	cmp	r3, #1
    3d6c:	d103      	bne.n	3d76 <setvbuf+0xfa>
    3d6e:	89a3      	ldrh	r3, [r4, #12]
    3d70:	9a00      	ldr	r2, [sp, #0]
    3d72:	431a      	orrs	r2, r3
    3d74:	81a2      	strh	r2, [r4, #12]
    3d76:	2008      	movs	r0, #8
    3d78:	89a3      	ldrh	r3, [r4, #12]
    3d7a:	6027      	str	r7, [r4, #0]
    3d7c:	6127      	str	r7, [r4, #16]
    3d7e:	6165      	str	r5, [r4, #20]
    3d80:	4018      	ands	r0, r3
    3d82:	d018      	beq.n	3db6 <setvbuf+0x13a>
    3d84:	2001      	movs	r0, #1
    3d86:	4018      	ands	r0, r3
    3d88:	2300      	movs	r3, #0
    3d8a:	4298      	cmp	r0, r3
    3d8c:	d011      	beq.n	3db2 <setvbuf+0x136>
    3d8e:	426d      	negs	r5, r5
    3d90:	60a3      	str	r3, [r4, #8]
    3d92:	61a5      	str	r5, [r4, #24]
    3d94:	0018      	movs	r0, r3
    3d96:	e7d3      	b.n	3d40 <setvbuf+0xc4>
    3d98:	9801      	ldr	r0, [sp, #4]
    3d9a:	f000 f9d1 	bl	4140 <malloc>
    3d9e:	1e07      	subs	r7, r0, #0
    3da0:	d0c0      	beq.n	3d24 <setvbuf+0xa8>
    3da2:	2380      	movs	r3, #128	; 0x80
    3da4:	89a2      	ldrh	r2, [r4, #12]
    3da6:	9d01      	ldr	r5, [sp, #4]
    3da8:	4313      	orrs	r3, r2
    3daa:	81a3      	strh	r3, [r4, #12]
    3dac:	e7d6      	b.n	3d5c <setvbuf+0xe0>
    3dae:	2000      	movs	r0, #0
    3db0:	e7ba      	b.n	3d28 <setvbuf+0xac>
    3db2:	60a5      	str	r5, [r4, #8]
    3db4:	e7c4      	b.n	3d40 <setvbuf+0xc4>
    3db6:	60a0      	str	r0, [r4, #8]
    3db8:	e7c2      	b.n	3d40 <setvbuf+0xc4>
    3dba:	2001      	movs	r0, #1
    3dbc:	4240      	negs	r0, r0
    3dbe:	e7bf      	b.n	3d40 <setvbuf+0xc4>
    3dc0:	20000014 	.word	0x20000014
    3dc4:	00004608 	.word	0x00004608
    3dc8:	fffff35c 	.word	0xfffff35c
    3dcc:	00004628 	.word	0x00004628
    3dd0:	000045e8 	.word	0x000045e8

00003dd4 <__sflush_r>:
    3dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3dd6:	898a      	ldrh	r2, [r1, #12]
    3dd8:	0005      	movs	r5, r0
    3dda:	000c      	movs	r4, r1
    3ddc:	0713      	lsls	r3, r2, #28
    3dde:	d460      	bmi.n	3ea2 <__sflush_r+0xce>
    3de0:	684b      	ldr	r3, [r1, #4]
    3de2:	2b00      	cmp	r3, #0
    3de4:	dc04      	bgt.n	3df0 <__sflush_r+0x1c>
    3de6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3de8:	2b00      	cmp	r3, #0
    3dea:	dc01      	bgt.n	3df0 <__sflush_r+0x1c>
    3dec:	2000      	movs	r0, #0
    3dee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3df0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3df2:	2f00      	cmp	r7, #0
    3df4:	d0fa      	beq.n	3dec <__sflush_r+0x18>
    3df6:	2300      	movs	r3, #0
    3df8:	682e      	ldr	r6, [r5, #0]
    3dfa:	602b      	str	r3, [r5, #0]
    3dfc:	2380      	movs	r3, #128	; 0x80
    3dfe:	015b      	lsls	r3, r3, #5
    3e00:	401a      	ands	r2, r3
    3e02:	d034      	beq.n	3e6e <__sflush_r+0x9a>
    3e04:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3e06:	89a3      	ldrh	r3, [r4, #12]
    3e08:	075b      	lsls	r3, r3, #29
    3e0a:	d506      	bpl.n	3e1a <__sflush_r+0x46>
    3e0c:	6863      	ldr	r3, [r4, #4]
    3e0e:	1ac0      	subs	r0, r0, r3
    3e10:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3e12:	2b00      	cmp	r3, #0
    3e14:	d001      	beq.n	3e1a <__sflush_r+0x46>
    3e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3e18:	1ac0      	subs	r0, r0, r3
    3e1a:	0002      	movs	r2, r0
    3e1c:	6a21      	ldr	r1, [r4, #32]
    3e1e:	2300      	movs	r3, #0
    3e20:	0028      	movs	r0, r5
    3e22:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3e24:	47b8      	blx	r7
    3e26:	89a1      	ldrh	r1, [r4, #12]
    3e28:	1c43      	adds	r3, r0, #1
    3e2a:	d106      	bne.n	3e3a <__sflush_r+0x66>
    3e2c:	682b      	ldr	r3, [r5, #0]
    3e2e:	2b1d      	cmp	r3, #29
    3e30:	d831      	bhi.n	3e96 <__sflush_r+0xc2>
    3e32:	4a2c      	ldr	r2, [pc, #176]	; (3ee4 <__sflush_r+0x110>)
    3e34:	40da      	lsrs	r2, r3
    3e36:	07d3      	lsls	r3, r2, #31
    3e38:	d52d      	bpl.n	3e96 <__sflush_r+0xc2>
    3e3a:	2300      	movs	r3, #0
    3e3c:	6063      	str	r3, [r4, #4]
    3e3e:	6923      	ldr	r3, [r4, #16]
    3e40:	6023      	str	r3, [r4, #0]
    3e42:	04cb      	lsls	r3, r1, #19
    3e44:	d505      	bpl.n	3e52 <__sflush_r+0x7e>
    3e46:	1c43      	adds	r3, r0, #1
    3e48:	d102      	bne.n	3e50 <__sflush_r+0x7c>
    3e4a:	682b      	ldr	r3, [r5, #0]
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	d100      	bne.n	3e52 <__sflush_r+0x7e>
    3e50:	6560      	str	r0, [r4, #84]	; 0x54
    3e52:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3e54:	602e      	str	r6, [r5, #0]
    3e56:	2900      	cmp	r1, #0
    3e58:	d0c8      	beq.n	3dec <__sflush_r+0x18>
    3e5a:	0023      	movs	r3, r4
    3e5c:	3344      	adds	r3, #68	; 0x44
    3e5e:	4299      	cmp	r1, r3
    3e60:	d002      	beq.n	3e68 <__sflush_r+0x94>
    3e62:	0028      	movs	r0, r5
    3e64:	f000 f976 	bl	4154 <_free_r>
    3e68:	2000      	movs	r0, #0
    3e6a:	6360      	str	r0, [r4, #52]	; 0x34
    3e6c:	e7bf      	b.n	3dee <__sflush_r+0x1a>
    3e6e:	2301      	movs	r3, #1
    3e70:	6a21      	ldr	r1, [r4, #32]
    3e72:	0028      	movs	r0, r5
    3e74:	47b8      	blx	r7
    3e76:	1c43      	adds	r3, r0, #1
    3e78:	d1c5      	bne.n	3e06 <__sflush_r+0x32>
    3e7a:	682b      	ldr	r3, [r5, #0]
    3e7c:	2b00      	cmp	r3, #0
    3e7e:	d0c2      	beq.n	3e06 <__sflush_r+0x32>
    3e80:	2b1d      	cmp	r3, #29
    3e82:	d001      	beq.n	3e88 <__sflush_r+0xb4>
    3e84:	2b16      	cmp	r3, #22
    3e86:	d101      	bne.n	3e8c <__sflush_r+0xb8>
    3e88:	602e      	str	r6, [r5, #0]
    3e8a:	e7af      	b.n	3dec <__sflush_r+0x18>
    3e8c:	2340      	movs	r3, #64	; 0x40
    3e8e:	89a2      	ldrh	r2, [r4, #12]
    3e90:	4313      	orrs	r3, r2
    3e92:	81a3      	strh	r3, [r4, #12]
    3e94:	e7ab      	b.n	3dee <__sflush_r+0x1a>
    3e96:	2340      	movs	r3, #64	; 0x40
    3e98:	430b      	orrs	r3, r1
    3e9a:	2001      	movs	r0, #1
    3e9c:	81a3      	strh	r3, [r4, #12]
    3e9e:	4240      	negs	r0, r0
    3ea0:	e7a5      	b.n	3dee <__sflush_r+0x1a>
    3ea2:	690f      	ldr	r7, [r1, #16]
    3ea4:	2f00      	cmp	r7, #0
    3ea6:	d0a1      	beq.n	3dec <__sflush_r+0x18>
    3ea8:	680b      	ldr	r3, [r1, #0]
    3eaa:	600f      	str	r7, [r1, #0]
    3eac:	1bdb      	subs	r3, r3, r7
    3eae:	9301      	str	r3, [sp, #4]
    3eb0:	2300      	movs	r3, #0
    3eb2:	0792      	lsls	r2, r2, #30
    3eb4:	d100      	bne.n	3eb8 <__sflush_r+0xe4>
    3eb6:	694b      	ldr	r3, [r1, #20]
    3eb8:	60a3      	str	r3, [r4, #8]
    3eba:	9b01      	ldr	r3, [sp, #4]
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	dc00      	bgt.n	3ec2 <__sflush_r+0xee>
    3ec0:	e794      	b.n	3dec <__sflush_r+0x18>
    3ec2:	9b01      	ldr	r3, [sp, #4]
    3ec4:	003a      	movs	r2, r7
    3ec6:	6a21      	ldr	r1, [r4, #32]
    3ec8:	0028      	movs	r0, r5
    3eca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3ecc:	47b0      	blx	r6
    3ece:	2800      	cmp	r0, #0
    3ed0:	dc03      	bgt.n	3eda <__sflush_r+0x106>
    3ed2:	2340      	movs	r3, #64	; 0x40
    3ed4:	89a2      	ldrh	r2, [r4, #12]
    3ed6:	4313      	orrs	r3, r2
    3ed8:	e7df      	b.n	3e9a <__sflush_r+0xc6>
    3eda:	9b01      	ldr	r3, [sp, #4]
    3edc:	183f      	adds	r7, r7, r0
    3ede:	1a1b      	subs	r3, r3, r0
    3ee0:	9301      	str	r3, [sp, #4]
    3ee2:	e7ea      	b.n	3eba <__sflush_r+0xe6>
    3ee4:	20400001 	.word	0x20400001

00003ee8 <_fflush_r>:
    3ee8:	690b      	ldr	r3, [r1, #16]
    3eea:	b570      	push	{r4, r5, r6, lr}
    3eec:	0005      	movs	r5, r0
    3eee:	000c      	movs	r4, r1
    3ef0:	2b00      	cmp	r3, #0
    3ef2:	d101      	bne.n	3ef8 <_fflush_r+0x10>
    3ef4:	2000      	movs	r0, #0
    3ef6:	bd70      	pop	{r4, r5, r6, pc}
    3ef8:	2800      	cmp	r0, #0
    3efa:	d004      	beq.n	3f06 <_fflush_r+0x1e>
    3efc:	6983      	ldr	r3, [r0, #24]
    3efe:	2b00      	cmp	r3, #0
    3f00:	d101      	bne.n	3f06 <_fflush_r+0x1e>
    3f02:	f000 f85f 	bl	3fc4 <__sinit>
    3f06:	4b0b      	ldr	r3, [pc, #44]	; (3f34 <_fflush_r+0x4c>)
    3f08:	429c      	cmp	r4, r3
    3f0a:	d109      	bne.n	3f20 <_fflush_r+0x38>
    3f0c:	686c      	ldr	r4, [r5, #4]
    3f0e:	220c      	movs	r2, #12
    3f10:	5ea3      	ldrsh	r3, [r4, r2]
    3f12:	2b00      	cmp	r3, #0
    3f14:	d0ee      	beq.n	3ef4 <_fflush_r+0xc>
    3f16:	0021      	movs	r1, r4
    3f18:	0028      	movs	r0, r5
    3f1a:	f7ff ff5b 	bl	3dd4 <__sflush_r>
    3f1e:	e7ea      	b.n	3ef6 <_fflush_r+0xe>
    3f20:	4b05      	ldr	r3, [pc, #20]	; (3f38 <_fflush_r+0x50>)
    3f22:	429c      	cmp	r4, r3
    3f24:	d101      	bne.n	3f2a <_fflush_r+0x42>
    3f26:	68ac      	ldr	r4, [r5, #8]
    3f28:	e7f1      	b.n	3f0e <_fflush_r+0x26>
    3f2a:	4b04      	ldr	r3, [pc, #16]	; (3f3c <_fflush_r+0x54>)
    3f2c:	429c      	cmp	r4, r3
    3f2e:	d1ee      	bne.n	3f0e <_fflush_r+0x26>
    3f30:	68ec      	ldr	r4, [r5, #12]
    3f32:	e7ec      	b.n	3f0e <_fflush_r+0x26>
    3f34:	00004608 	.word	0x00004608
    3f38:	00004628 	.word	0x00004628
    3f3c:	000045e8 	.word	0x000045e8

00003f40 <_cleanup_r>:
    3f40:	b510      	push	{r4, lr}
    3f42:	4902      	ldr	r1, [pc, #8]	; (3f4c <_cleanup_r+0xc>)
    3f44:	f000 f8b2 	bl	40ac <_fwalk_reent>
    3f48:	bd10      	pop	{r4, pc}
    3f4a:	46c0      	nop			; (mov r8, r8)
    3f4c:	00003ee9 	.word	0x00003ee9

00003f50 <std.isra.0>:
    3f50:	2300      	movs	r3, #0
    3f52:	b510      	push	{r4, lr}
    3f54:	0004      	movs	r4, r0
    3f56:	6003      	str	r3, [r0, #0]
    3f58:	6043      	str	r3, [r0, #4]
    3f5a:	6083      	str	r3, [r0, #8]
    3f5c:	8181      	strh	r1, [r0, #12]
    3f5e:	6643      	str	r3, [r0, #100]	; 0x64
    3f60:	81c2      	strh	r2, [r0, #14]
    3f62:	6103      	str	r3, [r0, #16]
    3f64:	6143      	str	r3, [r0, #20]
    3f66:	6183      	str	r3, [r0, #24]
    3f68:	0019      	movs	r1, r3
    3f6a:	2208      	movs	r2, #8
    3f6c:	305c      	adds	r0, #92	; 0x5c
    3f6e:	f7ff fe74 	bl	3c5a <memset>
    3f72:	4b05      	ldr	r3, [pc, #20]	; (3f88 <std.isra.0+0x38>)
    3f74:	6224      	str	r4, [r4, #32]
    3f76:	6263      	str	r3, [r4, #36]	; 0x24
    3f78:	4b04      	ldr	r3, [pc, #16]	; (3f8c <std.isra.0+0x3c>)
    3f7a:	62a3      	str	r3, [r4, #40]	; 0x28
    3f7c:	4b04      	ldr	r3, [pc, #16]	; (3f90 <std.isra.0+0x40>)
    3f7e:	62e3      	str	r3, [r4, #44]	; 0x2c
    3f80:	4b04      	ldr	r3, [pc, #16]	; (3f94 <std.isra.0+0x44>)
    3f82:	6323      	str	r3, [r4, #48]	; 0x30
    3f84:	bd10      	pop	{r4, pc}
    3f86:	46c0      	nop			; (mov r8, r8)
    3f88:	000042c9 	.word	0x000042c9
    3f8c:	000042f1 	.word	0x000042f1
    3f90:	00004329 	.word	0x00004329
    3f94:	00004355 	.word	0x00004355

00003f98 <__sfmoreglue>:
    3f98:	b570      	push	{r4, r5, r6, lr}
    3f9a:	2568      	movs	r5, #104	; 0x68
    3f9c:	1e4a      	subs	r2, r1, #1
    3f9e:	4355      	muls	r5, r2
    3fa0:	000e      	movs	r6, r1
    3fa2:	0029      	movs	r1, r5
    3fa4:	3174      	adds	r1, #116	; 0x74
    3fa6:	f000 f91f 	bl	41e8 <_malloc_r>
    3faa:	1e04      	subs	r4, r0, #0
    3fac:	d008      	beq.n	3fc0 <__sfmoreglue+0x28>
    3fae:	2100      	movs	r1, #0
    3fb0:	002a      	movs	r2, r5
    3fb2:	6001      	str	r1, [r0, #0]
    3fb4:	6046      	str	r6, [r0, #4]
    3fb6:	300c      	adds	r0, #12
    3fb8:	60a0      	str	r0, [r4, #8]
    3fba:	3268      	adds	r2, #104	; 0x68
    3fbc:	f7ff fe4d 	bl	3c5a <memset>
    3fc0:	0020      	movs	r0, r4
    3fc2:	bd70      	pop	{r4, r5, r6, pc}

00003fc4 <__sinit>:
    3fc4:	6983      	ldr	r3, [r0, #24]
    3fc6:	b513      	push	{r0, r1, r4, lr}
    3fc8:	0004      	movs	r4, r0
    3fca:	2b00      	cmp	r3, #0
    3fcc:	d128      	bne.n	4020 <__sinit+0x5c>
    3fce:	6483      	str	r3, [r0, #72]	; 0x48
    3fd0:	64c3      	str	r3, [r0, #76]	; 0x4c
    3fd2:	6503      	str	r3, [r0, #80]	; 0x50
    3fd4:	4b13      	ldr	r3, [pc, #76]	; (4024 <__sinit+0x60>)
    3fd6:	4a14      	ldr	r2, [pc, #80]	; (4028 <__sinit+0x64>)
    3fd8:	681b      	ldr	r3, [r3, #0]
    3fda:	6282      	str	r2, [r0, #40]	; 0x28
    3fdc:	9301      	str	r3, [sp, #4]
    3fde:	4298      	cmp	r0, r3
    3fe0:	d101      	bne.n	3fe6 <__sinit+0x22>
    3fe2:	2301      	movs	r3, #1
    3fe4:	6183      	str	r3, [r0, #24]
    3fe6:	0020      	movs	r0, r4
    3fe8:	f000 f820 	bl	402c <__sfp>
    3fec:	6060      	str	r0, [r4, #4]
    3fee:	0020      	movs	r0, r4
    3ff0:	f000 f81c 	bl	402c <__sfp>
    3ff4:	60a0      	str	r0, [r4, #8]
    3ff6:	0020      	movs	r0, r4
    3ff8:	f000 f818 	bl	402c <__sfp>
    3ffc:	2200      	movs	r2, #0
    3ffe:	60e0      	str	r0, [r4, #12]
    4000:	2104      	movs	r1, #4
    4002:	6860      	ldr	r0, [r4, #4]
    4004:	f7ff ffa4 	bl	3f50 <std.isra.0>
    4008:	2201      	movs	r2, #1
    400a:	2109      	movs	r1, #9
    400c:	68a0      	ldr	r0, [r4, #8]
    400e:	f7ff ff9f 	bl	3f50 <std.isra.0>
    4012:	2202      	movs	r2, #2
    4014:	2112      	movs	r1, #18
    4016:	68e0      	ldr	r0, [r4, #12]
    4018:	f7ff ff9a 	bl	3f50 <std.isra.0>
    401c:	2301      	movs	r3, #1
    401e:	61a3      	str	r3, [r4, #24]
    4020:	bd13      	pop	{r0, r1, r4, pc}
    4022:	46c0      	nop			; (mov r8, r8)
    4024:	000045e4 	.word	0x000045e4
    4028:	00003f41 	.word	0x00003f41

0000402c <__sfp>:
    402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    402e:	4b1e      	ldr	r3, [pc, #120]	; (40a8 <__sfp+0x7c>)
    4030:	0007      	movs	r7, r0
    4032:	681e      	ldr	r6, [r3, #0]
    4034:	69b3      	ldr	r3, [r6, #24]
    4036:	2b00      	cmp	r3, #0
    4038:	d102      	bne.n	4040 <__sfp+0x14>
    403a:	0030      	movs	r0, r6
    403c:	f7ff ffc2 	bl	3fc4 <__sinit>
    4040:	3648      	adds	r6, #72	; 0x48
    4042:	68b4      	ldr	r4, [r6, #8]
    4044:	6873      	ldr	r3, [r6, #4]
    4046:	3b01      	subs	r3, #1
    4048:	d504      	bpl.n	4054 <__sfp+0x28>
    404a:	6833      	ldr	r3, [r6, #0]
    404c:	2b00      	cmp	r3, #0
    404e:	d007      	beq.n	4060 <__sfp+0x34>
    4050:	6836      	ldr	r6, [r6, #0]
    4052:	e7f6      	b.n	4042 <__sfp+0x16>
    4054:	220c      	movs	r2, #12
    4056:	5ea5      	ldrsh	r5, [r4, r2]
    4058:	2d00      	cmp	r5, #0
    405a:	d00d      	beq.n	4078 <__sfp+0x4c>
    405c:	3468      	adds	r4, #104	; 0x68
    405e:	e7f2      	b.n	4046 <__sfp+0x1a>
    4060:	2104      	movs	r1, #4
    4062:	0038      	movs	r0, r7
    4064:	f7ff ff98 	bl	3f98 <__sfmoreglue>
    4068:	6030      	str	r0, [r6, #0]
    406a:	2800      	cmp	r0, #0
    406c:	d1f0      	bne.n	4050 <__sfp+0x24>
    406e:	230c      	movs	r3, #12
    4070:	0004      	movs	r4, r0
    4072:	603b      	str	r3, [r7, #0]
    4074:	0020      	movs	r0, r4
    4076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4078:	2301      	movs	r3, #1
    407a:	0020      	movs	r0, r4
    407c:	425b      	negs	r3, r3
    407e:	81e3      	strh	r3, [r4, #14]
    4080:	3302      	adds	r3, #2
    4082:	81a3      	strh	r3, [r4, #12]
    4084:	6665      	str	r5, [r4, #100]	; 0x64
    4086:	6025      	str	r5, [r4, #0]
    4088:	60a5      	str	r5, [r4, #8]
    408a:	6065      	str	r5, [r4, #4]
    408c:	6125      	str	r5, [r4, #16]
    408e:	6165      	str	r5, [r4, #20]
    4090:	61a5      	str	r5, [r4, #24]
    4092:	2208      	movs	r2, #8
    4094:	0029      	movs	r1, r5
    4096:	305c      	adds	r0, #92	; 0x5c
    4098:	f7ff fddf 	bl	3c5a <memset>
    409c:	6365      	str	r5, [r4, #52]	; 0x34
    409e:	63a5      	str	r5, [r4, #56]	; 0x38
    40a0:	64a5      	str	r5, [r4, #72]	; 0x48
    40a2:	64e5      	str	r5, [r4, #76]	; 0x4c
    40a4:	e7e6      	b.n	4074 <__sfp+0x48>
    40a6:	46c0      	nop			; (mov r8, r8)
    40a8:	000045e4 	.word	0x000045e4

000040ac <_fwalk_reent>:
    40ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    40ae:	0004      	movs	r4, r0
    40b0:	0007      	movs	r7, r0
    40b2:	2600      	movs	r6, #0
    40b4:	9101      	str	r1, [sp, #4]
    40b6:	3448      	adds	r4, #72	; 0x48
    40b8:	2c00      	cmp	r4, #0
    40ba:	d101      	bne.n	40c0 <_fwalk_reent+0x14>
    40bc:	0030      	movs	r0, r6
    40be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    40c0:	6863      	ldr	r3, [r4, #4]
    40c2:	68a5      	ldr	r5, [r4, #8]
    40c4:	9300      	str	r3, [sp, #0]
    40c6:	9b00      	ldr	r3, [sp, #0]
    40c8:	3b01      	subs	r3, #1
    40ca:	9300      	str	r3, [sp, #0]
    40cc:	d501      	bpl.n	40d2 <_fwalk_reent+0x26>
    40ce:	6824      	ldr	r4, [r4, #0]
    40d0:	e7f2      	b.n	40b8 <_fwalk_reent+0xc>
    40d2:	89ab      	ldrh	r3, [r5, #12]
    40d4:	2b01      	cmp	r3, #1
    40d6:	d908      	bls.n	40ea <_fwalk_reent+0x3e>
    40d8:	220e      	movs	r2, #14
    40da:	5eab      	ldrsh	r3, [r5, r2]
    40dc:	3301      	adds	r3, #1
    40de:	d004      	beq.n	40ea <_fwalk_reent+0x3e>
    40e0:	0029      	movs	r1, r5
    40e2:	0038      	movs	r0, r7
    40e4:	9b01      	ldr	r3, [sp, #4]
    40e6:	4798      	blx	r3
    40e8:	4306      	orrs	r6, r0
    40ea:	3568      	adds	r5, #104	; 0x68
    40ec:	e7eb      	b.n	40c6 <_fwalk_reent+0x1a>
	...

000040f0 <__swhatbuf_r>:
    40f0:	b570      	push	{r4, r5, r6, lr}
    40f2:	000e      	movs	r6, r1
    40f4:	001d      	movs	r5, r3
    40f6:	230e      	movs	r3, #14
    40f8:	5ec9      	ldrsh	r1, [r1, r3]
    40fa:	b090      	sub	sp, #64	; 0x40
    40fc:	0014      	movs	r4, r2
    40fe:	2900      	cmp	r1, #0
    4100:	da07      	bge.n	4112 <__swhatbuf_r+0x22>
    4102:	2300      	movs	r3, #0
    4104:	602b      	str	r3, [r5, #0]
    4106:	89b3      	ldrh	r3, [r6, #12]
    4108:	061b      	lsls	r3, r3, #24
    410a:	d411      	bmi.n	4130 <__swhatbuf_r+0x40>
    410c:	2380      	movs	r3, #128	; 0x80
    410e:	00db      	lsls	r3, r3, #3
    4110:	e00f      	b.n	4132 <__swhatbuf_r+0x42>
    4112:	aa01      	add	r2, sp, #4
    4114:	f000 f94a 	bl	43ac <_fstat_r>
    4118:	2800      	cmp	r0, #0
    411a:	dbf2      	blt.n	4102 <__swhatbuf_r+0x12>
    411c:	22f0      	movs	r2, #240	; 0xf0
    411e:	9b02      	ldr	r3, [sp, #8]
    4120:	0212      	lsls	r2, r2, #8
    4122:	4013      	ands	r3, r2
    4124:	4a05      	ldr	r2, [pc, #20]	; (413c <__swhatbuf_r+0x4c>)
    4126:	189b      	adds	r3, r3, r2
    4128:	425a      	negs	r2, r3
    412a:	4153      	adcs	r3, r2
    412c:	602b      	str	r3, [r5, #0]
    412e:	e7ed      	b.n	410c <__swhatbuf_r+0x1c>
    4130:	2340      	movs	r3, #64	; 0x40
    4132:	2000      	movs	r0, #0
    4134:	6023      	str	r3, [r4, #0]
    4136:	b010      	add	sp, #64	; 0x40
    4138:	bd70      	pop	{r4, r5, r6, pc}
    413a:	46c0      	nop			; (mov r8, r8)
    413c:	ffffe000 	.word	0xffffe000

00004140 <malloc>:
    4140:	b510      	push	{r4, lr}
    4142:	4b03      	ldr	r3, [pc, #12]	; (4150 <malloc+0x10>)
    4144:	0001      	movs	r1, r0
    4146:	6818      	ldr	r0, [r3, #0]
    4148:	f000 f84e 	bl	41e8 <_malloc_r>
    414c:	bd10      	pop	{r4, pc}
    414e:	46c0      	nop			; (mov r8, r8)
    4150:	20000014 	.word	0x20000014

00004154 <_free_r>:
    4154:	b570      	push	{r4, r5, r6, lr}
    4156:	0005      	movs	r5, r0
    4158:	2900      	cmp	r1, #0
    415a:	d010      	beq.n	417e <_free_r+0x2a>
    415c:	1f0c      	subs	r4, r1, #4
    415e:	6823      	ldr	r3, [r4, #0]
    4160:	2b00      	cmp	r3, #0
    4162:	da00      	bge.n	4166 <_free_r+0x12>
    4164:	18e4      	adds	r4, r4, r3
    4166:	0028      	movs	r0, r5
    4168:	f000 f946 	bl	43f8 <__malloc_lock>
    416c:	4a1d      	ldr	r2, [pc, #116]	; (41e4 <_free_r+0x90>)
    416e:	6813      	ldr	r3, [r2, #0]
    4170:	2b00      	cmp	r3, #0
    4172:	d105      	bne.n	4180 <_free_r+0x2c>
    4174:	6063      	str	r3, [r4, #4]
    4176:	6014      	str	r4, [r2, #0]
    4178:	0028      	movs	r0, r5
    417a:	f000 f93e 	bl	43fa <__malloc_unlock>
    417e:	bd70      	pop	{r4, r5, r6, pc}
    4180:	42a3      	cmp	r3, r4
    4182:	d909      	bls.n	4198 <_free_r+0x44>
    4184:	6821      	ldr	r1, [r4, #0]
    4186:	1860      	adds	r0, r4, r1
    4188:	4283      	cmp	r3, r0
    418a:	d1f3      	bne.n	4174 <_free_r+0x20>
    418c:	6818      	ldr	r0, [r3, #0]
    418e:	685b      	ldr	r3, [r3, #4]
    4190:	1841      	adds	r1, r0, r1
    4192:	6021      	str	r1, [r4, #0]
    4194:	e7ee      	b.n	4174 <_free_r+0x20>
    4196:	0013      	movs	r3, r2
    4198:	685a      	ldr	r2, [r3, #4]
    419a:	2a00      	cmp	r2, #0
    419c:	d001      	beq.n	41a2 <_free_r+0x4e>
    419e:	42a2      	cmp	r2, r4
    41a0:	d9f9      	bls.n	4196 <_free_r+0x42>
    41a2:	6819      	ldr	r1, [r3, #0]
    41a4:	1858      	adds	r0, r3, r1
    41a6:	42a0      	cmp	r0, r4
    41a8:	d10b      	bne.n	41c2 <_free_r+0x6e>
    41aa:	6820      	ldr	r0, [r4, #0]
    41ac:	1809      	adds	r1, r1, r0
    41ae:	1858      	adds	r0, r3, r1
    41b0:	6019      	str	r1, [r3, #0]
    41b2:	4282      	cmp	r2, r0
    41b4:	d1e0      	bne.n	4178 <_free_r+0x24>
    41b6:	6810      	ldr	r0, [r2, #0]
    41b8:	6852      	ldr	r2, [r2, #4]
    41ba:	1841      	adds	r1, r0, r1
    41bc:	6019      	str	r1, [r3, #0]
    41be:	605a      	str	r2, [r3, #4]
    41c0:	e7da      	b.n	4178 <_free_r+0x24>
    41c2:	42a0      	cmp	r0, r4
    41c4:	d902      	bls.n	41cc <_free_r+0x78>
    41c6:	230c      	movs	r3, #12
    41c8:	602b      	str	r3, [r5, #0]
    41ca:	e7d5      	b.n	4178 <_free_r+0x24>
    41cc:	6821      	ldr	r1, [r4, #0]
    41ce:	1860      	adds	r0, r4, r1
    41d0:	4282      	cmp	r2, r0
    41d2:	d103      	bne.n	41dc <_free_r+0x88>
    41d4:	6810      	ldr	r0, [r2, #0]
    41d6:	6852      	ldr	r2, [r2, #4]
    41d8:	1841      	adds	r1, r0, r1
    41da:	6021      	str	r1, [r4, #0]
    41dc:	6062      	str	r2, [r4, #4]
    41de:	605c      	str	r4, [r3, #4]
    41e0:	e7ca      	b.n	4178 <_free_r+0x24>
    41e2:	46c0      	nop			; (mov r8, r8)
    41e4:	20000228 	.word	0x20000228

000041e8 <_malloc_r>:
    41e8:	2303      	movs	r3, #3
    41ea:	b570      	push	{r4, r5, r6, lr}
    41ec:	1ccd      	adds	r5, r1, #3
    41ee:	439d      	bics	r5, r3
    41f0:	3508      	adds	r5, #8
    41f2:	0006      	movs	r6, r0
    41f4:	2d0c      	cmp	r5, #12
    41f6:	d21e      	bcs.n	4236 <_malloc_r+0x4e>
    41f8:	250c      	movs	r5, #12
    41fa:	42a9      	cmp	r1, r5
    41fc:	d81d      	bhi.n	423a <_malloc_r+0x52>
    41fe:	0030      	movs	r0, r6
    4200:	f000 f8fa 	bl	43f8 <__malloc_lock>
    4204:	4a25      	ldr	r2, [pc, #148]	; (429c <_malloc_r+0xb4>)
    4206:	6814      	ldr	r4, [r2, #0]
    4208:	0021      	movs	r1, r4
    420a:	2900      	cmp	r1, #0
    420c:	d119      	bne.n	4242 <_malloc_r+0x5a>
    420e:	4c24      	ldr	r4, [pc, #144]	; (42a0 <_malloc_r+0xb8>)
    4210:	6823      	ldr	r3, [r4, #0]
    4212:	2b00      	cmp	r3, #0
    4214:	d103      	bne.n	421e <_malloc_r+0x36>
    4216:	0030      	movs	r0, r6
    4218:	f000 f844 	bl	42a4 <_sbrk_r>
    421c:	6020      	str	r0, [r4, #0]
    421e:	0029      	movs	r1, r5
    4220:	0030      	movs	r0, r6
    4222:	f000 f83f 	bl	42a4 <_sbrk_r>
    4226:	1c43      	adds	r3, r0, #1
    4228:	d12c      	bne.n	4284 <_malloc_r+0x9c>
    422a:	230c      	movs	r3, #12
    422c:	0030      	movs	r0, r6
    422e:	6033      	str	r3, [r6, #0]
    4230:	f000 f8e3 	bl	43fa <__malloc_unlock>
    4234:	e003      	b.n	423e <_malloc_r+0x56>
    4236:	2d00      	cmp	r5, #0
    4238:	dadf      	bge.n	41fa <_malloc_r+0x12>
    423a:	230c      	movs	r3, #12
    423c:	6033      	str	r3, [r6, #0]
    423e:	2000      	movs	r0, #0
    4240:	bd70      	pop	{r4, r5, r6, pc}
    4242:	680b      	ldr	r3, [r1, #0]
    4244:	1b5b      	subs	r3, r3, r5
    4246:	d41a      	bmi.n	427e <_malloc_r+0x96>
    4248:	2b0b      	cmp	r3, #11
    424a:	d903      	bls.n	4254 <_malloc_r+0x6c>
    424c:	600b      	str	r3, [r1, #0]
    424e:	18cc      	adds	r4, r1, r3
    4250:	6025      	str	r5, [r4, #0]
    4252:	e003      	b.n	425c <_malloc_r+0x74>
    4254:	428c      	cmp	r4, r1
    4256:	d10e      	bne.n	4276 <_malloc_r+0x8e>
    4258:	6863      	ldr	r3, [r4, #4]
    425a:	6013      	str	r3, [r2, #0]
    425c:	0030      	movs	r0, r6
    425e:	f000 f8cc 	bl	43fa <__malloc_unlock>
    4262:	0020      	movs	r0, r4
    4264:	2207      	movs	r2, #7
    4266:	300b      	adds	r0, #11
    4268:	1d23      	adds	r3, r4, #4
    426a:	4390      	bics	r0, r2
    426c:	1ac3      	subs	r3, r0, r3
    426e:	d0e7      	beq.n	4240 <_malloc_r+0x58>
    4270:	425a      	negs	r2, r3
    4272:	50e2      	str	r2, [r4, r3]
    4274:	e7e4      	b.n	4240 <_malloc_r+0x58>
    4276:	684b      	ldr	r3, [r1, #4]
    4278:	6063      	str	r3, [r4, #4]
    427a:	000c      	movs	r4, r1
    427c:	e7ee      	b.n	425c <_malloc_r+0x74>
    427e:	000c      	movs	r4, r1
    4280:	6849      	ldr	r1, [r1, #4]
    4282:	e7c2      	b.n	420a <_malloc_r+0x22>
    4284:	2303      	movs	r3, #3
    4286:	1cc4      	adds	r4, r0, #3
    4288:	439c      	bics	r4, r3
    428a:	42a0      	cmp	r0, r4
    428c:	d0e0      	beq.n	4250 <_malloc_r+0x68>
    428e:	1a21      	subs	r1, r4, r0
    4290:	0030      	movs	r0, r6
    4292:	f000 f807 	bl	42a4 <_sbrk_r>
    4296:	1c43      	adds	r3, r0, #1
    4298:	d1da      	bne.n	4250 <_malloc_r+0x68>
    429a:	e7c6      	b.n	422a <_malloc_r+0x42>
    429c:	20000228 	.word	0x20000228
    42a0:	2000022c 	.word	0x2000022c

000042a4 <_sbrk_r>:
    42a4:	2300      	movs	r3, #0
    42a6:	b570      	push	{r4, r5, r6, lr}
    42a8:	4c06      	ldr	r4, [pc, #24]	; (42c4 <_sbrk_r+0x20>)
    42aa:	0005      	movs	r5, r0
    42ac:	0008      	movs	r0, r1
    42ae:	6023      	str	r3, [r4, #0]
    42b0:	f7fd f92a 	bl	1508 <_sbrk>
    42b4:	1c43      	adds	r3, r0, #1
    42b6:	d103      	bne.n	42c0 <_sbrk_r+0x1c>
    42b8:	6823      	ldr	r3, [r4, #0]
    42ba:	2b00      	cmp	r3, #0
    42bc:	d000      	beq.n	42c0 <_sbrk_r+0x1c>
    42be:	602b      	str	r3, [r5, #0]
    42c0:	bd70      	pop	{r4, r5, r6, pc}
    42c2:	46c0      	nop			; (mov r8, r8)
    42c4:	200002e0 	.word	0x200002e0

000042c8 <__sread>:
    42c8:	b570      	push	{r4, r5, r6, lr}
    42ca:	000c      	movs	r4, r1
    42cc:	250e      	movs	r5, #14
    42ce:	5f49      	ldrsh	r1, [r1, r5]
    42d0:	f000 f894 	bl	43fc <_read_r>
    42d4:	2800      	cmp	r0, #0
    42d6:	db03      	blt.n	42e0 <__sread+0x18>
    42d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    42da:	181b      	adds	r3, r3, r0
    42dc:	6563      	str	r3, [r4, #84]	; 0x54
    42de:	bd70      	pop	{r4, r5, r6, pc}
    42e0:	89a3      	ldrh	r3, [r4, #12]
    42e2:	4a02      	ldr	r2, [pc, #8]	; (42ec <__sread+0x24>)
    42e4:	4013      	ands	r3, r2
    42e6:	81a3      	strh	r3, [r4, #12]
    42e8:	e7f9      	b.n	42de <__sread+0x16>
    42ea:	46c0      	nop			; (mov r8, r8)
    42ec:	ffffefff 	.word	0xffffefff

000042f0 <__swrite>:
    42f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42f2:	001f      	movs	r7, r3
    42f4:	898b      	ldrh	r3, [r1, #12]
    42f6:	0005      	movs	r5, r0
    42f8:	000c      	movs	r4, r1
    42fa:	0016      	movs	r6, r2
    42fc:	05db      	lsls	r3, r3, #23
    42fe:	d505      	bpl.n	430c <__swrite+0x1c>
    4300:	230e      	movs	r3, #14
    4302:	5ec9      	ldrsh	r1, [r1, r3]
    4304:	2200      	movs	r2, #0
    4306:	2302      	movs	r3, #2
    4308:	f000 f862 	bl	43d0 <_lseek_r>
    430c:	89a3      	ldrh	r3, [r4, #12]
    430e:	4a05      	ldr	r2, [pc, #20]	; (4324 <__swrite+0x34>)
    4310:	0028      	movs	r0, r5
    4312:	4013      	ands	r3, r2
    4314:	81a3      	strh	r3, [r4, #12]
    4316:	0032      	movs	r2, r6
    4318:	230e      	movs	r3, #14
    431a:	5ee1      	ldrsh	r1, [r4, r3]
    431c:	003b      	movs	r3, r7
    431e:	f000 f81f 	bl	4360 <_write_r>
    4322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4324:	ffffefff 	.word	0xffffefff

00004328 <__sseek>:
    4328:	b570      	push	{r4, r5, r6, lr}
    432a:	000c      	movs	r4, r1
    432c:	250e      	movs	r5, #14
    432e:	5f49      	ldrsh	r1, [r1, r5]
    4330:	f000 f84e 	bl	43d0 <_lseek_r>
    4334:	89a3      	ldrh	r3, [r4, #12]
    4336:	1c42      	adds	r2, r0, #1
    4338:	d103      	bne.n	4342 <__sseek+0x1a>
    433a:	4a05      	ldr	r2, [pc, #20]	; (4350 <__sseek+0x28>)
    433c:	4013      	ands	r3, r2
    433e:	81a3      	strh	r3, [r4, #12]
    4340:	bd70      	pop	{r4, r5, r6, pc}
    4342:	2280      	movs	r2, #128	; 0x80
    4344:	0152      	lsls	r2, r2, #5
    4346:	4313      	orrs	r3, r2
    4348:	81a3      	strh	r3, [r4, #12]
    434a:	6560      	str	r0, [r4, #84]	; 0x54
    434c:	e7f8      	b.n	4340 <__sseek+0x18>
    434e:	46c0      	nop			; (mov r8, r8)
    4350:	ffffefff 	.word	0xffffefff

00004354 <__sclose>:
    4354:	b510      	push	{r4, lr}
    4356:	230e      	movs	r3, #14
    4358:	5ec9      	ldrsh	r1, [r1, r3]
    435a:	f000 f815 	bl	4388 <_close_r>
    435e:	bd10      	pop	{r4, pc}

00004360 <_write_r>:
    4360:	b570      	push	{r4, r5, r6, lr}
    4362:	0005      	movs	r5, r0
    4364:	0008      	movs	r0, r1
    4366:	0011      	movs	r1, r2
    4368:	2200      	movs	r2, #0
    436a:	4c06      	ldr	r4, [pc, #24]	; (4384 <_write_r+0x24>)
    436c:	6022      	str	r2, [r4, #0]
    436e:	001a      	movs	r2, r3
    4370:	f7fe fa9c 	bl	28ac <_write>
    4374:	1c43      	adds	r3, r0, #1
    4376:	d103      	bne.n	4380 <_write_r+0x20>
    4378:	6823      	ldr	r3, [r4, #0]
    437a:	2b00      	cmp	r3, #0
    437c:	d000      	beq.n	4380 <_write_r+0x20>
    437e:	602b      	str	r3, [r5, #0]
    4380:	bd70      	pop	{r4, r5, r6, pc}
    4382:	46c0      	nop			; (mov r8, r8)
    4384:	200002e0 	.word	0x200002e0

00004388 <_close_r>:
    4388:	2300      	movs	r3, #0
    438a:	b570      	push	{r4, r5, r6, lr}
    438c:	4c06      	ldr	r4, [pc, #24]	; (43a8 <_close_r+0x20>)
    438e:	0005      	movs	r5, r0
    4390:	0008      	movs	r0, r1
    4392:	6023      	str	r3, [r4, #0]
    4394:	f7fd f8ca 	bl	152c <_close>
    4398:	1c43      	adds	r3, r0, #1
    439a:	d103      	bne.n	43a4 <_close_r+0x1c>
    439c:	6823      	ldr	r3, [r4, #0]
    439e:	2b00      	cmp	r3, #0
    43a0:	d000      	beq.n	43a4 <_close_r+0x1c>
    43a2:	602b      	str	r3, [r5, #0]
    43a4:	bd70      	pop	{r4, r5, r6, pc}
    43a6:	46c0      	nop			; (mov r8, r8)
    43a8:	200002e0 	.word	0x200002e0

000043ac <_fstat_r>:
    43ac:	2300      	movs	r3, #0
    43ae:	b570      	push	{r4, r5, r6, lr}
    43b0:	4c06      	ldr	r4, [pc, #24]	; (43cc <_fstat_r+0x20>)
    43b2:	0005      	movs	r5, r0
    43b4:	0008      	movs	r0, r1
    43b6:	0011      	movs	r1, r2
    43b8:	6023      	str	r3, [r4, #0]
    43ba:	f7fd f8ba 	bl	1532 <_fstat>
    43be:	1c43      	adds	r3, r0, #1
    43c0:	d103      	bne.n	43ca <_fstat_r+0x1e>
    43c2:	6823      	ldr	r3, [r4, #0]
    43c4:	2b00      	cmp	r3, #0
    43c6:	d000      	beq.n	43ca <_fstat_r+0x1e>
    43c8:	602b      	str	r3, [r5, #0]
    43ca:	bd70      	pop	{r4, r5, r6, pc}
    43cc:	200002e0 	.word	0x200002e0

000043d0 <_lseek_r>:
    43d0:	b570      	push	{r4, r5, r6, lr}
    43d2:	0005      	movs	r5, r0
    43d4:	0008      	movs	r0, r1
    43d6:	0011      	movs	r1, r2
    43d8:	2200      	movs	r2, #0
    43da:	4c06      	ldr	r4, [pc, #24]	; (43f4 <_lseek_r+0x24>)
    43dc:	6022      	str	r2, [r4, #0]
    43de:	001a      	movs	r2, r3
    43e0:	f7fd f8ac 	bl	153c <_lseek>
    43e4:	1c43      	adds	r3, r0, #1
    43e6:	d103      	bne.n	43f0 <_lseek_r+0x20>
    43e8:	6823      	ldr	r3, [r4, #0]
    43ea:	2b00      	cmp	r3, #0
    43ec:	d000      	beq.n	43f0 <_lseek_r+0x20>
    43ee:	602b      	str	r3, [r5, #0]
    43f0:	bd70      	pop	{r4, r5, r6, pc}
    43f2:	46c0      	nop			; (mov r8, r8)
    43f4:	200002e0 	.word	0x200002e0

000043f8 <__malloc_lock>:
    43f8:	4770      	bx	lr

000043fa <__malloc_unlock>:
    43fa:	4770      	bx	lr

000043fc <_read_r>:
    43fc:	b570      	push	{r4, r5, r6, lr}
    43fe:	0005      	movs	r5, r0
    4400:	0008      	movs	r0, r1
    4402:	0011      	movs	r1, r2
    4404:	2200      	movs	r2, #0
    4406:	4c06      	ldr	r4, [pc, #24]	; (4420 <_read_r+0x24>)
    4408:	6022      	str	r2, [r4, #0]
    440a:	001a      	movs	r2, r3
    440c:	f7fe fa3a 	bl	2884 <_read>
    4410:	1c43      	adds	r3, r0, #1
    4412:	d103      	bne.n	441c <_read_r+0x20>
    4414:	6823      	ldr	r3, [r4, #0]
    4416:	2b00      	cmp	r3, #0
    4418:	d000      	beq.n	441c <_read_r+0x20>
    441a:	602b      	str	r3, [r5, #0]
    441c:	bd70      	pop	{r4, r5, r6, pc}
    441e:	46c0      	nop			; (mov r8, r8)
    4420:	200002e0 	.word	0x200002e0
    4424:	682f2e2e 	.word	0x682f2e2e
    4428:	732f6c61 	.word	0x732f6c61
    442c:	682f6372 	.word	0x682f6372
    4430:	635f6c61 	.word	0x635f6c61
    4434:	615f6e61 	.word	0x615f6e61
    4438:	636e7973 	.word	0x636e7973
    443c:	0000632e 	.word	0x0000632e
    4440:	682f2e2e 	.word	0x682f2e2e
    4444:	732f6c61 	.word	0x732f6c61
    4448:	682f6372 	.word	0x682f6372
    444c:	695f6c61 	.word	0x695f6c61
    4450:	00632e6f 	.word	0x00632e6f
    4454:	682f2e2e 	.word	0x682f2e2e
    4458:	732f6c61 	.word	0x732f6c61
    445c:	682f6372 	.word	0x682f6372
    4460:	735f6c61 	.word	0x735f6c61
    4464:	6d5f6970 	.word	0x6d5f6970
    4468:	6e79735f 	.word	0x6e79735f
    446c:	00632e63 	.word	0x00632e63
    4470:	682f2e2e 	.word	0x682f2e2e
    4474:	732f6c61 	.word	0x732f6c61
    4478:	682f6372 	.word	0x682f6372
    447c:	745f6c61 	.word	0x745f6c61
    4480:	72656d69 	.word	0x72656d69
    4484:	0000632e 	.word	0x0000632e
    4488:	682f2e2e 	.word	0x682f2e2e
    448c:	732f6c61 	.word	0x732f6c61
    4490:	682f6372 	.word	0x682f6372
    4494:	755f6c61 	.word	0x755f6c61
    4498:	74726173 	.word	0x74726173
    449c:	6e79735f 	.word	0x6e79735f
    44a0:	00632e63 	.word	0x00632e63
    44a4:	682f2e2e 	.word	0x682f2e2e
    44a8:	752f6c61 	.word	0x752f6c61
    44ac:	736c6974 	.word	0x736c6974
    44b0:	6372732f 	.word	0x6372732f
    44b4:	6974752f 	.word	0x6974752f
    44b8:	6c5f736c 	.word	0x6c5f736c
    44bc:	2e747369 	.word	0x2e747369
    44c0:	00000063 	.word	0x00000063
    44c4:	03020100 	.word	0x03020100
    44c8:	07060504 	.word	0x07060504
    44cc:	14100c08 	.word	0x14100c08
    44d0:	40302018 	.word	0x40302018
    44d4:	682f2e2e 	.word	0x682f2e2e
    44d8:	722f6c70 	.word	0x722f6c70
    44dc:	682f6374 	.word	0x682f6374
    44e0:	725f6c70 	.word	0x725f6c70
    44e4:	632e6374 	.word	0x632e6374
    44e8:	00000000 	.word	0x00000000

000044ec <_usarts>:
    44ec:	00000000 40100004 00030000 0000ff2e     .......@........
    44fc:	00000000                                ....

00004500 <_i2cms>:
	...

00004518 <_i2css>:
	...

00004528 <sercomspi_regs>:
    4528:	0023000c 00020000 00000000 01ff0001     ..#.............
    4538:	00000001 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    4548:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    4558:	78323025 00000020 45455053 454d4f44     %02x ...SPEEDOME
    4568:	00524554 482f4d4b 00000000 54544142     TER.KM/H....BATT
    4578:	20595245 52414843 00004547 54544142     ERY CHARGE..BATT
    4588:	00595245 504d4554 00000000 67656428     ERY.TEMP....(deg
    4598:	00002943 4f544f4d 00000052 0000319c     C)..MOTOR....1..
    45a8:	0000305c 0000305c 00003058 00003174     \0..\0..X0..t1..
    45b8:	00003174 00003166 00003058 00003174     t1..f1..X0..t1..
    45c8:	00003166 00003174 00003058 0000317c     f1..t1..X0..|1..
    45d8:	0000317c 0000317c 00003380              |1..|1...3..

000045e4 <_global_impure_ptr>:
    45e4:	20000018                                ... 

000045e8 <__sf_fake_stderr>:
	...

00004608 <__sf_fake_stdin>:
	...

00004628 <__sf_fake_stdout>:
	...

00004648 <_init>:
    4648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    464a:	46c0      	nop			; (mov r8, r8)
    464c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    464e:	bc08      	pop	{r3}
    4650:	469e      	mov	lr, r3
    4652:	4770      	bx	lr

00004654 <__init_array_start>:
    4654:	000000e5 	.word	0x000000e5

00004658 <_fini>:
    4658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    465a:	46c0      	nop			; (mov r8, r8)
    465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    465e:	bc08      	pop	{r3}
    4660:	469e      	mov	lr, r3
    4662:	4770      	bx	lr

00004664 <__fini_array_start>:
    4664:	000000bd 	.word	0x000000bd
